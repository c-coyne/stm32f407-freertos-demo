
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011848  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001480  080119d8  080119d8  000129d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e58  08012e58  000142b8  2**0
                  CONTENTS
  4 .ARM          00000008  08012e58  08012e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e60  08012e60  000142b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e60  08012e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e64  08012e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08012e68  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142b8  2**0
                  CONTENTS
 10 .bss          0001be98  200002b8  200002b8  000142b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001c150  2001c150  000142b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021bf2  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fc0  00000000  00000000  00035eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001623  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281c2  00000000  00000000  0003e173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d0c  00000000  00000000  00066335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c83  00000000  00000000  0008a041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00170cc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b0c  00000000  00000000  00170d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ae  00000000  00000000  00179814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119c0 	.word	0x080119c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	080119c0 	.word	0x080119c0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001aa30 	.word	0x2001aa30

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2uiz>:
 8000c58:	004a      	lsls	r2, r1, #1
 8000c5a:	d211      	bcs.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d211      	bcs.n	8000c86 <__aeabi_d2uiz+0x2e>
 8000c62:	d50d      	bpl.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d40e      	bmi.n	8000c8c <__aeabi_d2uiz+0x34>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d102      	bne.n	8000c92 <__aeabi_d2uiz+0x3a>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2f>:
 8000c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ca0:	bf24      	itt	cs
 8000ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000caa:	d90d      	bls.n	8000cc8 <__aeabi_d2f+0x30>
 8000cac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ccc:	d121      	bne.n	8000d12 <__aeabi_d2f+0x7a>
 8000cce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cd2:	bfbc      	itt	lt
 8000cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cd8:	4770      	bxlt	lr
 8000cda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce2:	f1c2 0218 	rsb	r2, r2, #24
 8000ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cee:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf2:	bf18      	it	ne
 8000cf4:	f040 0001 	orrne.w	r0, r0, #1
 8000cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d04:	ea40 000c 	orr.w	r0, r0, ip
 8000d08:	fa23 f302 	lsr.w	r3, r3, r2
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	e7cc      	b.n	8000cac <__aeabi_d2f+0x14>
 8000d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d16:	d107      	bne.n	8000d28 <__aeabi_d2f+0x90>
 8000d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d26:	4770      	bxne	lr
 8000d28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d4c:	f000 b9a0 	b.w	8001090 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff ff0b 	bl	8000b8c <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc81 	bl	80006a8 <__aeabi_dmul>
 8000da6:	f7ff ff57 	bl	8000c58 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fc02 	bl	80005b4 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc78 	bl	80006a8 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff faba 	bl	8000338 <__aeabi_dsub>
 8000dc4:	f7ff ff48 	bl	8000c58 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d14e      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de0:	4694      	mov	ip, r2
 8000de2:	458c      	cmp	ip, r1
 8000de4:	4686      	mov	lr, r0
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	d962      	bls.n	8000eb2 <__udivmoddi4+0xde>
 8000dec:	b14a      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	4091      	lsls	r1, r2
 8000df4:	fa20 f303 	lsr.w	r3, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f f68c 	uxth.w	r6, ip
 8000e0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb07 1114 	mls	r1, r7, r4, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb04 f106 	mul.w	r1, r4, r6
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e2a:	f080 8112 	bcs.w	8001052 <__udivmoddi4+0x27e>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 810f 	bls.w	8001052 <__udivmoddi4+0x27e>
 8000e34:	3c02      	subs	r4, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a59      	subs	r1, r3, r1
 8000e3a:	fa1f f38e 	uxth.w	r3, lr
 8000e3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e42:	fb07 1110 	mls	r1, r7, r0, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f606 	mul.w	r6, r0, r6
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x94>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 80fc 	bcs.w	8001056 <__udivmoddi4+0x282>
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	f240 80f9 	bls.w	8001056 <__udivmoddi4+0x282>
 8000e64:	4463      	add	r3, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e6e:	2100      	movs	r1, #0
 8000e70:	b11d      	cbz	r5, 8000e7a <__udivmoddi4+0xa6>
 8000e72:	40d3      	lsrs	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d905      	bls.n	8000e8e <__udivmoddi4+0xba>
 8000e82:	b10d      	cbz	r5, 8000e88 <__udivmoddi4+0xb4>
 8000e84:	e9c5 0100 	strd	r0, r1, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e7f5      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000e8e:	fab3 f183 	clz	r1, r3
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d146      	bne.n	8000f24 <__udivmoddi4+0x150>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d302      	bcc.n	8000ea0 <__udivmoddi4+0xcc>
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	f0c0 80f0 	bcc.w	8001080 <__udivmoddi4+0x2ac>
 8000ea0:	1a86      	subs	r6, r0, r2
 8000ea2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	d0e6      	beq.n	8000e7a <__udivmoddi4+0xa6>
 8000eac:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb0:	e7e3      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	f040 8090 	bne.w	8000fd8 <__udivmoddi4+0x204>
 8000eb8:	eba1 040c 	sub.w	r4, r1, ip
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa1f f78c 	uxth.w	r7, ip
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ece:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed6:	fb07 f006 	mul.w	r0, r7, r6
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x11c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x11a>
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	f200 80cd 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eee:	4626      	mov	r6, r4
 8000ef0:	1a1c      	subs	r4, r3, r0
 8000ef2:	fa1f f38e 	uxth.w	r3, lr
 8000ef6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efa:	fb08 4410 	mls	r4, r8, r0, r4
 8000efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f02:	fb00 f707 	mul.w	r7, r0, r7
 8000f06:	429f      	cmp	r7, r3
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x148>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f12:	d202      	bcs.n	8000f1a <__udivmoddi4+0x146>
 8000f14:	429f      	cmp	r7, r3
 8000f16:	f200 80b0 	bhi.w	800107a <__udivmoddi4+0x2a6>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	1bdb      	subs	r3, r3, r7
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0x9c>
 8000f24:	f1c1 0620 	rsb	r6, r1, #32
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f34:	fa04 f301 	lsl.w	r3, r4, r1
 8000f38:	ea43 030c 	orr.w	r3, r3, ip
 8000f3c:	40f4      	lsrs	r4, r6
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	0c38      	lsrs	r0, r7, #16
 8000f44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f48:	fbb4 fef0 	udiv	lr, r4, r0
 8000f4c:	fa1f fc87 	uxth.w	ip, r7
 8000f50:	fb00 441e 	mls	r4, r0, lr, r4
 8000f54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f58:	fb0e f90c 	mul.w	r9, lr, ip
 8000f5c:	45a1      	cmp	r9, r4
 8000f5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x1a6>
 8000f64:	193c      	adds	r4, r7, r4
 8000f66:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f6a:	f080 8084 	bcs.w	8001076 <__udivmoddi4+0x2a2>
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	f240 8081 	bls.w	8001076 <__udivmoddi4+0x2a2>
 8000f74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	eba4 0409 	sub.w	r4, r4, r9
 8000f7e:	fa1f f983 	uxth.w	r9, r3
 8000f82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f86:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f92:	45a4      	cmp	ip, r4
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x1d2>
 8000f96:	193c      	adds	r4, r7, r4
 8000f98:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f9c:	d267      	bcs.n	800106e <__udivmoddi4+0x29a>
 8000f9e:	45a4      	cmp	ip, r4
 8000fa0:	d965      	bls.n	800106e <__udivmoddi4+0x29a>
 8000fa2:	3b02      	subs	r3, #2
 8000fa4:	443c      	add	r4, r7
 8000fa6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000faa:	fba0 9302 	umull	r9, r3, r0, r2
 8000fae:	eba4 040c 	sub.w	r4, r4, ip
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	46ce      	mov	lr, r9
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	d351      	bcc.n	800105e <__udivmoddi4+0x28a>
 8000fba:	d04e      	beq.n	800105a <__udivmoddi4+0x286>
 8000fbc:	b155      	cbz	r5, 8000fd4 <__udivmoddi4+0x200>
 8000fbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fca:	40cb      	lsrs	r3, r1
 8000fcc:	431e      	orrs	r6, r3
 8000fce:	40cc      	lsrs	r4, r1
 8000fd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e750      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000fd8:	f1c2 0320 	rsb	r3, r2, #32
 8000fdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	430c      	orrs	r4, r1
 8000fec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff4:	fa1f f78c 	uxth.w	r7, ip
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3110 	mls	r1, r8, r0, r3
 8001000:	0c23      	lsrs	r3, r4, #16
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f107 	mul.w	r1, r0, r7
 800100a:	4299      	cmp	r1, r3
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x24c>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001016:	d22c      	bcs.n	8001072 <__udivmoddi4+0x29e>
 8001018:	4299      	cmp	r1, r3
 800101a:	d92a      	bls.n	8001072 <__udivmoddi4+0x29e>
 800101c:	3802      	subs	r0, #2
 800101e:	4463      	add	r3, ip
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	b2a4      	uxth	r4, r4
 8001024:	fbb3 f1f8 	udiv	r1, r3, r8
 8001028:	fb08 3311 	mls	r3, r8, r1, r3
 800102c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001030:	fb01 f307 	mul.w	r3, r1, r7
 8001034:	42a3      	cmp	r3, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x276>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001040:	d213      	bcs.n	800106a <__udivmoddi4+0x296>
 8001042:	42a3      	cmp	r3, r4
 8001044:	d911      	bls.n	800106a <__udivmoddi4+0x296>
 8001046:	3902      	subs	r1, #2
 8001048:	4464      	add	r4, ip
 800104a:	1ae4      	subs	r4, r4, r3
 800104c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001050:	e739      	b.n	8000ec6 <__udivmoddi4+0xf2>
 8001052:	4604      	mov	r4, r0
 8001054:	e6f0      	b.n	8000e38 <__udivmoddi4+0x64>
 8001056:	4608      	mov	r0, r1
 8001058:	e706      	b.n	8000e68 <__udivmoddi4+0x94>
 800105a:	45c8      	cmp	r8, r9
 800105c:	d2ae      	bcs.n	8000fbc <__udivmoddi4+0x1e8>
 800105e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001062:	eb63 0c07 	sbc.w	ip, r3, r7
 8001066:	3801      	subs	r0, #1
 8001068:	e7a8      	b.n	8000fbc <__udivmoddi4+0x1e8>
 800106a:	4631      	mov	r1, r6
 800106c:	e7ed      	b.n	800104a <__udivmoddi4+0x276>
 800106e:	4603      	mov	r3, r0
 8001070:	e799      	b.n	8000fa6 <__udivmoddi4+0x1d2>
 8001072:	4630      	mov	r0, r6
 8001074:	e7d4      	b.n	8001020 <__udivmoddi4+0x24c>
 8001076:	46d6      	mov	lr, sl
 8001078:	e77f      	b.n	8000f7a <__udivmoddi4+0x1a6>
 800107a:	4463      	add	r3, ip
 800107c:	3802      	subs	r0, #2
 800107e:	e74d      	b.n	8000f1c <__udivmoddi4+0x148>
 8001080:	4606      	mov	r6, r0
 8001082:	4623      	mov	r3, r4
 8001084:	4608      	mov	r0, r1
 8001086:	e70f      	b.n	8000ea8 <__udivmoddi4+0xd4>
 8001088:	3e02      	subs	r6, #2
 800108a:	4463      	add	r3, ip
 800108c:	e730      	b.n	8000ef0 <__udivmoddi4+0x11c>
 800108e:	bf00      	nop

08001090 <__aeabi_idiv0>:
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <acc_task>:
 * - xQueueSend(): Sends messages to a queue for printing messages to the user.						   *
 * - xEventGroupSetBits(): Sets event group bits for synchronizing with the LED task.				   *
 ******************************************************************************************************/

void acc_task(void* param)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	@ 0x30
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags
 800109c:	4b80      	ldr	r3, [pc, #512]	@ (80012a0 <acc_task+0x20c>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	81bb      	strh	r3, [r7, #12]
 80010a2:	2300      	movs	r3, #0
 80010a4:	73bb      	strb	r3, [r7, #14]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f00a f878 	bl	800b1a8 <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 80010b8:	4b7a      	ldr	r3, [pc, #488]	@ (80012a4 <acc_task+0x210>)
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c2:	4979      	ldr	r1, [pc, #484]	@ (80012a8 <acc_task+0x214>)
 80010c4:	f008 f96c 	bl	80093a0 <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f00a f866 	bl	800b1a8 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	61fb      	str	r3, [r7, #28]

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e4:	e008      	b.n	80010f8 <acc_task+0x64>
			acc_flag[i] = 0;
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++) {
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	ddf3      	ble.n	80010e6 <acc_task+0x52>
		}

		// Process command
		if(msg->len <= 4) {
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b04      	cmp	r3, #4
 8001104:	f200 80b5 	bhi.w	8001272 <acc_task+0x1de>
			if(!strcmp((char*)msg->payload, "X")) {
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	4968      	ldr	r1, [pc, #416]	@ (80012ac <acc_task+0x218>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8a9 	bl	8000264 <strcmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d115      	bne.n	8001144 <acc_task+0xb0>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f901 	bl	8001324 <accelerometer_read>
				acc_flag[0] = 1; 									// Set X-axis new data flag
 8001122:	2301      	movs	r3, #1
 8001124:	733b      	strb	r3, [r7, #12]
				show_acc_data(acc_data, acc_flag);					// Show data
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f93d 	bl	80013b0 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);	// Set X-axis event group bit for LED task synchronization
 8001136:	4b5e      	ldr	r3, [pc, #376]	@ (80012b0 <acc_task+0x21c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2101      	movs	r1, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f007 fed7 	bl	8008ef0 <xEventGroupSetBits>
 8001142:	e09e      	b.n	8001282 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Y")) {
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	495b      	ldr	r1, [pc, #364]	@ (80012b4 <acc_task+0x220>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f88b 	bl	8000264 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d115      	bne.n	8001180 <acc_task+0xec>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f8e3 	bl	8001324 <accelerometer_read>
				acc_flag[1] = 1; 									// Set Y-axis new data flag
 800115e:	2301      	movs	r3, #1
 8001160:	737b      	strb	r3, [r7, #13]
				show_acc_data(acc_data, acc_flag);					// Show data
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f91f 	bl	80013b0 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT); 	// Set Y-axis event group bit for LED task synchronization
 8001172:	4b4f      	ldr	r3, [pc, #316]	@ (80012b0 <acc_task+0x21c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f007 feb9 	bl	8008ef0 <xEventGroupSetBits>
 800117e:	e080      	b.n	8001282 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Z")) {
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	494d      	ldr	r1, [pc, #308]	@ (80012b8 <acc_task+0x224>)
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f86d 	bl	8000264 <strcmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d115      	bne.n	80011bc <acc_task+0x128>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f8c5 	bl	8001324 <accelerometer_read>
				acc_flag[2] = 1; 									// Set Z-axis new data flag
 800119a:	2301      	movs	r3, #1
 800119c:	73bb      	strb	r3, [r7, #14]
				show_acc_data(acc_data, acc_flag);					// Show data
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f901 	bl	80013b0 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);	// Set Z-axis event group bit for LED task synchronization
 80011ae:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <acc_task+0x21c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2104      	movs	r1, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f007 fe9b 	bl	8008ef0 <xEventGroupSetBits>
 80011ba:	e062      	b.n	8001282 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "All")) {
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	493f      	ldr	r1, [pc, #252]	@ (80012bc <acc_task+0x228>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f84f 	bl	8000264 <strcmp>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12e      	bne.n	800122a <acc_task+0x196>
				accelerometer_read(acc_data);						// Read data
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8a7 	bl	8001324 <accelerometer_read>
				for(int i=0; i<3; i++) acc_flag[i] = 1; 			// Set new data flags for all axes
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	e008      	b.n	80011ee <acc_task+0x15a>
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	4413      	add	r3, r2
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	3301      	adds	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	ddf3      	ble.n	80011dc <acc_task+0x148>
				show_acc_data(acc_data, acc_flag);					// Show data
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8d6 	bl	80013b0 <show_acc_data>
				// Set all event group bits for LED task synchronization
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <acc_task+0x21c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fe70 	bl	8008ef0 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT);
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <acc_task+0x21c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fe6a 	bl	8008ef0 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <acc_task+0x21c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fe64 	bl	8008ef0 <xEventGroupSetBits>
 8001228:	e02b      	b.n	8001282 <acc_task+0x1ee>
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	4924      	ldr	r1, [pc, #144]	@ (80012c0 <acc_task+0x22c>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f818 	bl	8000264 <strcmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d112      	bne.n	8001260 <acc_task+0x1cc>
				// Update the system state
				curr_sys_state = sMainMenu;
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <acc_task+0x230>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

				// Set event group bit to turn off all LEDs upon exiting accelerometer menu
				xEventGroupSetBits(ledEventGroup, TURN_OFF_LEDS_BIT);
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <acc_task+0x21c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2108      	movs	r1, #8
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fe52 	bl	8008ef0 <xEventGroupSetBits>

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <acc_task+0x234>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f00a f82f 	bl	800b2bc <xTaskGenericNotify>
 800125e:	e010      	b.n	8001282 <acc_task+0x1ee>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <acc_task+0x210>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800126a:	4918      	ldr	r1, [pc, #96]	@ (80012cc <acc_task+0x238>)
 800126c:	f008 f898 	bl	80093a0 <xQueueGenericSend>
 8001270:	e007      	b.n	8001282 <acc_task+0x1ee>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <acc_task+0x210>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127c:	4913      	ldr	r1, [pc, #76]	@ (80012cc <acc_task+0x238>)
 800127e:	f008 f88f 	bl	80093a0 <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <acc_task+0x230>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	f47f af0d 	bne.w	80010a6 <acc_task+0x12>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <acc_task+0x23c>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	f00a f80f 	bl	800b2bc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800129e:	e702      	b.n	80010a6 <acc_task+0x12>
 80012a0:	08011b30 	.word	0x08011b30
 80012a4:	20001768 	.word	0x20001768
 80012a8:	20000004 	.word	0x20000004
 80012ac:	08011b18 	.word	0x08011b18
 80012b0:	20001784 	.word	0x20001784
 80012b4:	08011b1c 	.word	0x08011b1c
 80012b8:	08011b20 	.word	0x08011b20
 80012bc:	08011b24 	.word	0x08011b24
 80012c0:	08011b28 	.word	0x08011b28
 80012c4:	20001791 	.word	0x20001791
 80012c8:	2000174c 	.word	0x2000174c
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20001760 	.word	0x20001760

080012d4 <accelerometer_init>:
 * - Sends the configuration data over SPI to set the desired settings.								   *
 * - Pulls the chip select (CS) pin high to de-select the device.									   *
 ******************************************************************************************************/

void accelerometer_init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
 80012da:	2357      	movs	r3, #87	@ 0x57
 80012dc:	71fb      	strb	r3, [r7, #7]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <accelerometer_init+0x48>)
 80012e4:	f003 fd72 	bl	8004dcc <HAL_GPIO_WritePin>

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
 80012e8:	2320      	movs	r3, #32
 80012ea:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80012ec:	1db9      	adds	r1, r7, #6
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f2:	2201      	movs	r2, #1
 80012f4:	480a      	ldr	r0, [pc, #40]	@ (8001320 <accelerometer_init+0x4c>)
 80012f6:	f004 fef6 	bl	80060e6 <HAL_SPI_Transmit>

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);
 80012fa:	1df9      	adds	r1, r7, #7
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001300:	2201      	movs	r2, #1
 8001302:	4807      	ldr	r0, [pc, #28]	@ (8001320 <accelerometer_init+0x4c>)
 8001304:	f004 feef 	bl	80060e6 <HAL_SPI_Transmit>

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2108      	movs	r1, #8
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <accelerometer_init+0x48>)
 800130e:	f003 fd5d 	bl	8004dcc <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	200015d4 	.word	0x200015d4

08001324 <accelerometer_read>:
 * - Converts the received byte data to 16-bit integer values for each axis and stores them in the 	   *
 *   provided array.																				   *
 ******************************************************************************************************/

void accelerometer_read(int16_t *acc_data)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;
 800132c:	23a8      	movs	r3, #168	@ 0xa8
 800132e:	73fb      	strb	r3, [r7, #15]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2108      	movs	r1, #8
 8001334:	481c      	ldr	r0, [pc, #112]	@ (80013a8 <accelerometer_read+0x84>)
 8001336:	f003 fd49 	bl	8004dcc <HAL_GPIO_WritePin>

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 800133a:	f107 010f 	add.w	r1, r7, #15
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001342:	2201      	movs	r2, #1
 8001344:	4819      	ldr	r0, [pc, #100]	@ (80013ac <accelerometer_read+0x88>)
 8001346:	f004 fece 	bl	80060e6 <HAL_SPI_Transmit>

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);
 800134a:	f107 0110 	add.w	r1, r7, #16
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001352:	2206      	movs	r2, #6
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <accelerometer_read+0x88>)
 8001356:	f005 f809 	bl	800636c <HAL_SPI_Receive>

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2108      	movs	r1, #8
 800135e:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <accelerometer_read+0x84>)
 8001360:	f003 fd34 	bl	8004dcc <HAL_GPIO_WritePin>

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
 8001364:	7c7b      	ldrb	r3, [r7, #17]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	7c3b      	ldrb	r3, [r7, #16]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
 8001376:	7cfb      	ldrb	r3, [r7, #19]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b219      	sxth	r1, r3
 800137c:	7cbb      	ldrb	r3, [r7, #18]
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3302      	adds	r3, #2
 8001384:	430a      	orrs	r2, r1
 8001386:	b212      	sxth	r2, r2
 8001388:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b219      	sxth	r1, r3
 8001390:	7d3b      	ldrb	r3, [r7, #20]
 8001392:	b21a      	sxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3304      	adds	r3, #4
 8001398:	430a      	orrs	r2, r1
 800139a:	b212      	sxth	r2, r2
 800139c:	801a      	strh	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	200015d4 	.word	0x200015d4

080013b0 <show_acc_data>:
 * - Formats and displays data in g values for the available axes based on flags.					   *
 * - Sends the formatted data to the print queue for display.										   *
 ******************************************************************************************************/

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	b097      	sub	sp, #92	@ 0x5c
 80013b4:	af08      	add	r7, sp, #32
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	// Set up buffer
	static char showacc[80];
	static char* acc = showacc;

	// Convert from raw sensor value to milli-g's [mg], using +/- 2g sensitivity
	int16_t x_mg = acc_data[0] * 2000 / 32768;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da02      	bge.n	80013d4 <show_acc_data+0x24>
 80013ce:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80013d2:	337f      	adds	r3, #127	@ 0x7f
 80013d4:	13db      	asrs	r3, r3, #15
 80013d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y_mg = acc_data[1] * 2000 / 32768;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3302      	adds	r3, #2
 80013dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da02      	bge.n	80013f4 <show_acc_data+0x44>
 80013ee:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80013f2:	337f      	adds	r3, #127	@ 0x7f
 80013f4:	13db      	asrs	r3, r3, #15
 80013f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t z_mg = acc_data[2] * 2000 / 32768;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3304      	adds	r3, #4
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	da02      	bge.n	8001414 <show_acc_data+0x64>
 800140e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001412:	337f      	adds	r3, #127	@ 0x7f
 8001414:	13db      	asrs	r3, r3, #15
 8001416:	867b      	strh	r3, [r7, #50]	@ 0x32

	// Variables to simulate floating point numbers
	int x_i, x_d, y_i, y_d, z_i, z_d;
	char x_s[2] = {"+"};
 8001418:	232b      	movs	r3, #43	@ 0x2b
 800141a:	82bb      	strh	r3, [r7, #20]
	char y_s[2] = {"+"};
 800141c:	232b      	movs	r3, #43	@ 0x2b
 800141e:	823b      	strh	r3, [r7, #16]
	char z_s[2] = {"+"};
 8001420:	232b      	movs	r3, #43	@ 0x2b
 8001422:	81bb      	strh	r3, [r7, #12]

	// Display the data that's available
	// All axes
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d141      	bne.n	80014b0 <show_acc_data+0x100>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d13c      	bne.n	80014b0 <show_acc_data+0x100>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3302      	adds	r3, #2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d137      	bne.n	80014b0 <show_acc_data+0x100>
		split_integer(x_mg, x_s, &x_i, &x_d);
 8001440:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001444:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001448:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800144c:	f107 0114 	add.w	r1, r7, #20
 8001450:	f000 f894 	bl	800157c <split_integer>
		split_integer(y_mg, y_s, &y_i, &y_d);
 8001454:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001460:	f107 0110 	add.w	r1, r7, #16
 8001464:	f000 f88a 	bl	800157c <split_integer>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001468:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	f107 021c 	add.w	r2, r7, #28
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	f000 f880 	bl	800157c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g, Y = %s%d.%d g, Z = %s%d.%d g\r\n", x_s, x_i, x_d, y_s, y_i, y_d, z_s, z_i, z_d);
 800147c:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 800147e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001482:	6a39      	ldr	r1, [r7, #32]
 8001484:	69f8      	ldr	r0, [r7, #28]
 8001486:	69bc      	ldr	r4, [r7, #24]
 8001488:	f107 0514 	add.w	r5, r7, #20
 800148c:	9406      	str	r4, [sp, #24]
 800148e:	9005      	str	r0, [sp, #20]
 8001490:	f107 000c 	add.w	r0, r7, #12
 8001494:	9004      	str	r0, [sp, #16]
 8001496:	9103      	str	r1, [sp, #12]
 8001498:	9202      	str	r2, [sp, #8]
 800149a:	f107 0210 	add.w	r2, r7, #16
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4633      	mov	r3, r6
 80014a4:	462a      	mov	r2, r5
 80014a6:	492e      	ldr	r1, [pc, #184]	@ (8001560 <show_acc_data+0x1b0>)
 80014a8:	482e      	ldr	r0, [pc, #184]	@ (8001564 <show_acc_data+0x1b4>)
 80014aa:	f00e f893 	bl	800f5d4 <siprintf>
 80014ae:	e04b      	b.n	8001548 <show_acc_data+0x198>
	}
	// X-axis only
	else if (acc_flag[0] == 1) {
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d114      	bne.n	80014e2 <show_acc_data+0x132>
		split_integer(x_mg, x_s, &x_i, &x_d);
 80014b8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80014bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80014c4:	f107 0114 	add.w	r1, r7, #20
 80014c8:	f000 f858 	bl	800157c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g\r\n", x_s, x_i, x_d);
 80014cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d0:	f107 0214 	add.w	r2, r7, #20
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	460b      	mov	r3, r1
 80014d8:	4923      	ldr	r1, [pc, #140]	@ (8001568 <show_acc_data+0x1b8>)
 80014da:	4822      	ldr	r0, [pc, #136]	@ (8001564 <show_acc_data+0x1b4>)
 80014dc:	f00e f87a 	bl	800f5d4 <siprintf>
 80014e0:	e032      	b.n	8001548 <show_acc_data+0x198>
	}
	// Y-axis only
	else if (acc_flag[1] == 1) {
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d114      	bne.n	8001516 <show_acc_data+0x166>
		split_integer(y_mg, y_s, &y_i, &y_d);
 80014ec:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	f000 f83e 	bl	800157c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Y = %s%d.%d g\r\n", y_s, y_i, y_d);
 8001500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f107 0210 	add.w	r2, r7, #16
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	460b      	mov	r3, r1
 800150c:	4917      	ldr	r1, [pc, #92]	@ (800156c <show_acc_data+0x1bc>)
 800150e:	4815      	ldr	r0, [pc, #84]	@ (8001564 <show_acc_data+0x1b4>)
 8001510:	f00e f860 	bl	800f5d4 <siprintf>
 8001514:	e018      	b.n	8001548 <show_acc_data+0x198>
	}
	// Z-axis only
	else if (acc_flag[2] == 1) {
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3302      	adds	r3, #2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d113      	bne.n	8001548 <show_acc_data+0x198>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001520:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	f107 021c 	add.w	r2, r7, #28
 800152c:	f107 010c 	add.w	r1, r7, #12
 8001530:	f000 f824 	bl	800157c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Z = %s%d.%d g\r\n", z_s, z_i, z_d);
 8001534:	69f9      	ldr	r1, [r7, #28]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	460b      	mov	r3, r1
 8001540:	490b      	ldr	r1, [pc, #44]	@ (8001570 <show_acc_data+0x1c0>)
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <show_acc_data+0x1b4>)
 8001544:	f00e f846 	bl	800f5d4 <siprintf>
	}

	// Populate the print queue
	xQueueSend(q_print, &acc, portMAX_DELAY);
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <show_acc_data+0x1c4>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001552:	4909      	ldr	r1, [pc, #36]	@ (8001578 <show_acc_data+0x1c8>)
 8001554:	f007 ff24 	bl	80093a0 <xQueueGenericSend>
}
 8001558:	bf00      	nop
 800155a:	373c      	adds	r7, #60	@ 0x3c
 800155c:	46bd      	mov	sp, r7
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	08011b34 	.word	0x08011b34
 8001564:	200002d4 	.word	0x200002d4
 8001568:	08011b7c 	.word	0x08011b7c
 800156c:	08011ba4 	.word	0x08011ba4
 8001570:	08011bcc 	.word	0x08011bcc
 8001574:	20001768 	.word	0x20001768
 8001578:	20000008 	.word	0x20000008

0800157c <split_integer>:
 * the hundreds part is always positive. If the hundreds part rounds up to exactly 1000, the 		   *
 * thousands part is incremented and the hundreds part is reset to 0.								   *
 ******************************************************************************************************/

void split_integer(int value, char* sign, int *thousands_part, int *hundreds_part)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
	// Evaluate the sign
	if(value < 0) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da06      	bge.n	800159e <split_integer+0x22>
		strcpy(sign, "-");
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4925      	ldr	r1, [pc, #148]	@ (8001628 <split_integer+0xac>)
 8001594:	461a      	mov	r2, r3
 8001596:	460b      	mov	r3, r1
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	8013      	strh	r3, [r2, #0]
 800159c:	e005      	b.n	80015aa <split_integer+0x2e>
	}
	else {
		strcpy(sign, "+");
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4922      	ldr	r1, [pc, #136]	@ (800162c <split_integer+0xb0>)
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	8013      	strh	r3, [r2, #0]
	}

	// Calculate how many thousands
    *thousands_part = abs(value / 1000);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <split_integer+0xb4>)
 80015ae:	fb82 1203 	smull	r1, r2, r2, r3
 80015b2:	1192      	asrs	r2, r2, #6
 80015b4:	17db      	asrs	r3, r3, #31
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]

    // Calculate the remaining hundreds
    int remainder = value % 1000;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001630 <split_integer+0xb4>)
 80015c8:	fb82 1203 	smull	r1, r2, r2, r3
 80015cc:	1191      	asrs	r1, r2, #6
 80015ce:	17da      	asrs	r2, r3, #31
 80015d0:	1a8a      	subs	r2, r1, r2
 80015d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015d6:	fb01 f202 	mul.w	r2, r1, r2
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

    // Ensure hundreds_part is positive
    *hundreds_part = abs((int)(remainder / 100.0));
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7fe fff8 	bl	80005d4 <__aeabi_i2d>
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <split_integer+0xb8>)
 80015ea:	f7ff f987 	bl	80008fc <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fb07 	bl	8000c08 <__aeabi_d2iz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001600:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	601a      	str	r2, [r3, #0]

    // Adjust thousands_part if rounding up results in exactly 1000
    if (*hundreds_part == 10) {
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d107      	bne.n	8001620 <split_integer+0xa4>
        *thousands_part += 1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
        *hundreds_part = 0;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    }
}
 8001620:	bf00      	nop
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08011bf4 	.word	0x08011bf4
 800162c:	08011bf8 	.word	0x08011bf8
 8001630:	10624dd3 	.word	0x10624dd3
 8001634:	40590000 	.word	0x40590000

08001638 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
	// Communication variables
	uint32_t msg_addr;
	message_t *msg;

	// LED timer parameters
	int freq = 2; // Frequency in Hz
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
	int period = 500; // Period in ms
 8001644:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24

	// FreeRTOS variables
	const TickType_t xTicksToWait = pdMS_TO_TICKS(EVENT_GROUP_WAIT_TIME); // Wait period for the event group
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	623b      	str	r3, [r7, #32]
	uint32_t notificationValue;
	EventBits_t eventBits;

	while(1) {
		// Wait for task notification or timeout =========================================================================
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 800164e:	f107 020c 	add.w	r2, r7, #12
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f009 fda3 	bl	800b1a8 <xTaskGenericNotifyWait>
 8001662:	4603      	mov	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 817a 	bne.w	800195e <led_task+0x326>
																														//
			// Display LED menu for the user																			//
			xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);															//
 800166a:	4b9a      	ldr	r3, [pc, #616]	@ (80018d4 <led_task+0x29c>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001674:	4998      	ldr	r1, [pc, #608]	@ (80018d8 <led_task+0x2a0>)
 8001676:	f007 fe93 	bl	80093a0 <xQueueGenericSend>
																														//
			// Wait for the user to select their desired LED effect														//
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);															//
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f009 fd8d 	bl	800b1a8 <xTaskGenericNotifyWait>
			msg = (message_t*)msg_addr;																					//
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	61fb      	str	r3, [r7, #28]
																														//
			// Process command, adjust LED state, and set software timers accordingly									//
			if(msg->len <= 4) {																							//
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b04      	cmp	r3, #4
 8001698:	f200 814c 	bhi.w	8001934 <led_task+0x2fc>
				if(!strcmp((char*)msg->payload, "None"))			// No effect										//
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	498f      	ldr	r1, [pc, #572]	@ (80018dc <led_task+0x2a4>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fddf 	bl	8000264 <strcmp>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <led_task+0x88>
				{																										//
					set_led_timer(effectNone);																			//
 80016ac:	2004      	movs	r0, #4
 80016ae:	f000 fa25 	bl	8001afc <set_led_timer>
					curr_led_state = sNone;																				//
 80016b2:	4b8b      	ldr	r3, [pc, #556]	@ (80018e0 <led_task+0x2a8>)
 80016b4:	2204      	movs	r2, #4
 80016b6:	701a      	strb	r2, [r3, #0]
					control_all_leds(LED_OFF);																			//
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fa51 	bl	8001b60 <control_all_leds>
 80016be:	e141      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect										//
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4988      	ldr	r1, [pc, #544]	@ (80018e4 <led_task+0x2ac>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fdcd 	bl	8000264 <strcmp>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <led_task+0xa6>
					curr_led_state = sEffectE1;																			//
 80016d0:	4b83      	ldr	r3, [pc, #524]	@ (80018e0 <led_task+0x2a8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE1);																			//
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 fa10 	bl	8001afc <set_led_timer>
 80016dc:	e132      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect										//
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4981      	ldr	r1, [pc, #516]	@ (80018e8 <led_task+0x2b0>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fdbe 	bl	8000264 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <led_task+0xc4>
					curr_led_state = sEffectE2;																			//
 80016ee:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <led_task+0x2a8>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE2);																			//
 80016f4:	2001      	movs	r0, #1
 80016f6:	f000 fa01 	bl	8001afc <set_led_timer>
 80016fa:	e123      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect										//
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	497b      	ldr	r1, [pc, #492]	@ (80018ec <led_task+0x2b4>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fdaf 	bl	8000264 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d106      	bne.n	800171a <led_task+0xe2>
					curr_led_state = sEffectE3;																			//
 800170c:	4b74      	ldr	r3, [pc, #464]	@ (80018e0 <led_task+0x2a8>)
 800170e:	2202      	movs	r2, #2
 8001710:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE3);																			//
 8001712:	2002      	movs	r0, #2
 8001714:	f000 f9f2 	bl	8001afc <set_led_timer>
 8001718:	e114      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect										//
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4974      	ldr	r1, [pc, #464]	@ (80018f0 <led_task+0x2b8>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fda0 	bl	8000264 <strcmp>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <led_task+0x100>
					curr_led_state = sEffectE4;																			//
 800172a:	4b6d      	ldr	r3, [pc, #436]	@ (80018e0 <led_task+0x2a8>)
 800172c:	2203      	movs	r2, #3
 800172e:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE4);																			//
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f9e3 	bl	8001afc <set_led_timer>
 8001736:	e105      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "Tor")) {		// Toggle orange LED								//
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	496e      	ldr	r1, [pc, #440]	@ (80018f4 <led_task+0x2bc>)
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fd91 	bl	8000264 <strcmp>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <led_task+0x128>
					set_led_timer(effectNone);																			//
 8001748:	2004      	movs	r0, #4
 800174a:	f000 f9d7 	bl	8001afc <set_led_timer>
					curr_led_state = sNone;																				//
 800174e:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <led_task+0x2a8>)
 8001750:	2204      	movs	r2, #4
 8001752:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(ORANGE_LED_PORT, ORANGE_LED_PIN);												//
 8001754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001758:	4867      	ldr	r0, [pc, #412]	@ (80018f8 <led_task+0x2c0>)
 800175a:	f003 fb50 	bl	8004dfe <HAL_GPIO_TogglePin>
 800175e:	e0f1      	b.n	8001944 <led_task+0x30c>
				}																										// N
				else if (!strcmp((char*)msg->payload, "Tgr")) {		// Toggle green LED									// O
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4966      	ldr	r1, [pc, #408]	@ (80018fc <led_task+0x2c4>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd7d 	bl	8000264 <strcmp>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10b      	bne.n	8001788 <led_task+0x150>
					set_led_timer(effectNone);																			// T
 8001770:	2004      	movs	r0, #4
 8001772:	f000 f9c3 	bl	8001afc <set_led_timer>
					curr_led_state = sNone;																				// I
 8001776:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <led_task+0x2a8>)
 8001778:	2204      	movs	r2, #4
 800177a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);													// F
 800177c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001780:	485d      	ldr	r0, [pc, #372]	@ (80018f8 <led_task+0x2c0>)
 8001782:	f003 fb3c 	bl	8004dfe <HAL_GPIO_TogglePin>
 8001786:	e0dd      	b.n	8001944 <led_task+0x30c>
				}																										// I
				else if (!strcmp((char*)msg->payload, "Tbl")) {		// Toggle blue LED									// C
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	495d      	ldr	r1, [pc, #372]	@ (8001900 <led_task+0x2c8>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd69 	bl	8000264 <strcmp>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <led_task+0x178>
					set_led_timer(effectNone);																			// A
 8001798:	2004      	movs	r0, #4
 800179a:	f000 f9af 	bl	8001afc <set_led_timer>
					curr_led_state = sNone;																				// T
 800179e:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <led_task+0x2a8>)
 80017a0:	2204      	movs	r2, #4
 80017a2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);													// I
 80017a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a8:	4853      	ldr	r0, [pc, #332]	@ (80018f8 <led_task+0x2c0>)
 80017aa:	f003 fb28 	bl	8004dfe <HAL_GPIO_TogglePin>
 80017ae:	e0c9      	b.n	8001944 <led_task+0x30c>
				}																										// O
				else if (!strcmp((char*)msg->payload, "Tre")) {		// Toggle red LED									// N
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4954      	ldr	r1, [pc, #336]	@ (8001904 <led_task+0x2cc>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd55 	bl	8000264 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <led_task+0x1a0>
					set_led_timer(effectNone);																			//
 80017c0:	2004      	movs	r0, #4
 80017c2:	f000 f99b 	bl	8001afc <set_led_timer>
					curr_led_state = sNone;																				//
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <led_task+0x2a8>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);														//
 80017cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d0:	4849      	ldr	r0, [pc, #292]	@ (80018f8 <led_task+0x2c0>)
 80017d2:	f003 fb14 	bl	8004dfe <HAL_GPIO_TogglePin>
 80017d6:	e0b5      	b.n	8001944 <led_task+0x30c>
				}																										//
				else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment								//
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	69f8      	ldr	r0, [r7, #28]
 80017e0:	f000 fab2 	bl	8001d48 <parse_freq_string>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d055      	beq.n	8001896 <led_task+0x25e>
					// Check that there is an active effect																//
					if(sNone == curr_led_state) {																		//
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <led_task+0x2a8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d108      	bne.n	8001804 <led_task+0x1cc>
						xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);										//
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <led_task+0x29c>)
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017fc:	4942      	ldr	r1, [pc, #264]	@ (8001908 <led_task+0x2d0>)
 80017fe:	f007 fdcf 	bl	80093a0 <xQueueGenericSend>
 8001802:	e09f      	b.n	8001944 <led_task+0x30c>
					}																									//
					// Check that frequency is between 1 and 10 Hz														//
					else if(freq > 10) {																				//
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b0a      	cmp	r3, #10
 8001808:	dd08      	ble.n	800181c <led_task+0x1e4>
						xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);												//
 800180a:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <led_task+0x29c>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001814:	493d      	ldr	r1, [pc, #244]	@ (800190c <led_task+0x2d4>)
 8001816:	f007 fdc3 	bl	80093a0 <xQueueGenericSend>
 800181a:	e093      	b.n	8001944 <led_task+0x30c>
					}																									//
					// Change timer frequency																			//
					else {																								//
						period = (1.0 / freq) * 1000;																	//
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fed8 	bl	80005d4 <__aeabi_i2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	4938      	ldr	r1, [pc, #224]	@ (8001910 <led_task+0x2d8>)
 800182e:	f7ff f865 	bl	80008fc <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <led_task+0x2dc>)
 8001840:	f7fe ff32 	bl	80006a8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f9dc 	bl	8000c08 <__aeabi_d2iz>
 8001850:	4603      	mov	r3, r0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
						if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {	//
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <led_task+0x2a8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <led_task+0x2e0>)
 800185c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	4a2c      	ldr	r2, [pc, #176]	@ (800191c <led_task+0x2e4>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	099a      	lsrs	r2, r3, #6
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	2104      	movs	r1, #4
 800187a:	f00a f839 	bl	800b8f0 <xTimerGenericCommand>
 800187e:	4603      	mov	r3, r0
 8001880:	2b01      	cmp	r3, #1
 8001882:	d05f      	beq.n	8001944 <led_task+0x30c>
							// If frequency update was not successful, notify the user									//
							xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);											//
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <led_task+0x29c>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188e:	4924      	ldr	r1, [pc, #144]	@ (8001920 <led_task+0x2e8>)
 8001890:	f007 fd86 	bl	80093a0 <xQueueGenericSend>
 8001894:	e056      	b.n	8001944 <led_task+0x30c>
						}																								//
					}																									//
				}																										//
				else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu								//
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4922      	ldr	r1, [pc, #136]	@ (8001924 <led_task+0x2ec>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fce2 	bl	8000264 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <led_task+0x288>
					// Update the system state																			//
					curr_sys_state = sMainMenu;																			//
 80018a6:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <led_task+0x2f0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
																														//
					// Notify the main menu task																		//
					xTaskNotify(handle_main_menu_task, 0, eNoAction);													//
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <led_task+0x2f4>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	f009 fcff 	bl	800b2bc <xTaskGenericNotify>
 80018be:	e041      	b.n	8001944 <led_task+0x30c>
				}																										//
				else												// Invalid response									//
					xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);													//
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <led_task+0x29c>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018ca:	4919      	ldr	r1, [pc, #100]	@ (8001930 <led_task+0x2f8>)
 80018cc:	f007 fd68 	bl	80093a0 <xQueueGenericSend>
 80018d0:	e038      	b.n	8001944 <led_task+0x30c>
 80018d2:	bf00      	nop
 80018d4:	20001768 	.word	0x20001768
 80018d8:	2000001c 	.word	0x2000001c
 80018dc:	08011eb4 	.word	0x08011eb4
 80018e0:	20000020 	.word	0x20000020
 80018e4:	08011ebc 	.word	0x08011ebc
 80018e8:	08011ec0 	.word	0x08011ec0
 80018ec:	08011ec4 	.word	0x08011ec4
 80018f0:	08011ec8 	.word	0x08011ec8
 80018f4:	08011ecc 	.word	0x08011ecc
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	08011ed0 	.word	0x08011ed0
 8001900:	08011ed4 	.word	0x08011ed4
 8001904:	08011ed8 	.word	0x08011ed8
 8001908:	20000010 	.word	0x20000010
 800190c:	20000018 	.word	0x20000018
 8001910:	3ff00000 	.word	0x3ff00000
 8001914:	408f4000 	.word	0x408f4000
 8001918:	20001770 	.word	0x20001770
 800191c:	10624dd3 	.word	0x10624dd3
 8001920:	20000014 	.word	0x20000014
 8001924:	08011edc 	.word	0x08011edc
 8001928:	20001791 	.word	0x20001791
 800192c:	2000174c 	.word	0x2000174c
 8001930:	2000000c 	.word	0x2000000c
			}																											//
			else {																										//
				// If user input is longer than 4 characters, notify user of invalid response							//
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);														//
 8001934:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab4 <led_task+0x47c>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800193e:	495e      	ldr	r1, [pc, #376]	@ (8001ab8 <led_task+0x480>)
 8001940:	f007 fd2e 	bl	80093a0 <xQueueGenericSend>
			}																											//
																														//
			// Notify self / led task if not returning to the main menu													//
			if (sLedMenu == curr_sys_state)																				//
 8001944:	4b5d      	ldr	r3, [pc, #372]	@ (8001abc <led_task+0x484>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <led_task+0x326>
				xTaskNotify(handle_led_task, 0, eNoAction);																//
 800194c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac0 <led_task+0x488>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	f009 fcaf 	bl	800b2bc <xTaskGenericNotify>
		}	// ===========================================================================================================
		// If timeout, check for any LED event group bits set ------------------------------------------------------------
		eventBits =  xEventGroupWaitBits(																				//
 800195e:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <led_task+0x48c>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	2201      	movs	r2, #1
 800196a:	210f      	movs	r1, #15
 800196c:	f007 f9ee 	bl	8008d4c <xEventGroupWaitBits>
 8001970:	61b8      	str	r0, [r7, #24]
		             ACCEL_READ_X_BIT | ACCEL_READ_Y_BIT | ACCEL_READ_Z_BIT | TURN_OFF_LEDS_BIT,						//
		             pdTRUE,  // Clear bits on exit																		//
		             pdFALSE, // Wait for any bit to be set																//
		             0);      // Do not block																			//
																														//
		if ((eventBits & ACCEL_READ_X_BIT) && (eventBits & ACCEL_READ_Y_BIT) && (eventBits & ACCEL_READ_Z_BIT)) {		//
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d022      	beq.n	80019c2 <led_task+0x38a>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01d      	beq.n	80019c2 <led_task+0x38a>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d018      	beq.n	80019c2 <led_task+0x38a>
			// Light all LED for x-, y-, and z-axis success																//
			set_led_timer(effectNone);																					//
 8001990:	2004      	movs	r0, #4
 8001992:	f000 f8b3 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						//
 8001996:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <led_task+0x490>)
 8001998:	2204      	movs	r2, #4
 800199a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019a2:	484a      	ldr	r0, [pc, #296]	@ (8001acc <led_task+0x494>)
 80019a4:	f003 fa12 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ae:	4847      	ldr	r0, [pc, #284]	@ (8001acc <led_task+0x494>)
 80019b0:	f003 fa0c 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ba:	4844      	ldr	r0, [pc, #272]	@ (8001acc <led_task+0x494>)
 80019bc:	f003 fa06 	bl	8004dcc <HAL_GPIO_WritePin>
 80019c0:	e04c      	b.n	8001a5c <led_task+0x424>
		}																												//
		else if (eventBits & TURN_OFF_LEDS_BIT) {																		// E
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <led_task+0x3a8>
			// Turn off all LEDs																						// V
			set_led_timer(effectNone);																					// E
 80019cc:	2004      	movs	r0, #4
 80019ce:	f000 f895 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						// N
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <led_task+0x490>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// T
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f8c1 	bl	8001b60 <control_all_leds>
 80019de:	e03d      	b.n	8001a5c <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_X_BIT) {																		// G
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00f      	beq.n	8001a0a <led_task+0x3d2>
			// Light orange LED for x-axis success																		// R
			set_led_timer(effectNone);																					// O
 80019ea:	2004      	movs	r0, #4
 80019ec:	f000 f886 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						// U
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <led_task+0x490>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f8b2 	bl	8001b60 <control_all_leds>
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a02:	4832      	ldr	r0, [pc, #200]	@ (8001acc <led_task+0x494>)
 8001a04:	f003 f9e2 	bl	8004dcc <HAL_GPIO_WritePin>
 8001a08:	e028      	b.n	8001a5c <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Y_BIT) {																		//
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00f      	beq.n	8001a34 <led_task+0x3fc>
			// Light blue LED for y-axis success																		//
			set_led_timer(effectNone);																					//
 8001a14:	2004      	movs	r0, #4
 8001a16:	f000 f871 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						//
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <led_task+0x490>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f89d 	bl	8001b60 <control_all_leds>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a2c:	4827      	ldr	r0, [pc, #156]	@ (8001acc <led_task+0x494>)
 8001a2e:	f003 f9cd 	bl	8004dcc <HAL_GPIO_WritePin>
 8001a32:	e013      	b.n	8001a5c <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Z_BIT) {																		//
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00e      	beq.n	8001a5c <led_task+0x424>
			// Light green LED for z-axis success																		//
			set_led_timer(effectNone);																					//
 8001a3e:	2004      	movs	r0, #4
 8001a40:	f000 f85c 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						//
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <led_task+0x490>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f888 	bl	8001b60 <control_all_leds>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a56:	481d      	ldr	r0, [pc, #116]	@ (8001acc <led_task+0x494>)
 8001a58:	f003 f9b8 	bl	8004dcc <HAL_GPIO_WritePin>
		}	// -----------------------------------------------------------------------------------------------------------
		// ===============================================================================================================
		// Check if rtcSemaphore is available																			//
		if (xSemaphoreTake(rtcSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {											// S
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <led_task+0x498>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	210a      	movs	r1, #10
 8001a62:	4618      	mov	r0, r3
 8001a64:	f007 ff9c 	bl	80099a0 <xQueueSemaphoreTake>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10e      	bne.n	8001a8c <led_task+0x454>
			// Light red LED to indicate successful RTC configuration													// E
			set_led_timer(effectNone);																					// M
 8001a6e:	2004      	movs	r0, #4
 8001a70:	f000 f844 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						// A
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <led_task+0x490>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f870 	bl	8001b60 <control_all_leds>
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET);															// H
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a86:	4811      	ldr	r0, [pc, #68]	@ (8001acc <led_task+0x494>)
 8001a88:	f003 f9a0 	bl	8004dcc <HAL_GPIO_WritePin>
		} 																												// O
		if (xSemaphoreTake(ledOffSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {										// R
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <led_task+0x49c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	210a      	movs	r1, #10
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 ff84 	bl	80099a0 <xQueueSemaphoreTake>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	f47f add7 	bne.w	800164e <led_task+0x16>
			// Turn off all LEDs																						// E
			set_led_timer(effectNone);																					// S
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	f000 f82b 	bl	8001afc <set_led_timer>
			curr_led_state = sNone;																						//
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <led_task+0x490>)
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 f857 	bl	8001b60 <control_all_leds>
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 8001ab2:	e5cc      	b.n	800164e <led_task+0x16>
 8001ab4:	20001768 	.word	0x20001768
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	20001791 	.word	0x20001791
 8001ac0:	20001758 	.word	0x20001758
 8001ac4:	20001784 	.word	0x20001784
 8001ac8:	20000020 	.word	0x20000020
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	20001788 	.word	0x20001788
 8001ad4:	2000178c 	.word	0x2000178c

08001ad8 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f00a f9ef 	bl	800bec4 <pvTimerGetTimerID>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f000 f8c4 	bl	8001c7c <execute_led_effect>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e00e      	b.n	8001b2a <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8001b0c:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <set_led_timer+0x60>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2103      	movs	r1, #3
 8001b20:	f009 fee6 	bl	800b8f0 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	dded      	ble.n	8001b0c <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00e      	beq.n	8001b54 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <set_led_timer+0x60>)
 8001b3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b3e:	f008 fd69 	bl	800a614 <xTaskGetTickCount>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f009 fece 	bl	800b8f0 <xTimerGenericCommand>
	}
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	20001770 	.word	0x20001770

08001b60 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b72:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <control_all_leds+0x50>)
 8001b74:	f003 f92a 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b82:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <control_all_leds+0x50>)
 8001b84:	f003 f922 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b92:	4807      	ldr	r0, [pc, #28]	@ (8001bb0 <control_all_leds+0x50>)
 8001b94:	f003 f91a 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ba2:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <control_all_leds+0x50>)
 8001ba4:	f003 f912 	bl	8004dcc <HAL_GPIO_WritePin>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020c00 	.word	0x40020c00

08001bb4 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc8:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <control_led_group+0x78>)
 8001bca:	f003 f8ff 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd4:	4815      	ldr	r0, [pc, #84]	@ (8001c2c <control_led_group+0x78>)
 8001bd6:	f003 f8f9 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <control_led_group+0x78>)
 8001be2:	f003 f8f3 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bec:	480f      	ldr	r0, [pc, #60]	@ (8001c2c <control_led_group+0x78>)
 8001bee:	f003 f8ed 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001bf2:	e017      	b.n	8001c24 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bfa:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <control_led_group+0x78>)
 8001bfc:	f003 f8e6 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c06:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <control_led_group+0x78>)
 8001c08:	f003 f8e0 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c12:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <control_led_group+0x78>)
 8001c14:	f003 f8da 	bl	8004dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c1e:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <control_led_group+0x78>)
 8001c20:	f003 f8d4 	bl	8004dcc <HAL_GPIO_WritePin>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020c00 	.word	0x40020c00

08001c30 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e014      	b.n	8001c68 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 8001c3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	fa42 f303 	asr.w	r3, r2, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <control_single_led+0x48>)
 8001c5e:	f003 f8b5 	bl	8004dcc <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dde7      	ble.n	8001c3e <control_single_led+0xe>
	}
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40020c00 	.word	0x40020c00

08001c7c <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d854      	bhi.n	8001d34 <execute_led_effect+0xb8>
 8001c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <execute_led_effect+0x14>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001cc5 	.word	0x08001cc5
 8001c98:	08001ce9 	.word	0x08001ce9
 8001c9c:	08001d0f 	.word	0x08001d0f
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <execute_led_effect+0xc4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <execute_led_effect+0xc4>)
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <execute_led_effect+0xc4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <execute_led_effect+0x40>
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff ff53 	bl	8001b60 <control_all_leds>
			break;
 8001cba:	e03c      	b.n	8001d36 <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff ff4f 	bl	8001b60 <control_all_leds>
			break;
 8001cc2:	e038      	b.n	8001d36 <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <execute_led_effect+0xc4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <execute_led_effect+0xc4>)
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <execute_led_effect+0xc4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <execute_led_effect+0x64>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff6b 	bl	8001bb4 <control_led_group>
			break;
 8001cde:	e02a      	b.n	8001d36 <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff ff67 	bl	8001bb4 <control_led_group>
			break;
 8001ce6:	e026      	b.n	8001d36 <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <execute_led_effect+0xc8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	4915      	ldr	r1, [pc, #84]	@ (8001d44 <execute_led_effect+0xc8>)
 8001cf0:	600a      	str	r2, [r1, #0]
 8001cf2:	425a      	negs	r2, r3
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	bf58      	it	pl
 8001cfe:	4253      	negpl	r3, r2
 8001d00:	2201      	movs	r2, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff92 	bl	8001c30 <control_single_led>
			break;
 8001d0c:	e013      	b.n	8001d36 <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <execute_led_effect+0xc8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	490b      	ldr	r1, [pc, #44]	@ (8001d44 <execute_led_effect+0xc8>)
 8001d16:	600a      	str	r2, [r1, #0]
 8001d18:	425a      	negs	r2, r3
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	bf58      	it	pl
 8001d24:	4253      	negpl	r3, r2
 8001d26:	2208      	movs	r2, #8
 8001d28:	fa42 f303 	asr.w	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff7f 	bl	8001c30 <control_single_led>
			break;
 8001d32:	e000      	b.n	8001d36 <execute_led_effect+0xba>
		default:
			break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000024 	.word	0x20000024
 8001d44:	20000324 	.word	0x20000324

08001d48 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fa8f 	bl	8000278 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	dd02      	ble.n	8001d6a <parse_freq_string+0x22>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	dd01      	ble.n	8001d6e <parse_freq_string+0x26>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e025      	b.n	8001dba <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b46      	cmp	r3, #70	@ 0x46
 8001d74:	d001      	beq.n	8001d7a <parse_freq_string+0x32>
 8001d76:	2300      	movs	r3, #0
 8001d78:	e01f      	b.n	8001dba <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e010      	b.n	8001da2 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <parse_freq_string+0x7c>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <parse_freq_string+0x54>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e00e      	b.n	8001dba <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbea      	blt.n	8001d80 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f80b 	bl	8001dc8 <freq_str_to_int>
 8001db2:	4602      	mov	r2, r0
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	601a      	str	r2, [r3, #0]
    return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08012b00 	.word	0x08012b00

08001dc8 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	e00f      	b.n	8001dfc <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4619      	mov	r1, r3
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b30      	subs	r3, #48	@ 0x30
 8001df2:	440b      	add	r3, r1
 8001df4:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbeb      	blt.n	8001ddc <freq_str_to_int+0x14>
	}

	return ret;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <motor_task>:
 * @note The print queue (`q_print`) and other required queues must be initialized.				 	   *
 * @note The task must be notified when a new command is available.									   *
 ******************************************************************************************************/

void motor_task(void *param)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f009 f9bd 	bl	800b1a8 <xTaskGenericNotifyWait>

		switch(curr_sys_state) {
 8001e2e:	4bac      	ldr	r3, [pc, #688]	@ (80020e0 <motor_task+0x2cc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	f000 8184 	beq.w	8002140 <motor_task+0x32c>
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	f300 81ef 	bgt.w	800221c <motor_task+0x408>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <motor_task+0x36>
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	f000 80f5 	beq.w	8002032 <motor_task+0x21e>
				curr_sys_state = sMotorMenu;
				// Send control back to motor task main menu
				xTaskNotify(handle_motor_task, 0, eNoAction);
				break;
			default:
				break;
 8001e48:	e1e8      	b.n	800221c <motor_task+0x408>
				xQueueSend(q_print, &msg_motor_menu, portMAX_DELAY);
 8001e4a:	4ba6      	ldr	r3, [pc, #664]	@ (80020e4 <motor_task+0x2d0>)
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e54:	49a4      	ldr	r1, [pc, #656]	@ (80020e8 <motor_task+0x2d4>)
 8001e56:	f007 faa3 	bl	80093a0 <xQueueGenericSend>
				xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f009 f99d 	bl	800b1a8 <xTaskGenericNotifyWait>
				msg = (message_t*)msg_addr;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	60fb      	str	r3, [r7, #12]
				if(msg->len <= 5) {
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	f200 8096 	bhi.w	8001fa8 <motor_task+0x194>
					if(!strcmp((char*)msg->payload, "Start")) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	499b      	ldr	r1, [pc, #620]	@ (80020ec <motor_task+0x2d8>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe f9ef 	bl	8000264 <strcmp>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10f      	bne.n	8001eac <motor_task+0x98>
						curr_motor_state = MOTOR_ACTIVE;
 8001e8c:	4b98      	ldr	r3, [pc, #608]	@ (80020f0 <motor_task+0x2dc>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e98:	4896      	ldr	r0, [pc, #600]	@ (80020f4 <motor_task+0x2e0>)
 8001e9a:	f002 ff97 	bl	8004dcc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ea4:	4893      	ldr	r0, [pc, #588]	@ (80020f4 <motor_task+0x2e0>)
 8001ea6:	f002 ff91 	bl	8004dcc <HAL_GPIO_WritePin>
 8001eaa:	e085      	b.n	8001fb8 <motor_task+0x1a4>
					else if(!strcmp((char*)msg->payload, "Stop")) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4992      	ldr	r1, [pc, #584]	@ (80020f8 <motor_task+0x2e4>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe f9d7 	bl	8000264 <strcmp>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <motor_task+0xbc>
						curr_motor_state = MOTOR_INACTIVE;
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80020f0 <motor_task+0x2dc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001ec8:	488a      	ldr	r0, [pc, #552]	@ (80020f4 <motor_task+0x2e0>)
 8001eca:	f002 ff7f 	bl	8004dcc <HAL_GPIO_WritePin>
 8001ece:	e073      	b.n	8001fb8 <motor_task+0x1a4>
					else if(!strcmp((char*)msg->payload, "Algo")) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	498a      	ldr	r1, [pc, #552]	@ (80020fc <motor_task+0x2e8>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe f9c5 	bl	8000264 <strcmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <motor_task+0xe4>
						curr_sys_state = sMotorAlgo;
 8001ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80020e0 <motor_task+0x2cc>)
 8001ee2:	2205      	movs	r2, #5
 8001ee4:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_motor_algo, portMAX_DELAY);
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80020e4 <motor_task+0x2d0>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef0:	4983      	ldr	r1, [pc, #524]	@ (8002100 <motor_task+0x2ec>)
 8001ef2:	f007 fa55 	bl	80093a0 <xQueueGenericSend>
 8001ef6:	e05f      	b.n	8001fb8 <motor_task+0x1a4>
					else if(!strcmp((char*)msg->payload, "Rec")) {
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4982      	ldr	r1, [pc, #520]	@ (8002104 <motor_task+0x2f0>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f9b1 	bl	8000264 <strcmp>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11d      	bne.n	8001f44 <motor_task+0x130>
						curr_motor_state = MOTOR_SPEED_REPORTING;
 8001f08:	4b79      	ldr	r3, [pc, #484]	@ (80020f0 <motor_task+0x2dc>)
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
						print_motor_on_report();
 8001f0e:	f000 fafb 	bl	8002508 <print_motor_on_report>
						xQueueSend(q_print, &msg_speed_report, portMAX_DELAY);
 8001f12:	4b74      	ldr	r3, [pc, #464]	@ (80020e4 <motor_task+0x2d0>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f1c:	497a      	ldr	r1, [pc, #488]	@ (8002108 <motor_task+0x2f4>)
 8001f1e:	f007 fa3f 	bl	80093a0 <xQueueGenericSend>
						report_counter = 1;
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <motor_task+0x2f8>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
						xTimerStart(motor_report_timer, portMAX_DELAY);
 8001f28:	4b79      	ldr	r3, [pc, #484]	@ (8002110 <motor_task+0x2fc>)
 8001f2a:	681c      	ldr	r4, [r3, #0]
 8001f2c:	f008 fb72 	bl	800a614 <xTaskGetTickCount>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f009 fcd7 	bl	800b8f0 <xTimerGenericCommand>
 8001f42:	e039      	b.n	8001fb8 <motor_task+0x1a4>
					else if(!strcmp((char*)msg->payload, "Speed")) {
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4973      	ldr	r1, [pc, #460]	@ (8002114 <motor_task+0x300>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe f98b 	bl	8000264 <strcmp>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <motor_task+0x158>
						curr_sys_state = sMotorSpeed;
 8001f54:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <motor_task+0x2cc>)
 8001f56:	2206      	movs	r2, #6
 8001f58:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_motor_speed, portMAX_DELAY);
 8001f5a:	4b62      	ldr	r3, [pc, #392]	@ (80020e4 <motor_task+0x2d0>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f64:	496c      	ldr	r1, [pc, #432]	@ (8002118 <motor_task+0x304>)
 8001f66:	f007 fa1b 	bl	80093a0 <xQueueGenericSend>
 8001f6a:	e025      	b.n	8001fb8 <motor_task+0x1a4>
					else if (!strcmp((char*)msg->payload, "Main")) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	496b      	ldr	r1, [pc, #428]	@ (800211c <motor_task+0x308>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f977 	bl	8000264 <strcmp>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <motor_task+0x182>
						curr_sys_state = sMainMenu;
 8001f7c:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <motor_task+0x2cc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
						xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001f82:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <motor_task+0x30c>)
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f009 f994 	bl	800b2bc <xTaskGenericNotify>
 8001f94:	e010      	b.n	8001fb8 <motor_task+0x1a4>
						xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <motor_task+0x2d0>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa0:	4960      	ldr	r1, [pc, #384]	@ (8002124 <motor_task+0x310>)
 8001fa2:	f007 f9fd 	bl	80093a0 <xQueueGenericSend>
 8001fa6:	e007      	b.n	8001fb8 <motor_task+0x1a4>
					xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80020e4 <motor_task+0x2d0>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	2300      	movs	r3, #0
 8001fae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fb2:	495c      	ldr	r1, [pc, #368]	@ (8002124 <motor_task+0x310>)
 8001fb4:	f007 f9f4 	bl	80093a0 <xQueueGenericSend>
				if (sMotorMenu == curr_sys_state) {
 8001fb8:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <motor_task+0x2cc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d125      	bne.n	800200c <motor_task+0x1f8>
					if(MOTOR_SPEED_REPORTING == curr_motor_state) {
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <motor_task+0x2dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d117      	bne.n	8001ff8 <motor_task+0x1e4>
						xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f009 f8e6 	bl	800b1a8 <xTaskGenericNotifyWait>
						xTimerStop(motor_report_timer, portMAX_DELAY);
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002110 <motor_task+0x2fc>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2103      	movs	r1, #3
 8001fec:	f009 fc80 	bl	800b8f0 <xTimerGenericCommand>
						print_summary_report();
 8001ff0:	f000 fb16 	bl	8002620 <print_summary_report>
						initialize_parameters();
 8001ff4:	f000 fa5e 	bl	80024b4 <initialize_parameters>
					xTaskNotify(handle_motor_task, 0, eNoAction);
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8002128 <motor_task+0x314>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2300      	movs	r3, #0
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	f009 f959 	bl	800b2bc <xTaskGenericNotify>
				break;
 800200a:	e109      	b.n	8002220 <motor_task+0x40c>
				else if (sMotorAlgo == curr_sys_state || sMotorSpeed == curr_sys_state) {
 800200c:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <motor_task+0x2cc>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d004      	beq.n	800201e <motor_task+0x20a>
 8002014:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <motor_task+0x2cc>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b06      	cmp	r3, #6
 800201a:	f040 8101 	bne.w	8002220 <motor_task+0x40c>
					xTaskNotify(handle_motor_task, 0, eNoAction);
 800201e:	4b42      	ldr	r3, [pc, #264]	@ (8002128 <motor_task+0x314>)
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2300      	movs	r3, #0
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	f009 f946 	bl	800b2bc <xTaskGenericNotify>
				break;
 8002030:	e0f6      	b.n	8002220 <motor_task+0x40c>
				xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2000      	movs	r0, #0
 8002042:	f009 f8b1 	bl	800b1a8 <xTaskGenericNotifyWait>
				msg = (message_t*)msg_addr;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	60fb      	str	r3, [r7, #12]
				if(msg->len <= 1) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d830      	bhi.n	80020b4 <motor_task+0x2a0>
					if(!strcmp((char*)msg->payload, "0")) { 					// None
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4935      	ldr	r1, [pc, #212]	@ (800212c <motor_task+0x318>)
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe f904 	bl	8000264 <strcmp>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <motor_task+0x266>
						motor_algo = 0;
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <motor_task+0x31c>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_valid_algo, portMAX_DELAY);
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <motor_task+0x2d0>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	2300      	movs	r3, #0
 800206e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002072:	4930      	ldr	r1, [pc, #192]	@ (8002134 <motor_task+0x320>)
 8002074:	f007 f994 	bl	80093a0 <xQueueGenericSend>
 8002078:	e024      	b.n	80020c4 <motor_task+0x2b0>
					else if(!strcmp((char*)msg->payload, "1")) { 				// PID control
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	492e      	ldr	r1, [pc, #184]	@ (8002138 <motor_task+0x324>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f8f0 	bl	8000264 <strcmp>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <motor_task+0x28e>
						motor_algo = 1;
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <motor_task+0x31c>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_valid_algo, portMAX_DELAY);
 8002090:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <motor_task+0x2d0>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800209a:	4926      	ldr	r1, [pc, #152]	@ (8002134 <motor_task+0x320>)
 800209c:	f007 f980 	bl	80093a0 <xQueueGenericSend>
 80020a0:	e010      	b.n	80020c4 <motor_task+0x2b0>
						xQueueSend(q_print, &msg_inv_algo, portMAX_DELAY);
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <motor_task+0x2d0>)
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020ac:	4923      	ldr	r1, [pc, #140]	@ (800213c <motor_task+0x328>)
 80020ae:	f007 f977 	bl	80093a0 <xQueueGenericSend>
 80020b2:	e007      	b.n	80020c4 <motor_task+0x2b0>
					xQueueSend(q_print, &msg_inv_algo, portMAX_DELAY);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <motor_task+0x2d0>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020be:	491f      	ldr	r1, [pc, #124]	@ (800213c <motor_task+0x328>)
 80020c0:	f007 f96e 	bl	80093a0 <xQueueGenericSend>
				curr_sys_state = sMotorMenu;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <motor_task+0x2cc>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_motor_task, 0, eNoAction);
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <motor_task+0x314>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	f009 f8f0 	bl	800b2bc <xTaskGenericNotify>
				break;
 80020dc:	e0a1      	b.n	8002222 <motor_task+0x40e>
 80020de:	bf00      	nop
 80020e0:	20001791 	.word	0x20001791
 80020e4:	20001768 	.word	0x20001768
 80020e8:	20000030 	.word	0x20000030
 80020ec:	080122fc 	.word	0x080122fc
 80020f0:	20000334 	.word	0x20000334
 80020f4:	40020800 	.word	0x40020800
 80020f8:	08012304 	.word	0x08012304
 80020fc:	0801230c 	.word	0x0801230c
 8002100:	20000034 	.word	0x20000034
 8002104:	08012314 	.word	0x08012314
 8002108:	2000002c 	.word	0x2000002c
 800210c:	20000338 	.word	0x20000338
 8002110:	20001780 	.word	0x20001780
 8002114:	08012318 	.word	0x08012318
 8002118:	20000040 	.word	0x20000040
 800211c:	08012320 	.word	0x08012320
 8002120:	2000174c 	.word	0x2000174c
 8002124:	20000028 	.word	0x20000028
 8002128:	20001764 	.word	0x20001764
 800212c:	08012328 	.word	0x08012328
 8002130:	20000074 	.word	0x20000074
 8002134:	20000038 	.word	0x20000038
 8002138:	0801232c 	.word	0x0801232c
 800213c:	2000003c 	.word	0x2000003c
				xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f009 f82a 	bl	800b1a8 <xTaskGenericNotifyWait>
				msg = (message_t*)msg_addr;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60fb      	str	r3, [r7, #12]
				if(msg->len <= 6) {
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b06      	cmp	r3, #6
 800215e:	d848      	bhi.n	80021f2 <motor_task+0x3de>
					if(isNumeric((char*)msg->payload)) {
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fc7e 	bl	8002a64 <isNumeric>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d038      	beq.n	80021e0 <motor_task+0x3cc>
						target_speed = strtof((char*)msg->payload, NULL);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f00d f908 	bl	800f388 <strtof>
 8002178:	eef0 7a40 	vmov.f32	s15, s0
 800217c:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <motor_task+0x410>)
 800217e:	edc3 7a00 	vstr	s15, [r3]
						if(target_speed > MAX_MOTOR_SPEED) {
 8002182:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <motor_task+0x410>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002228 <motor_task+0x414>
 800218c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dd1b      	ble.n	80021ce <motor_task+0x3ba>
							target_speed = MAX_MOTOR_SPEED;
 8002196:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <motor_task+0x410>)
 8002198:	4a24      	ldr	r2, [pc, #144]	@ (800222c <motor_task+0x418>)
 800219a:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_motor_speed_max, portMAX_DELAY);
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <motor_task+0x41c>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	2300      	movs	r3, #0
 80021a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021a6:	4923      	ldr	r1, [pc, #140]	@ (8002234 <motor_task+0x420>)
 80021a8:	f007 f8fa 	bl	80093a0 <xQueueGenericSend>
							sprintf((char*)max_speed, " Motor speed set to: %03d RPM\n", (int)MAX_MOTOR_SPEED);
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <motor_task+0x424>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f240 1213 	movw	r2, #275	@ 0x113
 80021b4:	4921      	ldr	r1, [pc, #132]	@ (800223c <motor_task+0x428>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00d fa0c 	bl	800f5d4 <siprintf>
							xQueueSend(q_print, &max_speed, portMAX_DELAY);
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <motor_task+0x41c>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021c6:	491c      	ldr	r1, [pc, #112]	@ (8002238 <motor_task+0x424>)
 80021c8:	f007 f8ea 	bl	80093a0 <xQueueGenericSend>
 80021cc:	e019      	b.n	8002202 <motor_task+0x3ee>
							xQueueSend(q_print, &msg_valid_speed, portMAX_DELAY);
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <motor_task+0x41c>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	2300      	movs	r3, #0
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021d8:	4919      	ldr	r1, [pc, #100]	@ (8002240 <motor_task+0x42c>)
 80021da:	f007 f8e1 	bl	80093a0 <xQueueGenericSend>
 80021de:	e010      	b.n	8002202 <motor_task+0x3ee>
						xQueueSend(q_print, &msg_inv_speed, portMAX_DELAY);
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <motor_task+0x41c>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021ea:	4916      	ldr	r1, [pc, #88]	@ (8002244 <motor_task+0x430>)
 80021ec:	f007 f8d8 	bl	80093a0 <xQueueGenericSend>
 80021f0:	e007      	b.n	8002202 <motor_task+0x3ee>
					xQueueSend(q_print, &msg_inv_speed, portMAX_DELAY);
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <motor_task+0x41c>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021fc:	4911      	ldr	r1, [pc, #68]	@ (8002244 <motor_task+0x430>)
 80021fe:	f007 f8cf 	bl	80093a0 <xQueueGenericSend>
				curr_sys_state = sMotorMenu;
 8002202:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <motor_task+0x434>)
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_motor_task, 0, eNoAction);
 8002208:	4b10      	ldr	r3, [pc, #64]	@ (800224c <motor_task+0x438>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	f009 f851 	bl	800b2bc <xTaskGenericNotify>
				break;
 800221a:	e002      	b.n	8002222 <motor_task+0x40e>
				break;
 800221c:	bf00      	nop
 800221e:	e5fd      	b.n	8001e1c <motor_task+0x8>
				break;
 8002220:	bf00      	nop
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002222:	e5fb      	b.n	8001e1c <motor_task+0x8>
 8002224:	2000006c 	.word	0x2000006c
 8002228:	43898000 	.word	0x43898000
 800222c:	43898000 	.word	0x43898000
 8002230:	20001768 	.word	0x20001768
 8002234:	20000044 	.word	0x20000044
 8002238:	20000078 	.word	0x20000078
 800223c:	08012330 	.word	0x08012330
 8002240:	20000048 	.word	0x20000048
 8002244:	2000004c 	.word	0x2000004c
 8002248:	20001791 	.word	0x20001791
 800224c:	20001764 	.word	0x20001764

08002250 <motor_gpio_callback>:
		}
	}
}

void motor_gpio_callback(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
    uint8_t a = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_GPIO_Pin);
 800225a:	2110      	movs	r1, #16
 800225c:	4822      	ldr	r0, [pc, #136]	@ (80022e8 <motor_gpio_callback+0x98>)
 800225e:	f002 fd9d 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
    uint8_t b = HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_GPIO_Pin);
 8002266:	2140      	movs	r1, #64	@ 0x40
 8002268:	481f      	ldr	r0, [pc, #124]	@ (80022e8 <motor_gpio_callback+0x98>)
 800226a:	f002 fd97 	bl	8004d9c <HAL_GPIO_ReadPin>
 800226e:	4603      	mov	r3, r0
 8002270:	73bb      	strb	r3, [r7, #14]

    if (GPIO_Pin == ENCODER_A_GPIO_Pin) {
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b10      	cmp	r3, #16
 8002276:	d118      	bne.n	80022aa <motor_gpio_callback+0x5a>
        if (a != last_a) {
 8002278:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <motor_gpio_callback+0x9c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	429a      	cmp	r2, r3
 8002282:	d02d      	beq.n	80022e0 <motor_gpio_callback+0x90>
            if (a == b) {
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	7bbb      	ldrb	r3, [r7, #14]
 8002288:	429a      	cmp	r2, r3
 800228a:	d105      	bne.n	8002298 <motor_gpio_callback+0x48>
                encoder_count++;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <motor_gpio_callback+0xa0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <motor_gpio_callback+0xa0>)
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e004      	b.n	80022a2 <motor_gpio_callback+0x52>
            } else {
                encoder_count--;
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <motor_gpio_callback+0xa0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <motor_gpio_callback+0xa0>)
 80022a0:	6013      	str	r3, [r2, #0]
            }
            last_a = a;
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <motor_gpio_callback+0x9c>)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	7013      	strb	r3, [r2, #0]
                encoder_count++;
            }
            last_b = b;
        }
    }
}
 80022a8:	e01a      	b.n	80022e0 <motor_gpio_callback+0x90>
    } else if (GPIO_Pin == ENCODER_B_GPIO_Pin) {
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d117      	bne.n	80022e0 <motor_gpio_callback+0x90>
        if (b != last_b) {
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <motor_gpio_callback+0xa4>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	7bba      	ldrb	r2, [r7, #14]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d011      	beq.n	80022e0 <motor_gpio_callback+0x90>
            if (a == b) {
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d105      	bne.n	80022d0 <motor_gpio_callback+0x80>
                encoder_count--;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <motor_gpio_callback+0xa0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <motor_gpio_callback+0xa0>)
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e004      	b.n	80022da <motor_gpio_callback+0x8a>
                encoder_count++;
 80022d0:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <motor_gpio_callback+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <motor_gpio_callback+0xa0>)
 80022d8:	6013      	str	r3, [r2, #0]
            last_b = b;
 80022da:	4a06      	ldr	r2, [pc, #24]	@ (80022f4 <motor_gpio_callback+0xa4>)
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	7013      	strb	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	20000330 	.word	0x20000330
 80022f0:	20000328 	.word	0x20000328
 80022f4:	20000331 	.word	0x20000331

080022f8 <motor_timer_callback>:

void motor_timer_callback(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <motor_timer_callback+0xb8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d148      	bne.n	800239c <motor_timer_callback+0xa4>
		static int32_t last_encoder_count = 0;
		int32_t delta_count = encoder_count - last_encoder_count;
 800230a:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <motor_timer_callback+0xbc>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <motor_timer_callback+0xc0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	60fb      	str	r3, [r7, #12]

		// Calculate motor speed in RPM
		motor_speed = (delta_count / (float)ENCODER_COUNTS_PER_REV) * 6000.0 * (1 / (float)ENCODER_QUADRATURE);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002320:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80023bc <motor_timer_callback+0xc4>
 8002324:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002328:	ee16 0a90 	vmov	r0, s13
 800232c:	f7fe f964 	bl	80005f8 <__aeabi_f2d>
 8002330:	a31d      	add	r3, pc, #116	@ (adr r3, 80023a8 <motor_timer_callback+0xb0>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fe f9b7 	bl	80006a8 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <motor_timer_callback+0xc8>)
 8002348:	f7fe f9ae 	bl	80006a8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fca0 	bl	8000c98 <__aeabi_d2f>
 8002358:	4603      	mov	r3, r0
 800235a:	4a1a      	ldr	r2, [pc, #104]	@ (80023c4 <motor_timer_callback+0xcc>)
 800235c:	6013      	str	r3, [r2, #0]

		// Update last encoder count for the next period
		last_encoder_count = encoder_count;
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <motor_timer_callback+0xbc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a15      	ldr	r2, [pc, #84]	@ (80023b8 <motor_timer_callback+0xc0>)
 8002364:	6013      	str	r3, [r2, #0]

		// PID control
		float new_duty_cycle = pid_controller(target_speed, motor_speed);
 8002366:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <motor_timer_callback+0xd0>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <motor_timer_callback+0xcc>)
 800236e:	ed93 7a00 	vldr	s14, [r3]
 8002372:	eef0 0a47 	vmov.f32	s1, s14
 8002376:	eeb0 0a67 	vmov.f32	s0, s15
 800237a:	f000 fadd 	bl	8002938 <pid_controller>
 800237e:	ed87 0a02 	vstr	s0, [r7, #8]
		set_pwm_duty_cycle(&htim3, TIM_CHANNEL_1, (uint8_t)new_duty_cycle);
 8002382:	edd7 7a02 	vldr	s15, [r7, #8]
 8002386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238a:	edc7 7a00 	vstr	s15, [r7]
 800238e:	783b      	ldrb	r3, [r7, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	2100      	movs	r1, #0
 8002396:	480d      	ldr	r0, [pc, #52]	@ (80023cc <motor_timer_callback+0xd4>)
 8002398:	f000 fa96 	bl	80028c8 <set_pwm_duty_cycle>
	}
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f3af 8000 	nop.w
 80023a8:	00000000 	.word	0x00000000
 80023ac:	40b77000 	.word	0x40b77000
 80023b0:	40001400 	.word	0x40001400
 80023b4:	20000328 	.word	0x20000328
 80023b8:	20001324 	.word	0x20001324
 80023bc:	44f00000 	.word	0x44f00000
 80023c0:	3fe00000 	.word	0x3fe00000
 80023c4:	2000032c 	.word	0x2000032c
 80023c8:	2000006c 	.word	0x2000006c
 80023cc:	20001674 	.word	0x20001674

080023d0 <motor_report_callback>:

// Runs every 10 ms
void motor_report_callback(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
//	static int flag = 0;

	// Check for min speed
	if(motor_speed < min_speed) {
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <motor_report_callback+0x60>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <motor_report_callback+0x64>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d503      	bpl.n	80023f2 <motor_report_callback+0x22>
		min_speed = motor_speed;
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <motor_report_callback+0x60>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <motor_report_callback+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]
	}
	// Check for max speed
	if(motor_speed > max_speed) {
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <motor_report_callback+0x60>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <motor_report_callback+0x68>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd03      	ble.n	8002410 <motor_report_callback+0x40>
		max_speed = motor_speed;
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <motor_report_callback+0x60>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <motor_report_callback+0x68>)
 800240e:	6013      	str	r3, [r2, #0]
	}

	// Update time window, add data to array
	speed_values[duration++] = motor_speed;
 8002410:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <motor_report_callback+0x6c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	4909      	ldr	r1, [pc, #36]	@ (800243c <motor_report_callback+0x6c>)
 8002418:	600a      	str	r2, [r1, #0]
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <motor_report_callback+0x60>)
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <motor_report_callback+0x70>)
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	601a      	str	r2, [r3, #0]

	// Print current speed
	print_motor_speed();
 8002426:	f000 f80d 	bl	8002444 <print_motor_speed>
//		set_pwm_duty_cycle(&htim3, TIM_CHANNEL_1, 30);
//	}
//	else {
//		set_pwm_duty_cycle(&htim3, TIM_CHANNEL_1, 50);
//	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000032c 	.word	0x2000032c
 8002434:	20000060 	.word	0x20000060
 8002438:	2000033c 	.word	0x2000033c
 800243c:	20000340 	.word	0x20000340
 8002440:	2000034c 	.word	0x2000034c

08002444 <print_motor_speed>:
/****************************************************
 *  Private functions                               *
 ****************************************************/

void print_motor_speed(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
	static char showspeed[40];
	static char *speed = showspeed;

	// Separate float into two integers
	int speed_i = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
	int speed_d = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
	split_float_into_ints(&speed_i, &speed_d, motor_speed);
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <print_motor_speed+0x58>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	463a      	mov	r2, r7
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa02 	bl	800286c <split_float_into_ints>

	// Display speed in RPM
	sprintf((char*)showspeed, " [%03ds] Motor speed: %03d.%02d RPM\n", report_counter++, speed_i, speed_d);
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <print_motor_speed+0x5c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	1c53      	adds	r3, r2, #1
 800246e:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <print_motor_speed+0x5c>)
 8002470:	600b      	str	r3, [r1, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	490a      	ldr	r1, [pc, #40]	@ (80024a4 <print_motor_speed+0x60>)
 800247c:	480a      	ldr	r0, [pc, #40]	@ (80024a8 <print_motor_speed+0x64>)
 800247e:	f00d f8a9 	bl	800f5d4 <siprintf>
	xQueueSend(q_print, &speed, portMAX_DELAY);
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <print_motor_speed+0x68>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800248c:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <print_motor_speed+0x6c>)
 800248e:	f006 ff87 	bl	80093a0 <xQueueGenericSend>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000032c 	.word	0x2000032c
 80024a0:	20000338 	.word	0x20000338
 80024a4:	08012350 	.word	0x08012350
 80024a8:	20001328 	.word	0x20001328
 80024ac:	20001768 	.word	0x20001768
 80024b0:	2000007c 	.word	0x2000007c

080024b4 <initialize_parameters>:
{

}

void initialize_parameters(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	report_counter = 0;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <initialize_parameters+0x38>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
	duration = 0;
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <initialize_parameters+0x3c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
	min_speed = MIN_SPEED_INITIALIZATION;
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <initialize_parameters+0x40>)
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <initialize_parameters+0x44>)
 80024c8:	601a      	str	r2, [r3, #0]
	max_speed = MAX_SPEED_INITIALIZATION;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <initialize_parameters+0x48>)
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
	average = 0;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <initialize_parameters+0x4c>)
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
	standard_dev = 0;
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <initialize_parameters+0x50>)
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	20000338 	.word	0x20000338
 80024f0:	20000340 	.word	0x20000340
 80024f4:	20000060 	.word	0x20000060
 80024f8:	447a0000 	.word	0x447a0000
 80024fc:	2000033c 	.word	0x2000033c
 8002500:	20000344 	.word	0x20000344
 8002504:	20000348 	.word	0x20000348

08002508 <print_motor_on_report>:

void print_motor_on_report(void)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b091      	sub	sp, #68	@ 0x44
 800250c:	af06      	add	r7, sp, #24
	// Send statistics header message
	xQueueSend(q_print, &msg_motor_on_header, portMAX_DELAY);
 800250e:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <print_motor_on_report+0xf0>)
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002518:	4938      	ldr	r1, [pc, #224]	@ (80025fc <print_motor_on_report+0xf4>)
 800251a:	f006 ff41 	bl	80093a0 <xQueueGenericSend>

	// Convert floats into two integer values for display
	int target_speed_i = 0, target_speed_d = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
	int kp_i = 0, kp_d = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
	int ki_i = 0, ki_d = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
	int kd_i = 0, kd_d = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
	split_float_into_ints(&target_speed_i, &target_speed_d, target_speed);
 800253e:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <print_motor_on_report+0xf8>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	f107 0220 	add.w	r2, r7, #32
 8002548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f98a 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&kp_i, &kp_d, Kp);
 8002558:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <print_motor_on_report+0xfc>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	f107 0218 	add.w	r2, r7, #24
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	eeb0 0a67 	vmov.f32	s0, s15
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f97d 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&ki_i, &ki_d, Ki);
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <print_motor_on_report+0x100>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	f107 0210 	add.w	r2, r7, #16
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	eeb0 0a67 	vmov.f32	s0, s15
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f970 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&kd_i, &kd_d, Kd);
 800258c:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <print_motor_on_report+0x104>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	f107 0208 	add.w	r2, r7, #8
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	eeb0 0a67 	vmov.f32	s0, s15
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f963 	bl	800286c <split_float_into_ints>

	// Print results
	static char showparams[250];
	static char *params = showparams;
	sprintf((char*)showparams,   "* Target speed:      %03d.%02d  RPM   *"
 80025a6:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	6938      	ldr	r0, [r7, #16]
 80025b4:	68fc      	ldr	r4, [r7, #12]
 80025b6:	68bd      	ldr	r5, [r7, #8]
 80025b8:	9505      	str	r5, [sp, #20]
 80025ba:	9404      	str	r4, [sp, #16]
 80025bc:	9003      	str	r0, [sp, #12]
 80025be:	9102      	str	r1, [sp, #8]
 80025c0:	9201      	str	r2, [sp, #4]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4632      	mov	r2, r6
 80025c8:	4911      	ldr	r1, [pc, #68]	@ (8002610 <print_motor_on_report+0x108>)
 80025ca:	4812      	ldr	r0, [pc, #72]	@ (8002614 <print_motor_on_report+0x10c>)
 80025cc:	f00d f802 	bl	800f5d4 <siprintf>
							   "\n* Kp:                  %01d.%03d       *"
							   "\n* Ki:                  %01d.%03d       *"
			                   "\n* Kd:                  %01d.%03d       *\n",
							   target_speed_i, target_speed_d, kp_i, kp_d, ki_i, ki_d, kd_i, kd_d);
	xQueueSend(q_print, &params, portMAX_DELAY);
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <print_motor_on_report+0xf0>)
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025da:	490f      	ldr	r1, [pc, #60]	@ (8002618 <print_motor_on_report+0x110>)
 80025dc:	f006 fee0 	bl	80093a0 <xQueueGenericSend>

	// Send statistics footer message
	xQueueSend(q_print, &msg_motor_on_footer, portMAX_DELAY);
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <print_motor_on_report+0xf0>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	2300      	movs	r3, #0
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025ea:	490c      	ldr	r1, [pc, #48]	@ (800261c <print_motor_on_report+0x114>)
 80025ec:	f006 fed8 	bl	80093a0 <xQueueGenericSend>
}
 80025f0:	bf00      	nop
 80025f2:	372c      	adds	r7, #44	@ 0x2c
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f8:	20001768 	.word	0x20001768
 80025fc:	20000058 	.word	0x20000058
 8002600:	2000006c 	.word	0x2000006c
 8002604:	20000064 	.word	0x20000064
 8002608:	200012ec 	.word	0x200012ec
 800260c:	200012f0 	.word	0x200012f0
 8002610:	08012378 	.word	0x08012378
 8002614:	20001350 	.word	0x20001350
 8002618:	20000080 	.word	0x20000080
 800261c:	2000005c 	.word	0x2000005c

08002620 <print_summary_report>:

void print_summary_report(void)
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b093      	sub	sp, #76	@ 0x4c
 8002624:	af08      	add	r7, sp, #32
	// Send statistics header message
	xQueueSend(q_print, &msg_stat_header, portMAX_DELAY);
 8002626:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <print_summary_report+0x110>)
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002630:	4940      	ldr	r1, [pc, #256]	@ (8002734 <print_summary_report+0x114>)
 8002632:	f006 feb5 	bl	80093a0 <xQueueGenericSend>

	// Calculate statistics
	calculate_average(speed_values, duration);
 8002636:	4b40      	ldr	r3, [pc, #256]	@ (8002738 <print_summary_report+0x118>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	483f      	ldr	r0, [pc, #252]	@ (800273c <print_summary_report+0x11c>)
 800263e:	f000 f88f 	bl	8002760 <calculate_average>
	calculate_sd(speed_values, duration);
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <print_summary_report+0x118>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	483c      	ldr	r0, [pc, #240]	@ (800273c <print_summary_report+0x11c>)
 800264a:	f000 f8bb 	bl	80027c4 <calculate_sd>

	// Convert floats into two integer values for display
	int min_speed_i = 0, min_speed_d = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
	int max_speed_i = 0, max_speed_d = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
	int average_i = 0, average_d = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
	int standard_dev_i = 0, standard_dev_d = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
	split_float_into_ints(&min_speed_i, &min_speed_d, min_speed);
 800266e:	4b34      	ldr	r3, [pc, #208]	@ (8002740 <print_summary_report+0x120>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	f107 0220 	add.w	r2, r7, #32
 8002678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267c:	eeb0 0a67 	vmov.f32	s0, s15
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f8f2 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&max_speed_i, &max_speed_d, max_speed);
 8002688:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <print_summary_report+0x124>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	f107 0218 	add.w	r2, r7, #24
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	eeb0 0a67 	vmov.f32	s0, s15
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f8e5 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&average_i, &average_d, average);
 80026a2:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <print_summary_report+0x128>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	f107 0210 	add.w	r2, r7, #16
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	eeb0 0a67 	vmov.f32	s0, s15
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f8d8 	bl	800286c <split_float_into_ints>
	split_float_into_ints(&standard_dev_i, &standard_dev_d, standard_dev);
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <print_summary_report+0x12c>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	f107 0208 	add.w	r2, r7, #8
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f8cb 	bl	800286c <split_float_into_ints>

	// Print results
	static char showstats[250];
	static char *stats = showstats;
	sprintf((char*)showstats,   "* Elapsed time:       %03d    sec   *"
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <print_summary_report+0x118>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026de:	6039      	str	r1, [r7, #0]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	693c      	ldr	r4, [r7, #16]
 80026ea:	68fd      	ldr	r5, [r7, #12]
 80026ec:	68be      	ldr	r6, [r7, #8]
 80026ee:	9606      	str	r6, [sp, #24]
 80026f0:	9505      	str	r5, [sp, #20]
 80026f2:	9404      	str	r4, [sp, #16]
 80026f4:	9003      	str	r0, [sp, #12]
 80026f6:	9102      	str	r1, [sp, #8]
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4913      	ldr	r1, [pc, #76]	@ (8002750 <print_summary_report+0x130>)
 8002702:	4814      	ldr	r0, [pc, #80]	@ (8002754 <print_summary_report+0x134>)
 8002704:	f00c ff66 	bl	800f5d4 <siprintf>
							  "\n* Min speed:          %03d.%02d RPM   *"
							  "\n* Max speed:          %03d.%02d RPM   *"
			                  "\n* Average speed:      %03d.%02d RPM   *"
			                  "\n* Standard deviation: %03d.%02d RPM   *\n",
							  duration, min_speed_i, min_speed_d, max_speed_i, max_speed_d, average_i, average_d, standard_dev_i, standard_dev_d);
	xQueueSend(q_print, &stats, portMAX_DELAY);
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <print_summary_report+0x110>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	2300      	movs	r3, #0
 800270e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002712:	4911      	ldr	r1, [pc, #68]	@ (8002758 <print_summary_report+0x138>)
 8002714:	f006 fe44 	bl	80093a0 <xQueueGenericSend>

	// Send statistics footer message
	xQueueSend(q_print, &msg_stat_footer, portMAX_DELAY);
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <print_summary_report+0x110>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002722:	490e      	ldr	r1, [pc, #56]	@ (800275c <print_summary_report+0x13c>)
 8002724:	f006 fe3c 	bl	80093a0 <xQueueGenericSend>
}
 8002728:	bf00      	nop
 800272a:	372c      	adds	r7, #44	@ 0x2c
 800272c:	46bd      	mov	sp, r7
 800272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002730:	20001768 	.word	0x20001768
 8002734:	20000050 	.word	0x20000050
 8002738:	20000340 	.word	0x20000340
 800273c:	2000034c 	.word	0x2000034c
 8002740:	20000060 	.word	0x20000060
 8002744:	2000033c 	.word	0x2000033c
 8002748:	20000344 	.word	0x20000344
 800274c:	20000348 	.word	0x20000348
 8002750:	0801241c 	.word	0x0801241c
 8002754:	2000144c 	.word	0x2000144c
 8002758:	20000084 	.word	0x20000084
 800275c:	20000054 	.word	0x20000054

08002760 <calculate_average>:

void calculate_average(float data[], int len)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	float sum = 0.0;
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; ++i) {
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	e00e      	b.n	8002794 <calculate_average+0x34>
		sum += data[i];
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	ed97 7a03 	vldr	s14, [r7, #12]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < len; ++i) {
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbec      	blt.n	8002776 <calculate_average+0x16>
	}
	average = sum / len;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80027aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ae:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <calculate_average+0x60>)
 80027b0:	edc3 7a00 	vstr	s15, [r3]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000344 	.word	0x20000344

080027c4 <calculate_sd>:

// Note: calculate_average must be run first
void calculate_sd(float data[], int len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e022      	b.n	800281a <calculate_sd+0x56>
		standard_dev += ( (data[i]-average) * (data[i]-average) );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <calculate_sd+0xa0>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	edd3 6a00 	vldr	s13, [r3]
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <calculate_sd+0xa0>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <calculate_sd+0xa4>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <calculate_sd+0xa4>)
 8002810:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < len; i++) {
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	dbd8      	blt.n	80027d4 <calculate_sd+0x10>
	}
	standard_dev = sqrt(standard_dev / len);
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <calculate_sd+0xa4>)
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002836:	ee16 0a90 	vmov	r0, s13
 800283a:	f7fd fedd 	bl	80005f8 <__aeabi_f2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	ec43 2b10 	vmov	d0, r2, r3
 8002846:	f00e ffb5 	bl	80117b4 <sqrt>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe fa21 	bl	8000c98 <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4a03      	ldr	r2, [pc, #12]	@ (8002868 <calculate_sd+0xa4>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000344 	.word	0x20000344
 8002868:	20000348 	.word	0x20000348

0800286c <split_float_into_ints>:

void split_float_into_ints(int *int_val, int *dec_val, float float_val)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	ed87 0a01 	vstr	s0, [r7, #4]
	// Separate float into two integers
	*int_val = (int)float_val;
 800287a:	edd7 7a01 	vldr	s15, [r7, #4]
 800287e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002882:	ee17 2a90 	vmov	r2, s15
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]
	*dec_val = (int)((float_val * 100) - (*int_val * 100));
 800288a:	edd7 7a01 	vldr	s15, [r7, #4]
 800288e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80028c4 <split_float_into_ints+0x58>
 8002892:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2264      	movs	r2, #100	@ 0x64
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b0:	ee17 2a90 	vmov	r2, s15
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	42c80000 	.word	0x42c80000

080028c8 <set_pwm_duty_cycle>:

void set_pwm_duty_cycle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t duty_cycle_percent)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	71fb      	strb	r3, [r7, #7]
	// Get timer auto-reload value (i.e. period)
	uint32_t timer_period = __HAL_TIM_GET_AUTORELOAD(htim);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	617b      	str	r3, [r7, #20]

	// Calculate the proper compare value to be loaded into the capture/compare register (CCR)
	uint32_t compare_value = (duty_cycle_percent * timer_period) / 100;
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <set_pwm_duty_cycle+0x6c>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	613b      	str	r3, [r7, #16]

	// Set new duty cycle
    __HAL_TIM_SET_COMPARE(htim, channel, compare_value);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <set_pwm_duty_cycle+0x38>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028fe:	e013      	b.n	8002928 <set_pwm_duty_cycle+0x60>
    __HAL_TIM_SET_COMPARE(htim, channel, compare_value);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d104      	bne.n	8002910 <set_pwm_duty_cycle+0x48>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800290e:	e00b      	b.n	8002928 <set_pwm_duty_cycle+0x60>
    __HAL_TIM_SET_COMPARE(htim, channel, compare_value);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d104      	bne.n	8002920 <set_pwm_duty_cycle+0x58>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800291e:	e003      	b.n	8002928 <set_pwm_duty_cycle+0x60>
    __HAL_TIM_SET_COMPARE(htim, channel, compare_value);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	51eb851f 	.word	0x51eb851f

08002938 <pid_controller>:

float pid_controller(float setpoint, float measured_value)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002942:	edc7 0a00 	vstr	s1, [r7]
    if(motor_algo == 1) {
 8002946:	4b3d      	ldr	r3, [pc, #244]	@ (8002a3c <pid_controller+0x104>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d169      	bne.n	8002a24 <pid_controller+0xec>
		float error = setpoint - measured_value;
 8002950:	ed97 7a01 	vldr	s14, [r7, #4]
 8002954:	edd7 7a00 	vldr	s15, [r7]
 8002958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295c:	edc7 7a05 	vstr	s15, [r7, #20]
		integral += error * dt;
 8002960:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <pid_controller+0x108>)
 8002962:	ed93 7a00 	vldr	s14, [r3]
 8002966:	edd7 7a05 	vldr	s15, [r7, #20]
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	4b35      	ldr	r3, [pc, #212]	@ (8002a44 <pid_controller+0x10c>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <pid_controller+0x10c>)
 800297a:	edc3 7a00 	vstr	s15, [r3]
		float derivative = (error - last_error) / dt;
 800297e:	4b32      	ldr	r3, [pc, #200]	@ (8002a48 <pid_controller+0x110>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ed97 7a05 	vldr	s14, [r7, #20]
 8002988:	ee77 6a67 	vsub.f32	s13, s14, s15
 800298c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <pid_controller+0x108>)
 800298e:	ed93 7a00 	vldr	s14, [r3]
 8002992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002996:	edc7 7a04 	vstr	s15, [r7, #16]
		last_error = error;
 800299a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a48 <pid_controller+0x110>)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	6013      	str	r3, [r2, #0]
		float output = Kp * error + Ki * integral + Kd * derivative;
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <pid_controller+0x114>)
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ae:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <pid_controller+0x118>)
 80029b0:	edd3 6a00 	vldr	s13, [r3]
 80029b4:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <pid_controller+0x10c>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c2:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <pid_controller+0x11c>)
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	edc7 7a03 	vstr	s15, [r7, #12]

		// Calculate new duty cycle
		duty_cycle += output;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <pid_controller+0x120>)
 80029da:	ed93 7a00 	vldr	s14, [r3]
 80029de:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <pid_controller+0x120>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]

		// Ensure the duty cycle is within the range of 0 to 100 (as duty cycle percentage)
		if (duty_cycle > 100.0f) duty_cycle = 100.0f;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <pid_controller+0x120>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002a5c <pid_controller+0x124>
 80029f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	dd02      	ble.n	8002a06 <pid_controller+0xce>
 8002a00:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <pid_controller+0x120>)
 8002a02:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <pid_controller+0x128>)
 8002a04:	601a      	str	r2, [r3, #0]
		if (duty_cycle < 0.0f) duty_cycle = 0.0f;
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <pid_controller+0x120>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	d503      	bpl.n	8002a1e <pid_controller+0xe6>
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <pid_controller+0x120>)
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

		return duty_cycle;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <pid_controller+0x120>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e001      	b.n	8002a28 <pid_controller+0xf0>
    }
    else {
    	return duty_cycle;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <pid_controller+0x120>)
 8002a26:	681b      	ldr	r3, [r3, #0]
    }
}
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000074 	.word	0x20000074
 8002a40:	20000070 	.word	0x20000070
 8002a44:	200012f4 	.word	0x200012f4
 8002a48:	200012f8 	.word	0x200012f8
 8002a4c:	20000064 	.word	0x20000064
 8002a50:	200012ec 	.word	0x200012ec
 8002a54:	200012f0 	.word	0x200012f0
 8002a58:	20000068 	.word	0x20000068
 8002a5c:	42c80000 	.word	0x42c80000
 8002a60:	42c80000 	.word	0x42c80000

08002a64 <isNumeric>:

int isNumeric(const char *str) {
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    int hasDecimalPoint = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]

    // Check for empty string
    if (*str == '\0') {
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11a      	bne.n	8002aae <isNumeric+0x4a>
        return 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e01d      	b.n	8002ab8 <isNumeric+0x54>
    }

    // Check each character in the string
    while (*str) {
        if (!isdigit((unsigned char)*str)) {  // Cast to unsigned char
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <isNumeric+0x60>)
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <isNumeric+0x44>
            // Allow one decimal point
            if (*str == '.' && !hasDecimalPoint) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a96:	d105      	bne.n	8002aa4 <isNumeric+0x40>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <isNumeric+0x40>
                hasDecimalPoint = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e001      	b.n	8002aa8 <isNumeric+0x44>
            } else {
                return 0; // Not a digit or second decimal point
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e007      	b.n	8002ab8 <isNumeric+0x54>
            }
        }
        str++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e2      	bne.n	8002a7c <isNumeric+0x18>
    }
    return 1; // All characters are digits or one decimal point
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	08012b00 	.word	0x08012b00

08002ac8 <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	2000      	movs	r0, #0
 8002ade:	f008 fb63 	bl	800b1a8 <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 8002ae2:	e218      	b.n	8002f16 <rtc_task+0x44e>

			switch(curr_sys_state) {
 8002ae4:	4bb5      	ldr	r3, [pc, #724]	@ (8002dbc <rtc_task+0x2f4>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	f000 8132 	beq.w	8002d52 <rtc_task+0x28a>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	f300 81fb 	bgt.w	8002eea <rtc_task+0x422>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d003      	beq.n	8002b00 <rtc_task+0x38>
 8002af8:	2b07      	cmp	r3, #7
 8002afa:	f000 8089 	beq.w	8002c10 <rtc_task+0x148>
 8002afe:	e1f4      	b.n	8002eea <rtc_task+0x422>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 8002b00:	4baf      	ldr	r3, [pc, #700]	@ (8002dc0 <rtc_task+0x2f8>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b0a:	49ae      	ldr	r1, [pc, #696]	@ (8002dc4 <rtc_task+0x2fc>)
 8002b0c:	f006 fc48 	bl	80093a0 <xQueueGenericSend>
					show_time_date();
 8002b10:	f000 faa4 	bl	800305c <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 8002b14:	4baa      	ldr	r3, [pc, #680]	@ (8002dc0 <rtc_task+0x2f8>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b1e:	49aa      	ldr	r1, [pc, #680]	@ (8002dc8 <rtc_task+0x300>)
 8002b20:	f006 fc3e 	bl	80093a0 <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b2c:	9200      	str	r2, [sp, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2000      	movs	r0, #0
 8002b34:	f008 fb38 	bl	800b1a8 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d859      	bhi.n	8002bf8 <rtc_task+0x130>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	49a1      	ldr	r1, [pc, #644]	@ (8002dcc <rtc_task+0x304>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fb8b 	bl	8000264 <strcmp>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <rtc_task+0xa4>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 8002b54:	4b99      	ldr	r3, [pc, #612]	@ (8002dbc <rtc_task+0x2f4>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8002b5a:	4b99      	ldr	r3, [pc, #612]	@ (8002dc0 <rtc_task+0x2f8>)
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b64:	499a      	ldr	r1, [pc, #616]	@ (8002dd0 <rtc_task+0x308>)
 8002b66:	f006 fc1b 	bl	80093a0 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 8002b6a:	e1d4      	b.n	8002f16 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4999      	ldr	r1, [pc, #612]	@ (8002dd4 <rtc_task+0x30c>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fb77 	bl	8000264 <strcmp>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <rtc_task+0xcc>
							curr_sys_state = sRtcTimeConfig;
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8002dbc <rtc_task+0x2f4>)
 8002b7e:	2208      	movs	r2, #8
 8002b80:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8002b82:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <rtc_task+0x2f8>)
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b8c:	4992      	ldr	r1, [pc, #584]	@ (8002dd8 <rtc_task+0x310>)
 8002b8e:	f006 fc07 	bl	80093a0 <xQueueGenericSend>
					break;
 8002b92:	e1c0      	b.n	8002f16 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4991      	ldr	r1, [pc, #580]	@ (8002ddc <rtc_task+0x314>)
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fb63 	bl	8000264 <strcmp>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <rtc_task+0xe4>
							curr_sys_state = sRtcMenu;
 8002ba4:	4b85      	ldr	r3, [pc, #532]	@ (8002dbc <rtc_task+0x2f4>)
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	701a      	strb	r2, [r3, #0]
					break;
 8002baa:	e1b4      	b.n	8002f16 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	498c      	ldr	r1, [pc, #560]	@ (8002de0 <rtc_task+0x318>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fb57 	bl	8000264 <strcmp>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <rtc_task+0x10a>
							curr_sys_state = sMainMenu;
 8002bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8002dbc <rtc_task+0x2f4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
							xSemaphoreGive(ledOffSemaphore);
 8002bc2:	4b88      	ldr	r3, [pc, #544]	@ (8002de4 <rtc_task+0x31c>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	f006 fbe8 	bl	80093a0 <xQueueGenericSend>
					break;
 8002bd0:	e1a1      	b.n	8002f16 <rtc_task+0x44e>
							curr_sys_state = sMainMenu;
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <rtc_task+0x2f4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002bd8:	4b79      	ldr	r3, [pc, #484]	@ (8002dc0 <rtc_task+0x2f8>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be2:	4981      	ldr	r1, [pc, #516]	@ (8002de8 <rtc_task+0x320>)
 8002be4:	f006 fbdc 	bl	80093a0 <xQueueGenericSend>
							xSemaphoreGive(ledOffSemaphore);
 8002be8:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <rtc_task+0x31c>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f006 fbd5 	bl	80093a0 <xQueueGenericSend>
					break;
 8002bf6:	e18e      	b.n	8002f16 <rtc_task+0x44e>
						curr_sys_state = sMainMenu;
 8002bf8:	4b70      	ldr	r3, [pc, #448]	@ (8002dbc <rtc_task+0x2f4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002bfe:	4b70      	ldr	r3, [pc, #448]	@ (8002dc0 <rtc_task+0x2f8>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	2300      	movs	r3, #0
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c08:	4977      	ldr	r1, [pc, #476]	@ (8002de8 <rtc_task+0x320>)
 8002c0a:	f006 fbc9 	bl	80093a0 <xQueueGenericSend>
					break;
 8002c0e:	e182      	b.n	8002f16 <rtc_task+0x44e>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002c10:	f107 0308 	add.w	r3, r7, #8
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c18:	9200      	str	r2, [sp, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f008 fac2 	bl	800b1a8 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 8002c28:	4b70      	ldr	r3, [pc, #448]	@ (8002dec <rtc_task+0x324>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	f200 816f 	bhi.w	8002f10 <rtc_task+0x448>
 8002c32:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <rtc_task+0x170>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c79 	.word	0x08002c79
 8002c40:	08002ca9 	.word	0x08002ca9
 8002c44:	08002cd9 	.word	0x08002cd9
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 f985 	bl	8002f60 <getnumber>
 8002c56:	4603      	mov	r3, r0
 8002c58:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 8002c5a:	4a65      	ldr	r2, [pc, #404]	@ (8002df0 <rtc_task+0x328>)
 8002c5c:	7b3b      	ldrb	r3, [r7, #12]
 8002c5e:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8002c60:	4b62      	ldr	r3, [pc, #392]	@ (8002dec <rtc_task+0x324>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8002c66:	4b56      	ldr	r3, [pc, #344]	@ (8002dc0 <rtc_task+0x2f8>)
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c70:	4960      	ldr	r1, [pc, #384]	@ (8002df4 <rtc_task+0x32c>)
 8002c72:	f006 fb95 	bl	80093a0 <xQueueGenericSend>
							break;
 8002c76:	e06b      	b.n	8002d50 <rtc_task+0x288>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f000 f96d 	bl	8002f60 <getnumber>
 8002c86:	4603      	mov	r3, r0
 8002c88:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 8002c8a:	4a59      	ldr	r2, [pc, #356]	@ (8002df0 <rtc_task+0x328>)
 8002c8c:	7b7b      	ldrb	r3, [r7, #13]
 8002c8e:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 8002c90:	4b56      	ldr	r3, [pc, #344]	@ (8002dec <rtc_task+0x324>)
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8002c96:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc0 <rtc_task+0x2f8>)
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ca0:	4955      	ldr	r1, [pc, #340]	@ (8002df8 <rtc_task+0x330>)
 8002ca2:	f006 fb7d 	bl	80093a0 <xQueueGenericSend>
							break;
 8002ca6:	e053      	b.n	8002d50 <rtc_task+0x288>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 f955 	bl	8002f60 <getnumber>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 8002cba:	4a4d      	ldr	r2, [pc, #308]	@ (8002df0 <rtc_task+0x328>)
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <rtc_task+0x324>)
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <rtc_task+0x2f8>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd0:	494a      	ldr	r1, [pc, #296]	@ (8002dfc <rtc_task+0x334>)
 8002cd2:	f006 fb65 	bl	80093a0 <xQueueGenericSend>
							break;
 8002cd6:	e03b      	b.n	8002d50 <rtc_task+0x288>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 f93d 	bl	8002f60 <getnumber>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 8002cea:	4a41      	ldr	r2, [pc, #260]	@ (8002df0 <rtc_task+0x328>)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8002cf0:	493f      	ldr	r1, [pc, #252]	@ (8002df0 <rtc_task+0x328>)
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f955 	bl	8002fa2 <validate_rtc_information>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d112      	bne.n	8002d24 <rtc_task+0x25c>
								rtc_configure_date(&date); // Configure date
 8002cfe:	483c      	ldr	r0, [pc, #240]	@ (8002df0 <rtc_task+0x328>)
 8002d00:	f000 f99c 	bl	800303c <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8002d04:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <rtc_task+0x2f8>)
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d0e:	493c      	ldr	r1, [pc, #240]	@ (8002e00 <rtc_task+0x338>)
 8002d10:	f006 fb46 	bl	80093a0 <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8002d14:	4b3b      	ldr	r3, [pc, #236]	@ (8002e04 <rtc_task+0x33c>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f006 fb3f 	bl	80093a0 <xQueueGenericSend>
 8002d22:	e00e      	b.n	8002d42 <rtc_task+0x27a>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002d24:	4b26      	ldr	r3, [pc, #152]	@ (8002dc0 <rtc_task+0x2f8>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d2e:	492e      	ldr	r1, [pc, #184]	@ (8002de8 <rtc_task+0x320>)
 8002d30:	f006 fb36 	bl	80093a0 <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <rtc_task+0x31c>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f006 fb2f 	bl	80093a0 <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	@ (8002dbc <rtc_task+0x2f4>)
 8002d44:	2203      	movs	r2, #3
 8002d46:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <rtc_task+0x324>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
							break;
 8002d4e:	bf00      	nop
					}
					break;
 8002d50:	e0de      	b.n	8002f10 <rtc_task+0x448>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d5a:	9200      	str	r2, [sp, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2000      	movs	r0, #0
 8002d62:	f008 fa21 	bl	800b1a8 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8002d6a:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <rtc_task+0x324>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	f200 80d0 	bhi.w	8002f14 <rtc_task+0x44c>
 8002d74:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <rtc_task+0x2b4>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002e11 	.word	0x08002e11
 8002d84:	08002e41 	.word	0x08002e41
 8002d88:	08002e71 	.word	0x08002e71
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f000 f8e3 	bl	8002f60 <getnumber>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <rtc_task+0x340>)
 8002da0:	7c3b      	ldrb	r3, [r7, #16]
 8002da2:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <rtc_task+0x324>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <rtc_task+0x2f8>)
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002db4:	4915      	ldr	r1, [pc, #84]	@ (8002e0c <rtc_task+0x344>)
 8002db6:	f006 faf3 	bl	80093a0 <xQueueGenericSend>
							break;
 8002dba:	e095      	b.n	8002ee8 <rtc_task+0x420>
 8002dbc:	20001791 	.word	0x20001791
 8002dc0:	20001768 	.word	0x20001768
 8002dc4:	200000b0 	.word	0x200000b0
 8002dc8:	200000b4 	.word	0x200000b4
 8002dcc:	08012704 	.word	0x08012704
 8002dd0:	200000a0 	.word	0x200000a0
 8002dd4:	0801270c 	.word	0x0801270c
 8002dd8:	20000090 	.word	0x20000090
 8002ddc:	08012714 	.word	0x08012714
 8002de0:	0801271c 	.word	0x0801271c
 8002de4:	2000178c 	.word	0x2000178c
 8002de8:	20000088 	.word	0x20000088
 8002dec:	20001548 	.word	0x20001548
 8002df0:	20001560 	.word	0x20001560
 8002df4:	200000a4 	.word	0x200000a4
 8002df8:	200000a8 	.word	0x200000a8
 8002dfc:	200000ac 	.word	0x200000ac
 8002e00:	2000008c 	.word	0x2000008c
 8002e04:	20001788 	.word	0x20001788
 8002e08:	2000154c 	.word	0x2000154c
 8002e0c:	20000094 	.word	0x20000094
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f000 f8a1 	bl	8002f60 <getnumber>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 8002e22:	4a44      	ldr	r2, [pc, #272]	@ (8002f34 <rtc_task+0x46c>)
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 8002e28:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <rtc_task+0x470>)
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8002e2e:	4b43      	ldr	r3, [pc, #268]	@ (8002f3c <rtc_task+0x474>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e38:	4941      	ldr	r1, [pc, #260]	@ (8002f40 <rtc_task+0x478>)
 8002e3a:	f006 fab1 	bl	80093a0 <xQueueGenericSend>
							break;
 8002e3e:	e053      	b.n	8002ee8 <rtc_task+0x420>
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 f889 	bl	8002f60 <getnumber>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8002e52:	4a38      	ldr	r2, [pc, #224]	@ (8002f34 <rtc_task+0x46c>)
 8002e54:	7cbb      	ldrb	r3, [r7, #18]
 8002e56:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8002e58:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <rtc_task+0x470>)
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <rtc_task+0x474>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e68:	4936      	ldr	r1, [pc, #216]	@ (8002f44 <rtc_task+0x47c>)
 8002e6a:	f006 fa99 	bl	80093a0 <xQueueGenericSend>
							break;
 8002e6e:	e03b      	b.n	8002ee8 <rtc_task+0x420>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 f871 	bl	8002f60 <getnumber>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 8002e82:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <rtc_task+0x46c>)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 8002e88:	2100      	movs	r1, #0
 8002e8a:	482a      	ldr	r0, [pc, #168]	@ (8002f34 <rtc_task+0x46c>)
 8002e8c:	f000 f889 	bl	8002fa2 <validate_rtc_information>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d112      	bne.n	8002ebc <rtc_task+0x3f4>
								rtc_configure_time(&time); // Configure time
 8002e96:	4827      	ldr	r0, [pc, #156]	@ (8002f34 <rtc_task+0x46c>)
 8002e98:	f000 f8ba 	bl	8003010 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <rtc_task+0x474>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ea6:	4928      	ldr	r1, [pc, #160]	@ (8002f48 <rtc_task+0x480>)
 8002ea8:	f006 fa7a 	bl	80093a0 <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8002eac:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <rtc_task+0x484>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f006 fa73 	bl	80093a0 <xQueueGenericSend>
 8002eba:	e00e      	b.n	8002eda <rtc_task+0x412>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <rtc_task+0x474>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ec6:	4922      	ldr	r1, [pc, #136]	@ (8002f50 <rtc_task+0x488>)
 8002ec8:	f006 fa6a 	bl	80093a0 <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8002ecc:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <rtc_task+0x48c>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f006 fa63 	bl	80093a0 <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8002eda:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <rtc_task+0x490>)
 8002edc:	2203      	movs	r2, #3
 8002ede:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <rtc_task+0x470>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
							break;
 8002ee6:	bf00      	nop
					}
					break;
 8002ee8:	e014      	b.n	8002f14 <rtc_task+0x44c>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <rtc_task+0x490>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002ef0:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <rtc_task+0x474>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002efa:	4915      	ldr	r1, [pc, #84]	@ (8002f50 <rtc_task+0x488>)
 8002efc:	f006 fa50 	bl	80093a0 <xQueueGenericSend>
					// Give semaphore for led_task to turn LEDs off
					xSemaphoreGive(ledOffSemaphore);
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <rtc_task+0x48c>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f006 fa49 	bl	80093a0 <xQueueGenericSend>
					break;
 8002f0e:	e002      	b.n	8002f16 <rtc_task+0x44e>
					break;
 8002f10:	bf00      	nop
 8002f12:	e000      	b.n	8002f16 <rtc_task+0x44e>
					break;
 8002f14:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <rtc_task+0x490>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f47f ade2 	bne.w	8002ae4 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8002f20:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <rtc_task+0x494>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f008 f9c5 	bl	800b2bc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002f32:	e5cd      	b.n	8002ad0 <rtc_task+0x8>
 8002f34:	2000154c 	.word	0x2000154c
 8002f38:	20001548 	.word	0x20001548
 8002f3c:	20001768 	.word	0x20001768
 8002f40:	20000098 	.word	0x20000098
 8002f44:	2000009c 	.word	0x2000009c
 8002f48:	2000008c 	.word	0x2000008c
 8002f4c:	20001788 	.word	0x20001788
 8002f50:	20000088 	.word	0x20000088
 8002f54:	2000178c 	.word	0x2000178c
 8002f58:	20001791 	.word	0x20001791
 8002f5c:	2000174c 	.word	0x2000174c

08002f60 <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	dd0e      	ble.n	8002f8e <getnumber+0x2e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3301      	adds	r3, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3b10      	subs	r3, #16
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e003      	b.n	8002f96 <getnumber+0x36>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	3b30      	subs	r3, #48	@ 0x30
 8002f94:	b2db      	uxtb	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
	if(time) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d011      	beq.n	8002fd6 <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d80b      	bhi.n	8002fd2 <validate_rtc_information+0x30>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fc0:	d807      	bhi.n	8002fd2 <validate_rtc_information+0x30>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fc8:	d803      	bhi.n	8002fd2 <validate_rtc_information+0x30>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d901      	bls.n	8002fd6 <validate_rtc_information+0x34>
			return 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e015      	b.n	8003002 <validate_rtc_information+0x60>
	}
	if(date) {
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d011      	beq.n	8003000 <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	789b      	ldrb	r3, [r3, #2]
 8002fe0:	2b1f      	cmp	r3, #31
 8002fe2:	d80b      	bhi.n	8002ffc <validate_rtc_information+0x5a>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d807      	bhi.n	8002ffc <validate_rtc_information+0x5a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	2b63      	cmp	r3, #99	@ 0x63
 8002ff2:	d803      	bhi.n	8002ffc <validate_rtc_information+0x5a>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d901      	bls.n	8003000 <validate_rtc_information+0x5e>
			return 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <validate_rtc_information+0x60>
	}

	return 0;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4803      	ldr	r0, [pc, #12]	@ (8003038 <rtc_configure_time+0x28>)
 800302a:	f002 fd4a 	bl	8005ac2 <HAL_RTC_SetTime>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200015b4 	.word	0x200015b4

0800303c <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8003044:	2200      	movs	r2, #0
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4803      	ldr	r0, [pc, #12]	@ (8003058 <rtc_configure_date+0x1c>)
 800304a:	f002 fe32 	bl	8005cb2 <HAL_RTC_SetDate>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200015b4 	.word	0x200015b4

0800305c <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	2204      	movs	r2, #4
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f00c fb25 	bl	800f6ba <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8003070:	463b      	mov	r3, r7
 8003072:	2214      	movs	r2, #20
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f00c fb1f 	bl	800f6ba <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800307c:	463b      	mov	r3, r7
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	4837      	ldr	r0, [pc, #220]	@ (8003160 <show_time_date+0x104>)
 8003084:	f002 fdb7 	bl	8005bf6 <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	4619      	mov	r1, r3
 8003090:	4833      	ldr	r0, [pc, #204]	@ (8003160 <show_time_date+0x104>)
 8003092:	f002 fe92 	bl	8005dba <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <show_time_date+0x44>
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <show_time_date+0x108>)
 800309e:	e000      	b.n	80030a2 <show_time_date+0x46>
 80030a0:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <show_time_date+0x10c>)
 80030a2:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 80030a4:	783b      	ldrb	r3, [r7, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	461a      	mov	r2, r3
 80030ac:	78bb      	ldrb	r3, [r7, #2]
 80030ae:	4619      	mov	r1, r3
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	9101      	str	r1, [sp, #4]
 80030b6:	9200      	str	r2, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	4a2c      	ldr	r2, [pc, #176]	@ (800316c <show_time_date+0x110>)
 80030bc:	492c      	ldr	r1, [pc, #176]	@ (8003170 <show_time_date+0x114>)
 80030be:	482d      	ldr	r0, [pc, #180]	@ (8003174 <show_time_date+0x118>)
 80030c0:	f00c fa88 	bl	800f5d4 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 80030c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003178 <show_time_date+0x11c>)
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030ce:	492b      	ldr	r1, [pc, #172]	@ (800317c <show_time_date+0x120>)
 80030d0:	f006 f966 	bl	80093a0 <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 80030d4:	7d3b      	ldrb	r3, [r7, #20]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d826      	bhi.n	800312a <show_time_date+0xce>
 80030dc:	a201      	add	r2, pc, #4	@ (adr r2, 80030e4 <show_time_date+0x88>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003101 	.word	0x08003101
 80030e8:	08003107 	.word	0x08003107
 80030ec:	0800310d 	.word	0x0800310d
 80030f0:	08003113 	.word	0x08003113
 80030f4:	08003119 	.word	0x08003119
 80030f8:	0800311f 	.word	0x0800311f
 80030fc:	08003125 	.word	0x08003125
		case 1:
			weekday = "Sunday";
 8003100:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <show_time_date+0x124>)
 8003102:	61fb      	str	r3, [r7, #28]
			break;
 8003104:	e011      	b.n	800312a <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 8003106:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <show_time_date+0x128>)
 8003108:	61fb      	str	r3, [r7, #28]
			break;
 800310a:	e00e      	b.n	800312a <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 800310c:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <show_time_date+0x12c>)
 800310e:	61fb      	str	r3, [r7, #28]
			break;
 8003110:	e00b      	b.n	800312a <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 8003112:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <show_time_date+0x130>)
 8003114:	61fb      	str	r3, [r7, #28]
			break;
 8003116:	e008      	b.n	800312a <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 8003118:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <show_time_date+0x134>)
 800311a:	61fb      	str	r3, [r7, #28]
			break;
 800311c:	e005      	b.n	800312a <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <show_time_date+0x138>)
 8003120:	61fb      	str	r3, [r7, #28]
			break;
 8003122:	e002      	b.n	800312a <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8003124:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <show_time_date+0x13c>)
 8003126:	61fb      	str	r3, [r7, #28]
			break;
 8003128:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 800312a:	7d7b      	ldrb	r3, [r7, #21]
 800312c:	4619      	mov	r1, r3
 800312e:	7dbb      	ldrb	r3, [r7, #22]
 8003130:	461a      	mov	r2, r3
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	460b      	mov	r3, r1
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4916      	ldr	r1, [pc, #88]	@ (800319c <show_time_date+0x140>)
 8003142:	4817      	ldr	r0, [pc, #92]	@ (80031a0 <show_time_date+0x144>)
 8003144:	f00c fa46 	bl	800f5d4 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <show_time_date+0x11c>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003152:	4914      	ldr	r1, [pc, #80]	@ (80031a4 <show_time_date+0x148>)
 8003154:	f006 f924 	bl	80093a0 <xQueueGenericSend>
}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200015b4 	.word	0x200015b4
 8003164:	08012724 	.word	0x08012724
 8003168:	08012728 	.word	0x08012728
 800316c:	0801272c 	.word	0x0801272c
 8003170:	08012744 	.word	0x08012744
 8003174:	20001564 	.word	0x20001564
 8003178:	20001768 	.word	0x20001768
 800317c:	200000b8 	.word	0x200000b8
 8003180:	0801275c 	.word	0x0801275c
 8003184:	08012764 	.word	0x08012764
 8003188:	0801276c 	.word	0x0801276c
 800318c:	08012774 	.word	0x08012774
 8003190:	08012780 	.word	0x08012780
 8003194:	0801278c 	.word	0x0801278c
 8003198:	08012794 	.word	0x08012794
 800319c:	080127a0 	.word	0x080127a0
 80031a0:	2000158c 	.word	0x2000158c
 80031a4:	200000bc 	.word	0x200000bc

080031a8 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80031b0:	4b3c      	ldr	r3, [pc, #240]	@ (80032a4 <main_menu_task+0xfc>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031ba:	493b      	ldr	r1, [pc, #236]	@ (80032a8 <main_menu_task+0x100>)
 80031bc:	f006 f8f0 	bl	80093a0 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031c8:	9200      	str	r2, [sp, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2000      	movs	r0, #0
 80031d0:	f007 ffea 	bl	800b1a8 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d14e      	bne.n	800327e <main_menu_task+0xd6>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3b30      	subs	r3, #48	@ 0x30
 80031e6:	613b      	str	r3, [r7, #16]
			switch(option) {
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d83e      	bhi.n	800326c <main_menu_task+0xc4>
 80031ee:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <main_menu_task+0x4c>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003205 	.word	0x08003205
 80031f8:	0800321f 	.word	0x0800321f
 80031fc:	08003239 	.word	0x08003239
 8003200:	08003253 	.word	0x08003253
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <main_menu_task+0x104>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <main_menu_task+0x108>)
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	f008 f850 	bl	800b2bc <xTaskGenericNotify>
					break;
 800321c:	e038      	b.n	8003290 <main_menu_task+0xe8>
				case 1:
					curr_sys_state = sRtcMenu;
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <main_menu_task+0x104>)
 8003220:	2203      	movs	r2, #3
 8003222:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8003224:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <main_menu_task+0x10c>)
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2300      	movs	r3, #0
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	f008 f843 	bl	800b2bc <xTaskGenericNotify>
					break;
 8003236:	e02b      	b.n	8003290 <main_menu_task+0xe8>
				case 2:
					curr_sys_state = sAccMenu;
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <main_menu_task+0x104>)
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <main_menu_task+0x110>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	f008 f836 	bl	800b2bc <xTaskGenericNotify>
					break;
 8003250:	e01e      	b.n	8003290 <main_menu_task+0xe8>
				case 3:
					curr_sys_state = sMotorMenu;
 8003252:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <main_menu_task+0x104>)
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_motor_task, 0, eNoAction);
 8003258:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <main_menu_task+0x114>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	f008 f829 	bl	800b2bc <xTaskGenericNotify>
					break;
 800326a:	e011      	b.n	8003290 <main_menu_task+0xe8>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800326c:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <main_menu_task+0xfc>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003276:	4912      	ldr	r1, [pc, #72]	@ (80032c0 <main_menu_task+0x118>)
 8003278:	f006 f892 	bl	80093a0 <xQueueGenericSend>
					continue;
 800327c:	e011      	b.n	80032a2 <main_menu_task+0xfa>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <main_menu_task+0xfc>)
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003288:	490d      	ldr	r1, [pc, #52]	@ (80032c0 <main_menu_task+0x118>)
 800328a:	f006 f889 	bl	80093a0 <xQueueGenericSend>
			continue;
 800328e:	e008      	b.n	80032a2 <main_menu_task+0xfa>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8003290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2000      	movs	r0, #0
 800329e:	f007 ff83 	bl	800b1a8 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80032a2:	e785      	b.n	80031b0 <main_menu_task+0x8>
 80032a4:	20001768 	.word	0x20001768
 80032a8:	200000c4 	.word	0x200000c4
 80032ac:	20001791 	.word	0x20001791
 80032b0:	20001758 	.word	0x20001758
 80032b4:	2000175c 	.word	0x2000175c
 80032b8:	20001760 	.word	0x20001760
 80032bc:	20001764 	.word	0x20001764
 80032c0:	200000c0 	.word	0x200000c0

080032c4 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2000      	movs	r0, #0
 80032da:	f007 ff65 	bl	800b1a8 <xTaskGenericNotifyWait>
 80032de:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d1f2      	bne.n	80032cc <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f822 	bl	8003334 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80032f0:	e7ec      	b.n	80032cc <message_handler_task+0x8>
	...

080032f4 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <print_task+0x38>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f107 010c 	add.w	r1, r7, #12
 8003304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003308:	4618      	mov	r0, r3
 800330a:	f006 fa35 	bl	8009778 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800330e:	68fc      	ldr	r4, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fc ffb0 	bl	8000278 <strlen>
 8003318:	4603      	mov	r3, r0
 800331a:	b29a      	uxth	r2, r3
 800331c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003320:	4621      	mov	r1, r4
 8003322:	4803      	ldr	r0, [pc, #12]	@ (8003330 <print_task+0x3c>)
 8003324:	f004 fcf4 	bl	8007d10 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8003328:	bf00      	nop
 800332a:	e7e7      	b.n	80032fc <print_task+0x8>
 800332c:	20001768 	.word	0x20001768
 8003330:	20001704 	.word	0x20001704

08003334 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af02      	add	r7, sp, #8
 800333a:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f85d 	bl	80033fc <extract_command>

	switch(curr_sys_state) {
 8003342:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <process_message+0xb0>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d846      	bhi.n	80033d8 <process_message+0xa4>
 800334a:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <process_message+0x1c>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003375 	.word	0x08003375
 8003354:	08003389 	.word	0x08003389
 8003358:	0800339d 	.word	0x0800339d
 800335c:	080033c5 	.word	0x080033c5
 8003360:	080033b1 	.word	0x080033b1
 8003364:	080033b1 	.word	0x080033b1
 8003368:	080033b1 	.word	0x080033b1
 800336c:	080033c5 	.word	0x080033c5
 8003370:	080033c5 	.word	0x080033c5
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8003374:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <process_message+0xb4>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2303      	movs	r3, #3
 8003380:	2100      	movs	r1, #0
 8003382:	f007 ff9b 	bl	800b2bc <xTaskGenericNotify>
			break;
 8003386:	e028      	b.n	80033da <process_message+0xa6>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <process_message+0xb8>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2303      	movs	r3, #3
 8003394:	2100      	movs	r1, #0
 8003396:	f007 ff91 	bl	800b2bc <xTaskGenericNotify>
			break;
 800339a:	e01e      	b.n	80033da <process_message+0xa6>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <process_message+0xbc>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2303      	movs	r3, #3
 80033a8:	2100      	movs	r1, #0
 80033aa:	f007 ff87 	bl	800b2bc <xTaskGenericNotify>
			break;
 80033ae:	e014      	b.n	80033da <process_message+0xa6>
		case sMotorMenu:
		case sMotorAlgo:
		case sMotorSpeed:
			// Notify the motor task and pass the message
			xTaskNotify(handle_motor_task, (uint32_t)msg, eSetValueWithOverwrite);
 80033b0:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <process_message+0xc0>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	2300      	movs	r3, #0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2303      	movs	r3, #3
 80033bc:	2100      	movs	r1, #0
 80033be:	f007 ff7d 	bl	800b2bc <xTaskGenericNotify>
			break;
 80033c2:	e00a      	b.n	80033da <process_message+0xa6>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <process_message+0xc4>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2303      	movs	r3, #3
 80033d0:	2100      	movs	r1, #0
 80033d2:	f007 ff73 	bl	800b2bc <xTaskGenericNotify>
			break;
 80033d6:	e000      	b.n	80033da <process_message+0xa6>
		default:
			break;
 80033d8:	bf00      	nop
	}
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20001791 	.word	0x20001791
 80033e8:	2000174c 	.word	0x2000174c
 80033ec:	20001758 	.word	0x20001758
 80033f0:	20001760 	.word	0x20001760
 80033f4:	20001764 	.word	0x20001764
 80033f8:	2000175c 	.word	0x2000175c

080033fc <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <extract_command+0x70>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f006 fcb9 	bl	8009d80 <uxQueueMessagesWaiting>
 800340e:	4603      	mov	r3, r0
 8003410:	613b      	str	r3, [r7, #16]
	if(!status) {
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <extract_command+0x22>
		return -1;
 8003418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800341c:	e022      	b.n	8003464 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <extract_command+0x70>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f107 010f 	add.w	r1, r7, #15
 800342a:	2200      	movs	r2, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f006 f9a3 	bl	8009778 <xQueueReceive>
 8003432:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d106      	bne.n	8003448 <extract_command+0x4c>
			msg->payload[i++] = item;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	75fa      	strb	r2, [r7, #23]
 8003440:	461a      	mov	r2, r3
 8003442:	7bf9      	ldrb	r1, [r7, #15]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b0a      	cmp	r3, #10
 800344c:	d1e9      	bne.n	8003422 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	3b01      	subs	r3, #1
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	2100      	movs	r1, #0
 8003456:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	3b01      	subs	r3, #1
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]

	return 0;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000176c 	.word	0x2000176c

08003470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	@ 0x40
 8003474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003476:	f001 f93f 	bl	80046f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800347a:	f000 f9c3 	bl	8003804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800347e:	f000 fbe5 	bl	8003c4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003482:	f000 fbb9 	bl	8003bf8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003486:	f000 fa29 	bl	80038dc <MX_RTC_Init>
  MX_SPI1_Init();
 800348a:	f000 fa4d 	bl	8003928 <MX_SPI1_Init>
  MX_TIM3_Init();
 800348e:	f000 fb05 	bl	8003a9c <MX_TIM3_Init>
  MX_TIM1_Init();
 8003492:	f000 fa7f 	bl	8003994 <MX_TIM1_Init>
  MX_TIM7_Init();
 8003496:	f000 fb79 	bl	8003b8c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800349a:	4b9d      	ldr	r3, [pc, #628]	@ (8003710 <main+0x2a0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a9c      	ldr	r2, [pc, #624]	@ (8003710 <main+0x2a0>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

  // Start SEGGER recording
  SEGGER_SYSVIEW_Conf();
 80034a6:	f009 fa23 	bl	800c8f0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80034aa:	f00a fb83 	bl	800dbb4 <SEGGER_SYSVIEW_Start>

  // Initialize the accelerometer
  accelerometer_init();
 80034ae:	f7fd ff11 	bl	80012d4 <accelerometer_init>

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 80034b2:	4b98      	ldr	r3, [pc, #608]	@ (8003714 <main+0x2a4>)
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2302      	movs	r3, #2
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	22fa      	movs	r2, #250	@ 0xfa
 80034be:	4996      	ldr	r1, [pc, #600]	@ (8003718 <main+0x2a8>)
 80034c0:	4896      	ldr	r0, [pc, #600]	@ (800371c <main+0x2ac>)
 80034c2:	f006 fe31 	bl	800a128 <xTaskCreate>
 80034c6:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d00b      	beq.n	80034e6 <main+0x76>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <main+0x72>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80034e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003720 <main+0x2b0>)
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	22fa      	movs	r2, #250	@ 0xfa
 80034f2:	498c      	ldr	r1, [pc, #560]	@ (8003724 <main+0x2b4>)
 80034f4:	488c      	ldr	r0, [pc, #560]	@ (8003728 <main+0x2b8>)
 80034f6:	f006 fe17 	bl	800a128 <xTaskCreate>
 80034fa:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00b      	beq.n	800351a <main+0xaa>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <main+0xa6>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800351a:	4b84      	ldr	r3, [pc, #528]	@ (800372c <main+0x2bc>)
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2302      	movs	r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	22fa      	movs	r2, #250	@ 0xfa
 8003526:	4982      	ldr	r1, [pc, #520]	@ (8003730 <main+0x2c0>)
 8003528:	4882      	ldr	r0, [pc, #520]	@ (8003734 <main+0x2c4>)
 800352a:	f006 fdfd 	bl	800a128 <xTaskCreate>
 800352e:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00b      	beq.n	800354e <main+0xde>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <main+0xda>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800354e:	4b7a      	ldr	r3, [pc, #488]	@ (8003738 <main+0x2c8>)
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2302      	movs	r3, #2
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	22fa      	movs	r2, #250	@ 0xfa
 800355a:	4978      	ldr	r1, [pc, #480]	@ (800373c <main+0x2cc>)
 800355c:	4878      	ldr	r0, [pc, #480]	@ (8003740 <main+0x2d0>)
 800355e:	f006 fde3 	bl	800a128 <xTaskCreate>
 8003562:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	2b01      	cmp	r3, #1
 8003568:	d00b      	beq.n	8003582 <main+0x112>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	623b      	str	r3, [r7, #32]
    }
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	e7fd      	b.n	800357e <main+0x10e>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8003582:	4b70      	ldr	r3, [pc, #448]	@ (8003744 <main+0x2d4>)
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	2302      	movs	r3, #2
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2300      	movs	r3, #0
 800358c:	22fa      	movs	r2, #250	@ 0xfa
 800358e:	496e      	ldr	r1, [pc, #440]	@ (8003748 <main+0x2d8>)
 8003590:	486e      	ldr	r0, [pc, #440]	@ (800374c <main+0x2dc>)
 8003592:	f006 fdc9 	bl	800a128 <xTaskCreate>
 8003596:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00b      	beq.n	80035b6 <main+0x146>
        __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61fb      	str	r3, [r7, #28]
    }
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <main+0x142>

  // Create accelerometer task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 80035b6:	4b66      	ldr	r3, [pc, #408]	@ (8003750 <main+0x2e0>)
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2302      	movs	r3, #2
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	22fa      	movs	r2, #250	@ 0xfa
 80035c2:	4964      	ldr	r1, [pc, #400]	@ (8003754 <main+0x2e4>)
 80035c4:	4864      	ldr	r0, [pc, #400]	@ (8003758 <main+0x2e8>)
 80035c6:	f006 fdaf 	bl	800a128 <xTaskCreate>
 80035ca:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d00b      	beq.n	80035ea <main+0x17a>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	61bb      	str	r3, [r7, #24]
    }
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <main+0x176>

  // Create motor task and check that it was created successfully
  status = xTaskCreate(motor_task, "motor_task", 250, NULL, 2, &handle_motor_task);
 80035ea:	4b5c      	ldr	r3, [pc, #368]	@ (800375c <main+0x2ec>)
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2302      	movs	r3, #2
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	22fa      	movs	r2, #250	@ 0xfa
 80035f6:	495a      	ldr	r1, [pc, #360]	@ (8003760 <main+0x2f0>)
 80035f8:	485a      	ldr	r0, [pc, #360]	@ (8003764 <main+0x2f4>)
 80035fa:	f006 fd95 	bl	800a128 <xTaskCreate>
 80035fe:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	2b01      	cmp	r3, #1
 8003604:	d00b      	beq.n	800361e <main+0x1ae>
        __asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	617b      	str	r3, [r7, #20]
    }
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	e7fd      	b.n	800361a <main+0x1aa>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 800361e:	2200      	movs	r2, #0
 8003620:	2101      	movs	r1, #1
 8003622:	200a      	movs	r0, #10
 8003624:	f005 fe30 	bl	8009288 <xQueueGenericCreate>
 8003628:	4603      	mov	r3, r0
 800362a:	4a4f      	ldr	r2, [pc, #316]	@ (8003768 <main+0x2f8>)
 800362c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 800362e:	4b4e      	ldr	r3, [pc, #312]	@ (8003768 <main+0x2f8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <main+0x1de>
        __asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	613b      	str	r3, [r7, #16]
    }
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <main+0x1da>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 800364e:	2200      	movs	r2, #0
 8003650:	2104      	movs	r1, #4
 8003652:	200a      	movs	r0, #10
 8003654:	f005 fe18 	bl	8009288 <xQueueGenericCreate>
 8003658:	4603      	mov	r3, r0
 800365a:	4a44      	ldr	r2, [pc, #272]	@ (800376c <main+0x2fc>)
 800365c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <main+0x2fc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <main+0x20e>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	60fb      	str	r3, [r7, #12]
    }
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	e7fd      	b.n	800367a <main+0x20a>

  // Create an event group to synchronize accelerometer readings and LED triggers
  ledEventGroup = xEventGroupCreate();
 800367e:	f005 fb4d 	bl	8008d1c <xEventGroupCreate>
 8003682:	4603      	mov	r3, r0
 8003684:	4a3a      	ldr	r2, [pc, #232]	@ (8003770 <main+0x300>)
 8003686:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledEventGroup);
 8003688:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <main+0x300>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <main+0x238>
        __asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	60bb      	str	r3, [r7, #8]
    }
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <main+0x234>

  // Create a binary semaphore to synchronize RTC configuration and LED triggers
  rtcSemaphore = xSemaphoreCreateBinary();
 80036a8:	2203      	movs	r2, #3
 80036aa:	2100      	movs	r1, #0
 80036ac:	2001      	movs	r0, #1
 80036ae:	f005 fdeb 	bl	8009288 <xQueueGenericCreate>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <main+0x304>)
 80036b6:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != rtcSemaphore);
 80036b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <main+0x304>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <main+0x268>
        __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	607b      	str	r3, [r7, #4]
    }
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <main+0x264>

  // Create a binary semaphore to synchronize LEDs off after exiting RTC menu
  ledOffSemaphore = xSemaphoreCreateBinary();
 80036d8:	2203      	movs	r2, #3
 80036da:	2100      	movs	r1, #0
 80036dc:	2001      	movs	r0, #1
 80036de:	f005 fdd3 	bl	8009288 <xQueueGenericCreate>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a24      	ldr	r2, [pc, #144]	@ (8003778 <main+0x308>)
 80036e6:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledOffSemaphore);
 80036e8:	4b23      	ldr	r3, [pc, #140]	@ (8003778 <main+0x308>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <main+0x298>
        __asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	603b      	str	r3, [r7, #0]
    }
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <main+0x294>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8003708:	2300      	movs	r3, #0
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
 800370c:	e047      	b.n	800379e <main+0x32e>
 800370e:	bf00      	nop
 8003710:	e0001000 	.word	0xe0001000
 8003714:	2000174c 	.word	0x2000174c
 8003718:	08012904 	.word	0x08012904
 800371c:	080031a9 	.word	0x080031a9
 8003720:	20001750 	.word	0x20001750
 8003724:	08012914 	.word	0x08012914
 8003728:	080032c5 	.word	0x080032c5
 800372c:	20001754 	.word	0x20001754
 8003730:	08012920 	.word	0x08012920
 8003734:	080032f5 	.word	0x080032f5
 8003738:	20001758 	.word	0x20001758
 800373c:	0801292c 	.word	0x0801292c
 8003740:	08001639 	.word	0x08001639
 8003744:	2000175c 	.word	0x2000175c
 8003748:	08012938 	.word	0x08012938
 800374c:	08002ac9 	.word	0x08002ac9
 8003750:	20001760 	.word	0x20001760
 8003754:	08012944 	.word	0x08012944
 8003758:	08001095 	.word	0x08001095
 800375c:	20001764 	.word	0x20001764
 8003760:	08012958 	.word	0x08012958
 8003764:	08001e15 	.word	0x08001e15
 8003768:	2000176c 	.word	0x2000176c
 800376c:	20001768 	.word	0x20001768
 8003770:	20001784 	.word	0x20001784
 8003774:	20001788 	.word	0x20001788
 8003778:	2000178c 	.word	0x2000178c
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 800377c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377e:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <main+0x36c>)
 8003780:	9200      	str	r2, [sp, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003788:	4815      	ldr	r0, [pc, #84]	@ (80037e0 <main+0x370>)
 800378a:	f008 f853 	bl	800b834 <xTimerCreate>
 800378e:	4602      	mov	r2, r0
 8003790:	4914      	ldr	r1, [pc, #80]	@ (80037e4 <main+0x374>)
 8003792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8003798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379a:	3301      	adds	r3, #1
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	ddeb      	ble.n	800377c <main+0x30c>
  }

  // Create software timer for reporting motor speed
  motor_report_timer = xTimerCreate("motor_report_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, (void*)motor_report_callback);
 80037a4:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <main+0x378>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	2201      	movs	r2, #1
 80037ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037b0:	480e      	ldr	r0, [pc, #56]	@ (80037ec <main+0x37c>)
 80037b2:	f008 f83f 	bl	800b834 <xTimerCreate>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4a0d      	ldr	r2, [pc, #52]	@ (80037f0 <main+0x380>)
 80037ba:	6013      	str	r3, [r2, #0]

  // Start the timer interrupt for motor velocity calculation timer
  HAL_TIM_Base_Start_IT(&htim7);
 80037bc:	480d      	ldr	r0, [pc, #52]	@ (80037f4 <main+0x384>)
 80037be:	f003 fa2f 	bl	8006c20 <HAL_TIM_Base_Start_IT>

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80037c2:	2201      	movs	r2, #1
 80037c4:	490c      	ldr	r1, [pc, #48]	@ (80037f8 <main+0x388>)
 80037c6:	480d      	ldr	r0, [pc, #52]	@ (80037fc <main+0x38c>)
 80037c8:	f004 fb2d 	bl	8007e26 <HAL_UART_Receive_IT>

  // Start PWM generation
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80037cc:	2100      	movs	r1, #0
 80037ce:	480c      	ldr	r0, [pc, #48]	@ (8003800 <main+0x390>)
 80037d0:	f003 fae6 	bl	8006da0 <HAL_TIM_PWM_Start>

  // Start the kernel
  vTaskStartScheduler();
 80037d4:	f006 fe0c 	bl	800a3f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <main+0x368>
 80037dc:	08001ad9 	.word	0x08001ad9
 80037e0:	08012964 	.word	0x08012964
 80037e4:	20001770 	.word	0x20001770
 80037e8:	080023d1 	.word	0x080023d1
 80037ec:	08012970 	.word	0x08012970
 80037f0:	20001780 	.word	0x20001780
 80037f4:	200016bc 	.word	0x200016bc
 80037f8:	20001790 	.word	0x20001790
 80037fc:	20001704 	.word	0x20001704
 8003800:	20001674 	.word	0x20001674

08003804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b094      	sub	sp, #80	@ 0x50
 8003808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800380a:	f107 0320 	add.w	r3, r7, #32
 800380e:	2230      	movs	r2, #48	@ 0x30
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f00b ff51 	bl	800f6ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <SystemClock_Config+0xd0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <SystemClock_Config+0xd0>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6413      	str	r3, [r2, #64]	@ 0x40
 8003838:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <SystemClock_Config+0xd0>)
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <SystemClock_Config+0xd4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a22      	ldr	r2, [pc, #136]	@ (80038d8 <SystemClock_Config+0xd4>)
 800384e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <SystemClock_Config+0xd4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003860:	230a      	movs	r3, #10
 8003862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003864:	2301      	movs	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003868:	2310      	movs	r3, #16
 800386a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800386c:	2301      	movs	r3, #1
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003870:	2302      	movs	r3, #2
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003878:	2308      	movs	r3, #8
 800387a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800387c:	2332      	movs	r3, #50	@ 0x32
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003880:	2304      	movs	r3, #4
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003884:	2307      	movs	r3, #7
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fae9 	bl	8004e64 <HAL_RCC_OscConfig>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003898:	f000 fbd2 	bl	8004040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389c:	230f      	movs	r3, #15
 800389e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a0:	2302      	movs	r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fd4a 	bl	8005354 <HAL_RCC_ClockConfig>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80038c6:	f000 fbbb 	bl	8004040 <Error_Handler>
  }
}
 80038ca:	bf00      	nop
 80038cc:	3750      	adds	r7, #80	@ 0x50
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000

080038dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <MX_RTC_Init+0x44>)
 80038e2:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <MX_RTC_Init+0x48>)
 80038e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <MX_RTC_Init+0x44>)
 80038e8:	2240      	movs	r2, #64	@ 0x40
 80038ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <MX_RTC_Init+0x44>)
 80038ee:	227f      	movs	r2, #127	@ 0x7f
 80038f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <MX_RTC_Init+0x44>)
 80038f4:	22ff      	movs	r2, #255	@ 0xff
 80038f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80038f8:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <MX_RTC_Init+0x44>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <MX_RTC_Init+0x44>)
 8003900:	2200      	movs	r2, #0
 8003902:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <MX_RTC_Init+0x44>)
 8003906:	2200      	movs	r2, #0
 8003908:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800390a:	4805      	ldr	r0, [pc, #20]	@ (8003920 <MX_RTC_Init+0x44>)
 800390c:	f002 f856 	bl	80059bc <HAL_RTC_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003916:	f000 fb93 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200015b4 	.word	0x200015b4
 8003924:	40002800 	.word	0x40002800

08003928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800392c:	4b17      	ldr	r3, [pc, #92]	@ (800398c <MX_SPI1_Init+0x64>)
 800392e:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <MX_SPI1_Init+0x68>)
 8003930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <MX_SPI1_Init+0x64>)
 8003934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800393a:	4b14      	ldr	r3, [pc, #80]	@ (800398c <MX_SPI1_Init+0x64>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003940:	4b12      	ldr	r3, [pc, #72]	@ (800398c <MX_SPI1_Init+0x64>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003946:	4b11      	ldr	r3, [pc, #68]	@ (800398c <MX_SPI1_Init+0x64>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800394c:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <MX_SPI1_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003952:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <MX_SPI1_Init+0x64>)
 8003954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395a:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <MX_SPI1_Init+0x64>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <MX_SPI1_Init+0x64>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <MX_SPI1_Init+0x64>)
 8003968:	2200      	movs	r2, #0
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	4b07      	ldr	r3, [pc, #28]	@ (800398c <MX_SPI1_Init+0x64>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <MX_SPI1_Init+0x64>)
 8003974:	220a      	movs	r2, #10
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003978:	4804      	ldr	r0, [pc, #16]	@ (800398c <MX_SPI1_Init+0x64>)
 800397a:	f002 fb2b 	bl	8005fd4 <HAL_SPI_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003984:	f000 fb5c 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200015d4 	.word	0x200015d4
 8003990:	40013000 	.word	0x40013000

08003994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b092      	sub	sp, #72	@ 0x48
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
 80039b4:	615a      	str	r2, [r3, #20]
 80039b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	2220      	movs	r2, #32
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f00b fe7b 	bl	800f6ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039c4:	4b33      	ldr	r3, [pc, #204]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039c6:	4a34      	ldr	r2, [pc, #208]	@ (8003a98 <MX_TIM1_Init+0x104>)
 80039c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80039ca:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d0:	4b30      	ldr	r3, [pc, #192]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039f0:	4828      	ldr	r0, [pc, #160]	@ (8003a94 <MX_TIM1_Init+0x100>)
 80039f2:	f003 f985 	bl	8006d00 <HAL_TIM_PWM_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80039fc:	f000 fb20 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4821      	ldr	r0, [pc, #132]	@ (8003a94 <MX_TIM1_Init+0x100>)
 8003a10:	f004 f84c 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003a1a:	f000 fb11 	bl	8004040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a1e:	2360      	movs	r3, #96	@ 0x60
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4814      	ldr	r0, [pc, #80]	@ (8003a94 <MX_TIM1_Init+0x100>)
 8003a44:	f003 fb64 	bl	8007110 <HAL_TIM_PWM_ConfigChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003a4e:	f000 faf7 	bl	8004040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4807      	ldr	r0, [pc, #28]	@ (8003a94 <MX_TIM1_Init+0x100>)
 8003a76:	f004 f895 	bl	8007ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003a80:	f000 fade 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a84:	4803      	ldr	r0, [pc, #12]	@ (8003a94 <MX_TIM1_Init+0x100>)
 8003a86:	f000 fbdb 	bl	8004240 <HAL_TIM_MspPostInit>

}
 8003a8a:	bf00      	nop
 8003a8c:	3748      	adds	r7, #72	@ 0x48
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000162c 	.word	0x2000162c
 8003a98:	40010000 	.word	0x40010000

08003a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	@ 0x38
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab0:	f107 0320 	add.w	r3, r7, #32
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
 8003ac8:	615a      	str	r2, [r3, #20]
 8003aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003ace:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <MX_TIM3_Init+0xec>)
 8003ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003ad4:	2218      	movs	r2, #24
 8003ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003ade:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003ae0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae6:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aec:	4b25      	ldr	r3, [pc, #148]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003aee:	2280      	movs	r2, #128	@ 0x80
 8003af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003af2:	4824      	ldr	r0, [pc, #144]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003af4:	f003 f844 	bl	8006b80 <HAL_TIM_Base_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003afe:	f000 fa9f 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	481d      	ldr	r0, [pc, #116]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003b10:	f003 fbc0 	bl	8007294 <HAL_TIM_ConfigClockSource>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003b1a:	f000 fa91 	bl	8004040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b1e:	4819      	ldr	r0, [pc, #100]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003b20:	f003 f8ee 	bl	8006d00 <HAL_TIM_PWM_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003b2a:	f000 fa89 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b36:	f107 0320 	add.w	r3, r7, #32
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4811      	ldr	r0, [pc, #68]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003b3e:	f003 ffb5 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b48:	f000 fa7a 	bl	8004040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b4c:	2360      	movs	r3, #96	@ 0x60
 8003b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8003b50:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8003b54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	2200      	movs	r2, #0
 8003b62:	4619      	mov	r1, r3
 8003b64:	4807      	ldr	r0, [pc, #28]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003b66:	f003 fad3 	bl	8007110 <HAL_TIM_PWM_ConfigChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003b70:	f000 fa66 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b74:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <MX_TIM3_Init+0xe8>)
 8003b76:	f000 fb63 	bl	8004240 <HAL_TIM_MspPostInit>

}
 8003b7a:	bf00      	nop
 8003b7c:	3738      	adds	r7, #56	@ 0x38
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20001674 	.word	0x20001674
 8003b88:	40000400 	.word	0x40000400

08003b8c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b92:	463b      	mov	r3, r7
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003b9c:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <MX_TIM7_Init+0x68>)
 8003b9e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2499;
 8003ba0:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003ba2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8003ba6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003bb0:	2263      	movs	r2, #99	@ 0x63
 8003bb2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003bba:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003bbc:	f002 ffe0 	bl	8006b80 <HAL_TIM_Base_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003bc6:	f000 fa3b 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003bd2:	463b      	mov	r3, r7
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4806      	ldr	r0, [pc, #24]	@ (8003bf0 <MX_TIM7_Init+0x64>)
 8003bd8:	f003 ff68 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003be2:	f000 fa2d 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200016bc 	.word	0x200016bc
 8003bf4:	40001400 	.word	0x40001400

08003bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <MX_USART2_UART_Init+0x50>)
 8003c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2e:	4805      	ldr	r0, [pc, #20]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c30:	f004 f81e 	bl	8007c70 <HAL_UART_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c3a:	f000 fa01 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20001704 	.word	0x20001704
 8003c48:	40004400 	.word	0x40004400

08003c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	@ 0x30
 8003c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	4bac      	ldr	r3, [pc, #688]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	4aab      	ldr	r2, [pc, #684]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c6c:	f043 0310 	orr.w	r3, r3, #16
 8003c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c72:	4ba9      	ldr	r3, [pc, #676]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	4ba5      	ldr	r3, [pc, #660]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	4aa4      	ldr	r2, [pc, #656]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8e:	4ba2      	ldr	r3, [pc, #648]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	4a9d      	ldr	r2, [pc, #628]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003caa:	4b9b      	ldr	r3, [pc, #620]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b97      	ldr	r3, [pc, #604]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	4a96      	ldr	r2, [pc, #600]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc6:	4b94      	ldr	r3, [pc, #592]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b90      	ldr	r3, [pc, #576]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a8f      	ldr	r2, [pc, #572]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	4b89      	ldr	r3, [pc, #548]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4a88      	ldr	r2, [pc, #544]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	4b86      	ldr	r3, [pc, #536]	@ (8003f18 <MX_GPIO_Init+0x2cc>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	4883      	ldr	r0, [pc, #524]	@ (8003f1c <MX_GPIO_Init+0x2d0>)
 8003d10:	f001 f85c 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d14:	2201      	movs	r2, #1
 8003d16:	2101      	movs	r1, #1
 8003d18:	4881      	ldr	r0, [pc, #516]	@ (8003f20 <MX_GPIO_Init+0x2d4>)
 8003d1a:	f001 f857 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003d24:	487f      	ldr	r0, [pc, #508]	@ (8003f24 <MX_GPIO_Init+0x2d8>)
 8003d26:	f001 f851 	bl	8004dcc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003d30:	487b      	ldr	r0, [pc, #492]	@ (8003f20 <MX_GPIO_Init+0x2d4>)
 8003d32:	f001 f84b 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003d36:	2308      	movs	r3, #8
 8003d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d42:	2300      	movs	r3, #0
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003d46:	f107 031c 	add.w	r3, r7, #28
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4873      	ldr	r0, [pc, #460]	@ (8003f1c <MX_GPIO_Init+0x2d0>)
 8003d4e:	f000 fe89 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8003d52:	2350      	movs	r3, #80	@ 0x50
 8003d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	4619      	mov	r1, r3
 8003d66:	486d      	ldr	r0, [pc, #436]	@ (8003f1c <MX_GPIO_Init+0x2d0>)
 8003d68:	f000 fe7c 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8003d6c:	f240 3301 	movw	r3, #769	@ 0x301
 8003d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	4619      	mov	r1, r3
 8003d84:	4866      	ldr	r0, [pc, #408]	@ (8003f20 <MX_GPIO_Init+0x2d4>)
 8003d86:	f000 fe6d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d9a:	2305      	movs	r3, #5
 8003d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4619      	mov	r1, r3
 8003da4:	485e      	ldr	r0, [pc, #376]	@ (8003f20 <MX_GPIO_Init+0x2d4>)
 8003da6:	f000 fe5d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003db8:	f107 031c 	add.w	r3, r7, #28
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	485a      	ldr	r0, [pc, #360]	@ (8003f28 <MX_GPIO_Init+0x2dc>)
 8003dc0:	f000 fe50 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4852      	ldr	r0, [pc, #328]	@ (8003f28 <MX_GPIO_Init+0x2dc>)
 8003de0:	f000 fe40 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003de4:	2304      	movs	r3, #4
 8003de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de8:	2300      	movs	r3, #0
 8003dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	4619      	mov	r1, r3
 8003df6:	484d      	ldr	r0, [pc, #308]	@ (8003f2c <MX_GPIO_Init+0x2e0>)
 8003df8:	f000 fe34 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4844      	ldr	r0, [pc, #272]	@ (8003f2c <MX_GPIO_Init+0x2e0>)
 8003e1a:	f000 fe23 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003e1e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8003e22:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e24:	2301      	movs	r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	4619      	mov	r1, r3
 8003e36:	483b      	ldr	r0, [pc, #236]	@ (8003f24 <MX_GPIO_Init+0x2d8>)
 8003e38:	f000 fe14 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003e3c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e4e:	2306      	movs	r3, #6
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e52:	f107 031c 	add.w	r3, r7, #28
 8003e56:	4619      	mov	r1, r3
 8003e58:	4831      	ldr	r0, [pc, #196]	@ (8003f20 <MX_GPIO_Init+0x2d4>)
 8003e5a:	f000 fe03 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e64:	2300      	movs	r3, #0
 8003e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003e6c:	f107 031c 	add.w	r3, r7, #28
 8003e70:	4619      	mov	r1, r3
 8003e72:	482d      	ldr	r0, [pc, #180]	@ (8003f28 <MX_GPIO_Init+0x2dc>)
 8003e74:	f000 fdf6 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003e78:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e86:	2300      	movs	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4619      	mov	r1, r3
 8003e94:	4824      	ldr	r0, [pc, #144]	@ (8003f28 <MX_GPIO_Init+0x2dc>)
 8003e96:	f000 fde5 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	481d      	ldr	r0, [pc, #116]	@ (8003f24 <MX_GPIO_Init+0x2d8>)
 8003eae:	f000 fdd9 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003eb2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eb8:	2312      	movs	r3, #18
 8003eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4817      	ldr	r0, [pc, #92]	@ (8003f2c <MX_GPIO_Init+0x2e0>)
 8003ed0:	f000 fdc8 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003ed8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	480c      	ldr	r0, [pc, #48]	@ (8003f1c <MX_GPIO_Init+0x2d0>)
 8003eea:	f000 fdbb 	bl	8004a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	f000 fcfa 	bl	80048ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003ef8:	200a      	movs	r0, #10
 8003efa:	f000 fd13 	bl	8004924 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	2017      	movs	r0, #23
 8003f04:	f000 fcf2 	bl	80048ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f08:	2017      	movs	r0, #23
 8003f0a:	f000 fd0b 	bl	8004924 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f0e:	bf00      	nop
 8003f10:	3730      	adds	r7, #48	@ 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400

08003f30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e002      	b.n	8003f44 <HAL_UART_RxCpltCallback+0x14>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003f4a:	d3f8      	bcc.n	8003f3e <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_UART_RxCpltCallback+0x98>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f006 f85c 	bl	800a00e <xQueueIsQueueFullFromISR>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_UART_RxCpltCallback+0x98>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	2200      	movs	r2, #0
 8003f64:	4919      	ldr	r1, [pc, #100]	@ (8003fcc <HAL_UART_RxCpltCallback+0x9c>)
 8003f66:	f005 fb45 	bl	80095f4 <xQueueGenericSendFromISR>
 8003f6a:	e013      	b.n	8003f94 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8003f6c:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <HAL_UART_RxCpltCallback+0x9c>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d10e      	bne.n	8003f94 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8003f76:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <HAL_UART_RxCpltCallback+0x98>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f107 010b 	add.w	r1, r7, #11
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f005 fe4d 	bl	8009c20 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_UART_RxCpltCallback+0x98>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	490f      	ldr	r1, [pc, #60]	@ (8003fcc <HAL_UART_RxCpltCallback+0x9c>)
 8003f90:	f005 fb30 	bl	80095f4 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8003f94:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_UART_RxCpltCallback+0x9c>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b0a      	cmp	r3, #10
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_UART_RxCpltCallback+0xa0>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f007 fa7a 	bl	800b4a8 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	4905      	ldr	r1, [pc, #20]	@ (8003fcc <HAL_UART_RxCpltCallback+0x9c>)
 8003fb8:	4806      	ldr	r0, [pc, #24]	@ (8003fd4 <HAL_UART_RxCpltCallback+0xa4>)
 8003fba:	f003 ff34 	bl	8007e26 <HAL_UART_Receive_IT>

}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000176c 	.word	0x2000176c
 8003fcc:	20001790 	.word	0x20001790
 8003fd0:	20001750 	.word	0x20001750
 8003fd4:	20001704 	.word	0x20001704

08003fd8 <HAL_GPIO_EXTI_Callback>:

// This function is called from the GPIO interrupt handler, so it executes in the interrupt context
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_A_GPIO_Pin) {
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d103      	bne.n	8003ff0 <HAL_GPIO_EXTI_Callback+0x18>
		motor_gpio_callback(GPIO_Pin);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f930 	bl	8002250 <motor_gpio_callback>
	}
	if (GPIO_Pin == ENCODER_B_GPIO_Pin) {
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d103      	bne.n	8003ffe <HAL_GPIO_EXTI_Callback+0x26>
		motor_gpio_callback(GPIO_Pin);
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe f929 	bl	8002250 <motor_gpio_callback>
	}
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800401a:	f000 fb8f 	bl	800473c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a06      	ldr	r2, [pc, #24]	@ (800403c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d102      	bne.n	800402e <HAL_TIM_PeriodElapsedCallback+0x26>
	motor_timer_callback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fe f965 	bl	80022f8 <motor_timer_callback>
  }
  /* USER CODE END Callback 1 */
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40001000 	.word	0x40001000
 800403c:	40001400 	.word	0x40001400

08004040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
}
 8004046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <Error_Handler+0x8>

0800404c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <HAL_MspInit+0x4c>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	4a0f      	ldr	r2, [pc, #60]	@ (8004098 <HAL_MspInit+0x4c>)
 800405c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004060:	6453      	str	r3, [r2, #68]	@ 0x44
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_MspInit+0x4c>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <HAL_MspInit+0x4c>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	4a08      	ldr	r2, [pc, #32]	@ (8004098 <HAL_MspInit+0x4c>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	@ 0x40
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_MspInit+0x4c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800408a:	f008 f86f 	bl	800c16c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <HAL_RTC_MspInit+0x4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d111      	bne.n	80040e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80040bc:	2302      	movs	r3, #2
 80040be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80040c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040c4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fb94 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80040d6:	f7ff ffb3 	bl	8004040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80040da:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <HAL_RTC_MspInit+0x50>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40002800 	.word	0x40002800
 80040ec:	42470e3c 	.word	0x42470e3c

080040f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <HAL_SPI_MspInit+0x84>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12b      	bne.n	800416a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b18      	ldr	r3, [pc, #96]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 800411c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004120:	6453      	str	r3, [r2, #68]	@ 0x44
 8004122:	4b15      	ldr	r3, [pc, #84]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6313      	str	r3, [r2, #48]	@ 0x30
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800414a:	23e0      	movs	r3, #224	@ 0xe0
 800414c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800415a:	2305      	movs	r3, #5
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	4805      	ldr	r0, [pc, #20]	@ (800417c <HAL_SPI_MspInit+0x8c>)
 8004166:	f000 fc7d 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	@ 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40013000 	.word	0x40013000
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000

08004180 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <HAL_TIM_PWM_MspInit+0x3c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <HAL_TIM_PWM_MspInit+0x40>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419a:	4a09      	ldr	r2, [pc, #36]	@ (80041c0 <HAL_TIM_PWM_MspInit+0x40>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a2:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <HAL_TIM_PWM_MspInit+0x40>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a18      	ldr	r2, [pc, #96]	@ (8004234 <HAL_TIM_Base_MspInit+0x70>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80041f2:	e01a      	b.n	800422a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a10      	ldr	r2, [pc, #64]	@ (800423c <HAL_TIM_Base_MspInit+0x78>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d115      	bne.n	800422a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 8004208:	f043 0320 	orr.w	r3, r3, #32
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_TIM_Base_MspInit+0x74>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2100      	movs	r1, #0
 800421e:	2037      	movs	r0, #55	@ 0x37
 8004220:	f000 fb64 	bl	80048ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004224:	2037      	movs	r0, #55	@ 0x37
 8004226:	f000 fb7d 	bl	8004924 <HAL_NVIC_EnableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40000400 	.word	0x40000400
 8004238:	40023800 	.word	0x40023800
 800423c:	40001400 	.word	0x40001400

08004240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	@ 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a24      	ldr	r2, [pc, #144]	@ (80042f0 <HAL_TIM_MspPostInit+0xb0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d11f      	bne.n	80042a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	4b23      	ldr	r3, [pc, #140]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6313      	str	r3, [r2, #48]	@ 0x30
 8004272:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800427e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4619      	mov	r1, r3
 800429a:	4817      	ldr	r0, [pc, #92]	@ (80042f8 <HAL_TIM_MspPostInit+0xb8>)
 800429c:	f000 fbe2 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80042a0:	e022      	b.n	80042e8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a15      	ldr	r2, [pc, #84]	@ (80042fc <HAL_TIM_MspPostInit+0xbc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d11d      	bne.n	80042e8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	4a0f      	ldr	r2, [pc, #60]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80042bc:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <HAL_TIM_MspPostInit+0xb4>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042c8:	2340      	movs	r3, #64	@ 0x40
 80042ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d8:	2302      	movs	r3, #2
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	4619      	mov	r1, r3
 80042e2:	4807      	ldr	r0, [pc, #28]	@ (8004300 <HAL_TIM_MspPostInit+0xc0>)
 80042e4:	f000 fbbe 	bl	8004a64 <HAL_GPIO_Init>
}
 80042e8:	bf00      	nop
 80042ea:	3728      	adds	r7, #40	@ 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40000400 	.word	0x40000400
 8004300:	40020800 	.word	0x40020800

08004304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	@ 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <HAL_UART_MspInit+0x94>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d133      	bne.n	800438e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_UART_MspInit+0x98>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_UART_MspInit+0x98>)
 8004330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004334:	6413      	str	r3, [r2, #64]	@ 0x40
 8004336:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_UART_MspInit+0x98>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_UART_MspInit+0x98>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	4a14      	ldr	r2, [pc, #80]	@ (800439c <HAL_UART_MspInit+0x98>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6313      	str	r3, [r2, #48]	@ 0x30
 8004352:	4b12      	ldr	r3, [pc, #72]	@ (800439c <HAL_UART_MspInit+0x98>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800435e:	230c      	movs	r3, #12
 8004360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436a:	2303      	movs	r3, #3
 800436c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800436e:	2307      	movs	r3, #7
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	4619      	mov	r1, r3
 8004378:	4809      	ldr	r0, [pc, #36]	@ (80043a0 <HAL_UART_MspInit+0x9c>)
 800437a:	f000 fb73 	bl	8004a64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2106      	movs	r1, #6
 8004382:	2026      	movs	r0, #38	@ 0x26
 8004384:	f000 fab2 	bl	80048ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004388:	2026      	movs	r0, #38	@ 0x26
 800438a:	f000 facb 	bl	8004924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800438e:	bf00      	nop
 8004390:	3728      	adds	r7, #40	@ 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40004400 	.word	0x40004400
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020000 	.word	0x40020000

080043a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08e      	sub	sp, #56	@ 0x38
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	4b33      	ldr	r3, [pc, #204]	@ (8004488 <HAL_InitTick+0xe4>)
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	4a32      	ldr	r2, [pc, #200]	@ (8004488 <HAL_InitTick+0xe4>)
 80043be:	f043 0310 	orr.w	r3, r3, #16
 80043c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c4:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <HAL_InitTick+0xe4>)
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043d0:	f107 0210 	add.w	r2, r7, #16
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f9da 	bl	8005794 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043ea:	f001 f9ab 	bl	8005744 <HAL_RCC_GetPCLK1Freq>
 80043ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80043f0:	e004      	b.n	80043fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80043f2:	f001 f9a7 	bl	8005744 <HAL_RCC_GetPCLK1Freq>
 80043f6:	4603      	mov	r3, r0
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fe:	4a23      	ldr	r2, [pc, #140]	@ (800448c <HAL_InitTick+0xe8>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	3b01      	subs	r3, #1
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800440a:	4b21      	ldr	r3, [pc, #132]	@ (8004490 <HAL_InitTick+0xec>)
 800440c:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <HAL_InitTick+0xf0>)
 800440e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004410:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <HAL_InitTick+0xec>)
 8004412:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004416:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_InitTick+0xec>)
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800441e:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <HAL_InitTick+0xec>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b1a      	ldr	r3, [pc, #104]	@ (8004490 <HAL_InitTick+0xec>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b19      	ldr	r3, [pc, #100]	@ (8004490 <HAL_InitTick+0xec>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004430:	4817      	ldr	r0, [pc, #92]	@ (8004490 <HAL_InitTick+0xec>)
 8004432:	f002 fba5 	bl	8006b80 <HAL_TIM_Base_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800443c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11b      	bne.n	800447c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004444:	4812      	ldr	r0, [pc, #72]	@ (8004490 <HAL_InitTick+0xec>)
 8004446:	f002 fbeb 	bl	8006c20 <HAL_TIM_Base_Start_IT>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004454:	2b00      	cmp	r3, #0
 8004456:	d111      	bne.n	800447c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004458:	2036      	movs	r0, #54	@ 0x36
 800445a:	f000 fa63 	bl	8004924 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d808      	bhi.n	8004476 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004464:	2200      	movs	r2, #0
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	2036      	movs	r0, #54	@ 0x36
 800446a:	f000 fa3f 	bl	80048ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800446e:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <HAL_InitTick+0xf4>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e002      	b.n	800447c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800447c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004480:	4618      	mov	r0, r3
 8004482:	3738      	adds	r7, #56	@ 0x38
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	431bde83 	.word	0x431bde83
 8004490:	20001794 	.word	0x20001794
 8004494:	40001000 	.word	0x40001000
 8004498:	200000cc 	.word	0x200000cc

0800449c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <NMI_Handler+0x4>

080044a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <HardFault_Handler+0x4>

080044ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <MemManage_Handler+0x4>

080044b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b8:	bf00      	nop
 80044ba:	e7fd      	b.n	80044b8 <BusFault_Handler+0x4>

080044bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <UsageFault_Handler+0x4>

080044c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80044d6:	2010      	movs	r0, #16
 80044d8:	f000 fcac 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044dc:	bf00      	nop
 80044de:	bd80      	pop	{r7, pc}

080044e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 80044e4:	2040      	movs	r0, #64	@ 0x40
 80044e6:	f000 fca5 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <USART2_IRQHandler+0x10>)
 80044f6:	f003 fcbb 	bl	8007e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20001704 	.word	0x20001704

08004504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <TIM6_DAC_IRQHandler+0x10>)
 800450a:	f002 fd11 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001794 	.word	0x20001794

08004518 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800451c:	4802      	ldr	r0, [pc, #8]	@ (8004528 <TIM7_IRQHandler+0x10>)
 800451e:	f002 fd07 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200016bc 	.word	0x200016bc

0800452c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return 1;
 8004530:	2301      	movs	r3, #1
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <_kill>:

int _kill(int pid, int sig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004546:	f00b f907 	bl	800f758 <__errno>
 800454a:	4603      	mov	r3, r0
 800454c:	2216      	movs	r2, #22
 800454e:	601a      	str	r2, [r3, #0]
  return -1;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_exit>:

void _exit (int status)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffe7 	bl	800453c <_kill>
  while (1) {}    /* Make sure we hang here */
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <_exit+0x12>

08004572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e00a      	b.n	800459a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004584:	f3af 8000 	nop.w
 8004588:	4601      	mov	r1, r0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	60ba      	str	r2, [r7, #8]
 8004590:	b2ca      	uxtb	r2, r1
 8004592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	dbf0      	blt.n	8004584 <_read+0x12>
  }

  return len;
 80045a2:	687b      	ldr	r3, [r7, #4]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045d4:	605a      	str	r2, [r3, #4]
  return 0;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_isatty>:

int _isatty(int file)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045ec:	2301      	movs	r3, #1
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <_sbrk+0x5c>)
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <_sbrk+0x60>)
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004628:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <_sbrk+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <_sbrk+0x64>)
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <_sbrk+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d207      	bcs.n	8004654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004644:	f00b f888 	bl	800f758 <__errno>
 8004648:	4603      	mov	r3, r0
 800464a:	220c      	movs	r2, #12
 800464c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004652:	e009      	b.n	8004668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004654:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800465a:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	4a05      	ldr	r2, [pc, #20]	@ (8004678 <_sbrk+0x64>)
 8004664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20020000 	.word	0x20020000
 8004674:	00000400 	.word	0x00000400
 8004678:	200017dc 	.word	0x200017dc
 800467c:	2001c150 	.word	0x2001c150

08004680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <SystemInit+0x20>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <SystemInit+0x20>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80046a8:	f7ff ffea 	bl	8004680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046ac:	480c      	ldr	r0, [pc, #48]	@ (80046e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046ae:	490d      	ldr	r1, [pc, #52]	@ (80046e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046b0:	4a0d      	ldr	r2, [pc, #52]	@ (80046e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b4:	e002      	b.n	80046bc <LoopCopyDataInit>

080046b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ba:	3304      	adds	r3, #4

080046bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046c0:	d3f9      	bcc.n	80046b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046c2:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046c4:	4c0a      	ldr	r4, [pc, #40]	@ (80046f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c8:	e001      	b.n	80046ce <LoopFillZerobss>

080046ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046cc:	3204      	adds	r2, #4

080046ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046d0:	d3fb      	bcc.n	80046ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046d2:	f00b f847 	bl	800f764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046d6:	f7fe fecb 	bl	8003470 <main>
  bx  lr    
 80046da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80046e8:	08012e68 	.word	0x08012e68
  ldr r2, =_sbss
 80046ec:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80046f0:	2001c150 	.word	0x2001c150

080046f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046f4:	e7fe      	b.n	80046f4 <ADC_IRQHandler>
	...

080046f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_Init+0x40>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <HAL_Init+0x40>)
 8004702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_Init+0x40>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0a      	ldr	r2, [pc, #40]	@ (8004738 <HAL_Init+0x40>)
 800470e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004714:	4b08      	ldr	r3, [pc, #32]	@ (8004738 <HAL_Init+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a07      	ldr	r2, [pc, #28]	@ (8004738 <HAL_Init+0x40>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004720:	2003      	movs	r0, #3
 8004722:	f000 f8d8 	bl	80048d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004726:	200f      	movs	r0, #15
 8004728:	f7ff fe3c 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800472c:	f7ff fc8e 	bl	800404c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00

0800473c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_IncTick+0x20>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_IncTick+0x24>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4413      	add	r3, r2
 800474c:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <HAL_IncTick+0x24>)
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	200000d0 	.word	0x200000d0
 8004760:	200017e0 	.word	0x200017e0

08004764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return uwTick;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_GetTick+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	200017e0 	.word	0x200017e0

0800477c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800478c:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <__NVIC_SetPriorityGrouping+0x44>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004798:	4013      	ands	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ae:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <__NVIC_SetPriorityGrouping+0x44>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	60d3      	str	r3, [r2, #12]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__NVIC_GetPriorityGrouping+0x18>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 0307 	and.w	r3, r3, #7
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	db0b      	blt.n	800480a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	f003 021f 	and.w	r2, r3, #31
 80047f8:	4907      	ldr	r1, [pc, #28]	@ (8004818 <__NVIC_EnableIRQ+0x38>)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2001      	movs	r0, #1
 8004802:	fa00 f202 	lsl.w	r2, r0, r2
 8004806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	e000e100 	.word	0xe000e100

0800481c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db0a      	blt.n	8004846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	490c      	ldr	r1, [pc, #48]	@ (8004868 <__NVIC_SetPriority+0x4c>)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	440b      	add	r3, r1
 8004840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004844:	e00a      	b.n	800485c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4908      	ldr	r1, [pc, #32]	@ (800486c <__NVIC_SetPriority+0x50>)
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	3b04      	subs	r3, #4
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	440b      	add	r3, r1
 800485a:	761a      	strb	r2, [r3, #24]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000e100 	.word	0xe000e100
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	@ 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f1c3 0307 	rsb	r3, r3, #7
 800488a:	2b04      	cmp	r3, #4
 800488c:	bf28      	it	cs
 800488e:	2304      	movcs	r3, #4
 8004890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3304      	adds	r3, #4
 8004896:	2b06      	cmp	r3, #6
 8004898:	d902      	bls.n	80048a0 <NVIC_EncodePriority+0x30>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3b03      	subs	r3, #3
 800489e:	e000      	b.n	80048a2 <NVIC_EncodePriority+0x32>
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	401a      	ands	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	43d9      	mvns	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	4313      	orrs	r3, r2
         );
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	@ 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff4c 	bl	800477c <__NVIC_SetPriorityGrouping>
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048fe:	f7ff ff61 	bl	80047c4 <__NVIC_GetPriorityGrouping>
 8004902:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6978      	ldr	r0, [r7, #20]
 800490a:	f7ff ffb1 	bl	8004870 <NVIC_EncodePriority>
 800490e:	4602      	mov	r2, r0
 8004910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ff80 	bl	800481c <__NVIC_SetPriority>
}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ff54 	bl	80047e0 <__NVIC_EnableIRQ>
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800494e:	f7ff ff09 	bl	8004764 <HAL_GetTick>
 8004952:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d008      	beq.n	8004972 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2280      	movs	r2, #128	@ 0x80
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e052      	b.n	8004a18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0216 	bic.w	r2, r2, #22
 8004980:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004990:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <HAL_DMA_Abort+0x62>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0208 	bic.w	r2, r2, #8
 80049b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c2:	e013      	b.n	80049ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c4:	f7ff fece 	bl	8004764 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d90c      	bls.n	80049ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2203      	movs	r2, #3
 80049dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e015      	b.n	8004a18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e4      	bne.n	80049c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	223f      	movs	r2, #63	@ 0x3f
 8004a00:	409a      	lsls	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d004      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2280      	movs	r2, #128	@ 0x80
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e00c      	b.n	8004a58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2205      	movs	r2, #5
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	@ 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e16b      	b.n	8004d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 815a 	bne.w	8004d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d130      	bne.n	8004b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aec:	2201      	movs	r2, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0201 	and.w	r2, r3, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d017      	beq.n	8004b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d123      	bne.n	8004ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	220f      	movs	r2, #15
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80b4 	beq.w	8004d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b60      	ldr	r3, [pc, #384]	@ (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	4a5b      	ldr	r2, [pc, #364]	@ (8004d74 <HAL_GPIO_Init+0x310>)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_GPIO_Init+0x314>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02b      	beq.n	8004c8a <HAL_GPIO_Init+0x226>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a51      	ldr	r2, [pc, #324]	@ (8004d7c <HAL_GPIO_Init+0x318>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d025      	beq.n	8004c86 <HAL_GPIO_Init+0x222>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a50      	ldr	r2, [pc, #320]	@ (8004d80 <HAL_GPIO_Init+0x31c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <HAL_GPIO_Init+0x21e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a4f      	ldr	r2, [pc, #316]	@ (8004d84 <HAL_GPIO_Init+0x320>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d019      	beq.n	8004c7e <HAL_GPIO_Init+0x21a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d88 <HAL_GPIO_Init+0x324>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_GPIO_Init+0x216>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4d      	ldr	r2, [pc, #308]	@ (8004d8c <HAL_GPIO_Init+0x328>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00d      	beq.n	8004c76 <HAL_GPIO_Init+0x212>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004d90 <HAL_GPIO_Init+0x32c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4b      	ldr	r2, [pc, #300]	@ (8004d94 <HAL_GPIO_Init+0x330>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_GPIO_Init+0x20a>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	@ (8004d74 <HAL_GPIO_Init+0x310>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a32      	ldr	r2, [pc, #200]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a27      	ldr	r2, [pc, #156]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d22:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4c:	4a12      	ldr	r2, [pc, #72]	@ (8004d98 <HAL_GPIO_Init+0x334>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae90 	bls.w	8004a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	@ 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43d9      	mvns	r1, r3
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	400b      	ands	r3, r1
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	@ (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff f8c0 	bl	8003fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40013c00 	.word	0x40013c00

08004e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e267      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d075      	beq.n	8004f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e82:	4b88      	ldr	r3, [pc, #544]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8e:	4b85      	ldr	r3, [pc, #532]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d112      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9a:	4b82      	ldr	r3, [pc, #520]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05b      	beq.n	8004f6c <HAL_RCC_OscConfig+0x108>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d157      	bne.n	8004f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e242      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d106      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x74>
 8004eca:	4b76      	ldr	r3, [pc, #472]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a75      	ldr	r2, [pc, #468]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e01d      	b.n	8004f14 <HAL_RCC_OscConfig+0xb0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x98>
 8004ee2:	4b70      	ldr	r3, [pc, #448]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b6d      	ldr	r3, [pc, #436]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0xb0>
 8004efc:	4b69      	ldr	r3, [pc, #420]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a68      	ldr	r2, [pc, #416]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b66      	ldr	r3, [pc, #408]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a65      	ldr	r2, [pc, #404]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7ff fc22 	bl	8004764 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f24:	f7ff fc1e 	bl	8004764 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e207      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b5b      	ldr	r3, [pc, #364]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0xc0>
 8004f42:	e014      	b.n	8004f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7ff fc0e 	bl	8004764 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7ff fc0a 	bl	8004764 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	@ 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1f3      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5e:	4b51      	ldr	r3, [pc, #324]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0xe8>
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d063      	beq.n	8005042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f86:	4b47      	ldr	r3, [pc, #284]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d11c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b44      	ldr	r3, [pc, #272]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d116      	bne.n	8004fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	4b41      	ldr	r3, [pc, #260]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x152>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e1c7      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	e03a      	b.n	8005042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	4b34      	ldr	r3, [pc, #208]	@ (80050a8 <HAL_RCC_OscConfig+0x244>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7ff fbc3 	bl	8004764 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7ff fbbf 	bl	8004764 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1a8      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b28      	ldr	r3, [pc, #160]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4925      	ldr	r1, [pc, #148]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e015      	b.n	8005042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <HAL_RCC_OscConfig+0x244>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7ff fba2 	bl	8004764 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005024:	f7ff fb9e 	bl	8004764 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e187      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d036      	beq.n	80050bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b15      	ldr	r3, [pc, #84]	@ (80050ac <HAL_RCC_OscConfig+0x248>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7ff fb82 	bl	8004764 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005064:	f7ff fb7e 	bl	8004764 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e167      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x200>
 8005082:	e01b      	b.n	80050bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <HAL_RCC_OscConfig+0x248>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508a:	f7ff fb6b 	bl	8004764 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	e00e      	b.n	80050b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7ff fb67 	bl	8004764 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d907      	bls.n	80050b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e150      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
 80050a4:	40023800 	.word	0x40023800
 80050a8:	42470000 	.word	0x42470000
 80050ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	4b88      	ldr	r3, [pc, #544]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ea      	bne.n	8005092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8097 	beq.w	80051f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ce:	4b81      	ldr	r3, [pc, #516]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	4b7d      	ldr	r3, [pc, #500]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ea:	4b7a      	ldr	r3, [pc, #488]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	4b77      	ldr	r3, [pc, #476]	@ (80052d8 <HAL_RCC_OscConfig+0x474>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d118      	bne.n	8005138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005106:	4b74      	ldr	r3, [pc, #464]	@ (80052d8 <HAL_RCC_OscConfig+0x474>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a73      	ldr	r2, [pc, #460]	@ (80052d8 <HAL_RCC_OscConfig+0x474>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005112:	f7ff fb27 	bl	8004764 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7ff fb23 	bl	8004764 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e10c      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	4b6a      	ldr	r3, [pc, #424]	@ (80052d8 <HAL_RCC_OscConfig+0x474>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x2ea>
 8005140:	4b64      	ldr	r3, [pc, #400]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005144:	4a63      	ldr	r2, [pc, #396]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	@ 0x70
 800514c:	e01c      	b.n	8005188 <HAL_RCC_OscConfig+0x324>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b05      	cmp	r3, #5
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x30c>
 8005156:	4b5f      	ldr	r3, [pc, #380]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	4a5e      	ldr	r2, [pc, #376]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
 8005162:	4b5c      	ldr	r3, [pc, #368]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	4a5b      	ldr	r2, [pc, #364]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6713      	str	r3, [r2, #112]	@ 0x70
 800516e:	e00b      	b.n	8005188 <HAL_RCC_OscConfig+0x324>
 8005170:	4b58      	ldr	r3, [pc, #352]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	4a57      	ldr	r2, [pc, #348]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	@ 0x70
 800517c:	4b55      	ldr	r3, [pc, #340]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005180:	4a54      	ldr	r2, [pc, #336]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005182:	f023 0304 	bic.w	r3, r3, #4
 8005186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7ff fae8 	bl	8004764 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7ff fae4 	bl	8004764 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0cb      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4b49      	ldr	r3, [pc, #292]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ee      	beq.n	8005198 <HAL_RCC_OscConfig+0x334>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051bc:	f7ff fad2 	bl	8004764 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7ff face 	bl	8004764 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0b5      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	4b3e      	ldr	r3, [pc, #248]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ee      	bne.n	80051c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ec:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	4a38      	ldr	r2, [pc, #224]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80a1 	beq.w	8005344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005202:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	d05c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d141      	bne.n	800529a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b31      	ldr	r3, [pc, #196]	@ (80052dc <HAL_RCC_OscConfig+0x478>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7ff faa2 	bl	8004764 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005224:	f7ff fa9e 	bl	8004764 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e087      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	4b27      	ldr	r3, [pc, #156]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	3b01      	subs	r3, #1
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	491b      	ldr	r1, [pc, #108]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x478>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7ff fa77 	bl	8004764 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527a:	f7ff fa73 	bl	8004764 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e05c      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528c:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x416>
 8005298:	e054      	b.n	8005344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <HAL_RCC_OscConfig+0x478>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7ff fa60 	bl	8004764 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7ff fa5c 	bl	8004764 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e045      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCC_OscConfig+0x470>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x444>
 80052c6:	e03d      	b.n	8005344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e038      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40007000 	.word	0x40007000
 80052dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <HAL_RCC_OscConfig+0x4ec>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d028      	beq.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d121      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d11a      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005318:	4293      	cmp	r3, r2
 800531a:	d111      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d107      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800

08005354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0cc      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b68      	ldr	r3, [pc, #416]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d90c      	bls.n	8005390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b65      	ldr	r3, [pc, #404]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b63      	ldr	r3, [pc, #396]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0b8      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a8:	4b59      	ldr	r3, [pc, #356]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a58      	ldr	r2, [pc, #352]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c0:	4b53      	ldr	r3, [pc, #332]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a52      	ldr	r2, [pc, #328]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b50      	ldr	r3, [pc, #320]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	494d      	ldr	r1, [pc, #308]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d044      	beq.n	8005474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d119      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e07f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d003      	beq.n	8005412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540e:	2b03      	cmp	r3, #3
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e06f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	4b3b      	ldr	r3, [pc, #236]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e067      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4934      	ldr	r1, [pc, #208]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005444:	f7ff f98e 	bl	8004764 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7ff f98a 	bl	8004764 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e04f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b2b      	ldr	r3, [pc, #172]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b25      	ldr	r3, [pc, #148]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d20c      	bcs.n	800549c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b22      	ldr	r3, [pc, #136]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b20      	ldr	r3, [pc, #128]	@ (800550c <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e032      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b19      	ldr	r3, [pc, #100]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4916      	ldr	r1, [pc, #88]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c6:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	490e      	ldr	r1, [pc, #56]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054da:	f000 f821 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	490a      	ldr	r1, [pc, #40]	@ (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	5ccb      	ldrb	r3, [r1, r3]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054f6:	4b09      	ldr	r3, [pc, #36]	@ (800551c <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe ff52 	bl	80043a4 <HAL_InitTick>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40023c00 	.word	0x40023c00
 8005510:	40023800 	.word	0x40023800
 8005514:	08012a60 	.word	0x08012a60
 8005518:	200000c8 	.word	0x200000c8
 800551c:	200000cc 	.word	0x200000cc

08005520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005524:	b094      	sub	sp, #80	@ 0x50
 8005526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	647b      	str	r3, [r7, #68]	@ 0x44
 800552c:	2300      	movs	r3, #0
 800552e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005530:	2300      	movs	r3, #0
 8005532:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005538:	4b79      	ldr	r3, [pc, #484]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b08      	cmp	r3, #8
 8005542:	d00d      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x40>
 8005544:	2b08      	cmp	r3, #8
 8005546:	f200 80e1 	bhi.w	800570c <HAL_RCC_GetSysClockFreq+0x1ec>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x34>
 800554e:	2b04      	cmp	r3, #4
 8005550:	d003      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x3a>
 8005552:	e0db      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4b73      	ldr	r3, [pc, #460]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x204>)
 8005556:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005558:	e0db      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555a:	4b73      	ldr	r3, [pc, #460]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x208>)
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800555e:	e0d8      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005560:	4b6f      	ldr	r3, [pc, #444]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800556a:	4b6d      	ldr	r3, [pc, #436]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005576:	4b6a      	ldr	r3, [pc, #424]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	2200      	movs	r2, #0
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005580:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005588:	633b      	str	r3, [r7, #48]	@ 0x30
 800558a:	2300      	movs	r3, #0
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
 800558e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	f04f 0000 	mov.w	r0, #0
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	0159      	lsls	r1, r3, #5
 80055a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a4:	0150      	lsls	r0, r2, #5
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4621      	mov	r1, r4
 80055ac:	1a51      	subs	r1, r2, r1
 80055ae:	6139      	str	r1, [r7, #16]
 80055b0:	4629      	mov	r1, r5
 80055b2:	eb63 0301 	sbc.w	r3, r3, r1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c4:	4659      	mov	r1, fp
 80055c6:	018b      	lsls	r3, r1, #6
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ce:	4651      	mov	r1, sl
 80055d0:	018a      	lsls	r2, r1, #6
 80055d2:	4651      	mov	r1, sl
 80055d4:	ebb2 0801 	subs.w	r8, r2, r1
 80055d8:	4659      	mov	r1, fp
 80055da:	eb63 0901 	sbc.w	r9, r3, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	eb18 0303 	adds.w	r3, r8, r3
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	462b      	mov	r3, r5
 8005600:	eb49 0303 	adc.w	r3, r9, r3
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005612:	4629      	mov	r1, r5
 8005614:	024b      	lsls	r3, r1, #9
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800561c:	4621      	mov	r1, r4
 800561e:	024a      	lsls	r2, r1, #9
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005626:	2200      	movs	r2, #0
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800562a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005630:	f7fb fb82 	bl	8000d38 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4613      	mov	r3, r2
 800563a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800563c:	e058      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563e:	4b38      	ldr	r3, [pc, #224]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	4618      	mov	r0, r3
 8005648:	4611      	mov	r1, r2
 800564a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	2300      	movs	r3, #0
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
 8005654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	f04f 0000 	mov.w	r0, #0
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	0159      	lsls	r1, r3, #5
 8005666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800566a:	0150      	lsls	r0, r2, #5
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4641      	mov	r1, r8
 8005672:	ebb2 0a01 	subs.w	sl, r2, r1
 8005676:	4649      	mov	r1, r9
 8005678:	eb63 0b01 	sbc.w	fp, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800568c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005690:	ebb2 040a 	subs.w	r4, r2, sl
 8005694:	eb63 050b 	sbc.w	r5, r3, fp
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	00eb      	lsls	r3, r5, #3
 80056a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a6:	00e2      	lsls	r2, r4, #3
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
 80056ac:	4643      	mov	r3, r8
 80056ae:	18e3      	adds	r3, r4, r3
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb45 0303 	adc.w	r3, r5, r3
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056c6:	4629      	mov	r1, r5
 80056c8:	028b      	lsls	r3, r1, #10
 80056ca:	4621      	mov	r1, r4
 80056cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d0:	4621      	mov	r1, r4
 80056d2:	028a      	lsls	r2, r1, #10
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056da:	2200      	movs	r2, #0
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	61fa      	str	r2, [r7, #28]
 80056e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e4:	f7fb fb28 	bl	8000d38 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4613      	mov	r3, r2
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	3301      	adds	r3, #1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570a:	e002      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x204>)
 800570e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005714:	4618      	mov	r0, r3
 8005716:	3750      	adds	r7, #80	@ 0x50
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	00f42400 	.word	0x00f42400
 8005728:	007a1200 	.word	0x007a1200

0800572c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <HAL_RCC_GetHCLKFreq+0x14>)
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	4618      	mov	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200000c8 	.word	0x200000c8

08005744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005748:	f7ff fff0 	bl	800572c <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0a9b      	lsrs	r3, r3, #10
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4903      	ldr	r1, [pc, #12]	@ (8005768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	08012a70 	.word	0x08012a70

0800576c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005770:	f7ff ffdc 	bl	800572c <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b05      	ldr	r3, [pc, #20]	@ (800578c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	0b5b      	lsrs	r3, r3, #13
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4903      	ldr	r1, [pc, #12]	@ (8005790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40023800 	.word	0x40023800
 8005790:	08012a70 	.word	0x08012a70

08005794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	220f      	movs	r2, #15
 80057a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057a4:	4b12      	ldr	r3, [pc, #72]	@ (80057f0 <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0203 	and.w	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057b0:	4b0f      	ldr	r3, [pc, #60]	@ (80057f0 <HAL_RCC_GetClockConfig+0x5c>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057bc:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <HAL_RCC_GetClockConfig+0x5c>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057c8:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_RCC_GetClockConfig+0x5c>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <HAL_RCC_GetClockConfig+0x60>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0207 	and.w	r2, r3, #7
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40023c00 	.word	0x40023c00

080057f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800581c:	2b00      	cmp	r3, #0
 800581e:	d035      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005820:	4b62      	ldr	r3, [pc, #392]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005826:	f7fe ff9d 	bl	8004764 <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800582e:	f7fe ff99 	bl	8004764 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e0b0      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005840:	4b5b      	ldr	r3, [pc, #364]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	019a      	lsls	r2, r3, #6
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	071b      	lsls	r3, r3, #28
 8005858:	4955      	ldr	r1, [pc, #340]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005860:	4b52      	ldr	r3, [pc, #328]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005866:	f7fe ff7d 	bl	8004764 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800586e:	f7fe ff79 	bl	8004764 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e090      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005880:	4b4b      	ldr	r3, [pc, #300]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8083 	beq.w	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4b44      	ldr	r3, [pc, #272]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	4a43      	ldr	r2, [pc, #268]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058aa:	4b41      	ldr	r3, [pc, #260]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058b6:	4b3f      	ldr	r3, [pc, #252]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3e      	ldr	r2, [pc, #248]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c2:	f7fe ff4f 	bl	8004764 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058ca:	f7fe ff4b 	bl	8004764 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e062      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058dc:	4b35      	ldr	r3, [pc, #212]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e8:	4b31      	ldr	r3, [pc, #196]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02f      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d028      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005906:	4b2a      	ldr	r3, [pc, #168]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005910:	4b29      	ldr	r3, [pc, #164]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005916:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800591c:	4a24      	ldr	r2, [pc, #144]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005922:	4b23      	ldr	r3, [pc, #140]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b01      	cmp	r3, #1
 800592c:	d114      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800592e:	f7fe ff19 	bl	8004764 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005934:	e00a      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fe ff15 	bl	8004764 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e02a      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594c:	4b18      	ldr	r3, [pc, #96]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ee      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005964:	d10d      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005966:	4b12      	ldr	r3, [pc, #72]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597a:	490d      	ldr	r1, [pc, #52]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]
 8005980:	e005      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800598c:	6093      	str	r3, [r2, #8]
 800598e:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005990:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599a:	4905      	ldr	r1, [pc, #20]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800599c:	4313      	orrs	r3, r2
 800599e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	42470068 	.word	0x42470068
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40007000 	.word	0x40007000
 80059b8:	42470e40 	.word	0x42470e40

080059bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e073      	b.n	8005aba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7f5b      	ldrb	r3, [r3, #29]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fe fb5a 	bl	800409c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d055      	beq.n	8005aa8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	22ca      	movs	r2, #202	@ 0xca
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2253      	movs	r2, #83	@ 0x53
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa49 	bl	8005ea4 <RTC_EnterInitMode>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d12c      	bne.n	8005a76 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6899      	ldr	r1, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68d2      	ldr	r2, [r2, #12]
 8005a56:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6919      	ldr	r1, [r3, #16]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	041a      	lsls	r2, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa50 	bl	8005f12 <RTC_ExitInitMode>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d110      	bne.n	8005a9e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	22ff      	movs	r2, #255	@ 0xff
 8005aa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005aa6:	e001      	b.n	8005aac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ac2:	b590      	push	{r4, r7, lr}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	7f1b      	ldrb	r3, [r3, #28]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_RTC_SetTime+0x1c>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e087      	b.n	8005bee <HAL_RTC_SetTime+0x12c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d126      	bne.n	8005b3e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fa27 	bl	8005f5c <RTC_ByteToBcd2>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa20 	bl	8005f5c <RTC_ByteToBcd2>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b20:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	789b      	ldrb	r3, [r3, #2]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa18 	bl	8005f5c <RTC_ByteToBcd2>
 8005b2c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b2e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	78db      	ldrb	r3, [r3, #3]
 8005b36:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e018      	b.n	8005b70 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b5e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b64:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	22ca      	movs	r2, #202	@ 0xca
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2253      	movs	r2, #83	@ 0x53
 8005b7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f98f 	bl	8005ea4 <RTC_EnterInitMode>
 8005b86:	4603      	mov	r3, r0
 8005b88:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b8a:	7cfb      	ldrb	r3, [r7, #19]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d120      	bne.n	8005bd2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005b9a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6899      	ldr	r1, [r3, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f9a2 	bl	8005f12 <RTC_ExitInitMode>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]

  return status;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}

08005bf6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005c28:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	0d9b      	lsrs	r3, r3, #22
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11a      	bne.n	8005ca8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f98e 	bl	8005f98 <RTC_Bcd2ToByte>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f985 	bl	8005f98 <RTC_Bcd2ToByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	789b      	ldrb	r3, [r3, #2]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f97c 	bl	8005f98 <RTC_Bcd2ToByte>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cb2:	b590      	push	{r4, r7, lr}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	7f1b      	ldrb	r3, [r3, #28]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_RTC_SetDate+0x1c>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e071      	b.n	8005db2 <HAL_RTC_SetDate+0x100>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10e      	bne.n	8005cfe <HAL_RTC_SetDate+0x4c>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	330a      	adds	r3, #10
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d11c      	bne.n	8005d3e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	78db      	ldrb	r3, [r3, #3]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f927 	bl	8005f5c <RTC_ByteToBcd2>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f920 	bl	8005f5c <RTC_ByteToBcd2>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	789b      	ldrb	r3, [r3, #2]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f918 	bl	8005f5c <RTC_ByteToBcd2>
 8005d2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e00e      	b.n	8005d5c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d4a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	22ca      	movs	r2, #202	@ 0xca
 8005d62:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2253      	movs	r2, #83	@ 0x53
 8005d6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f899 	bl	8005ea4 <RTC_EnterInitMode>
 8005d72:	4603      	mov	r3, r0
 8005d74:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d8a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f8c0 	bl	8005f12 <RTC_ExitInitMode>
 8005d92:	4603      	mov	r3, r0
 8005d94:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	22ff      	movs	r2, #255	@ 0xff
 8005da8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]

  return status;
 8005db0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}

08005dba <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005dd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	0b5b      	lsrs	r3, r3, #13
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d11a      	bne.n	8005e4e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	78db      	ldrb	r3, [r3, #3]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f8bb 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f8b2 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	789b      	ldrb	r3, [r3, #2]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 f8a9 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea0 <HAL_RTC_WaitForSynchro+0x48>)
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e6c:	f7fe fc7a 	bl	8004764 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e72:	e009      	b.n	8005e88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e74:	f7fe fc76 	bl	8004764 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e82:	d901      	bls.n	8005e88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e007      	b.n	8005e98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0ee      	beq.n	8005e74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	00017f5f 	.word	0x00017f5f

08005ea4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d122      	bne.n	8005f08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ed0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed2:	f7fe fc47 	bl	8004764 <HAL_GetTick>
 8005ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ed8:	e00c      	b.n	8005ef4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005eda:	f7fe fc43 	bl	8004764 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ee8:	d904      	bls.n	8005ef4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2204      	movs	r2, #4
 8005eee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <RTC_EnterInitMode+0x64>
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d1e8      	bne.n	8005eda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff8b 	bl	8005e58 <HAL_RTC_WaitForSynchro>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005f6a:	e005      	b.n	8005f78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	3b0a      	subs	r3, #10
 8005f76:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b09      	cmp	r3, #9
 8005f7c:	d8f6      	bhi.n	8005f6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b2db      	uxtb	r3, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	b2db      	uxtb	r3, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07b      	b.n	80060de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ff6:	d009      	beq.n	800600c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	61da      	str	r2, [r3, #28]
 8005ffe:	e005      	b.n	800600c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe f862 	bl	80040f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006090:	ea42 0103 	orr.w	r1, r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	0c1b      	lsrs	r3, r3, #16
 80060aa:	f003 0104 	and.w	r1, r3, #4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	f003 0210 	and.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b088      	sub	sp, #32
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_SPI_Transmit+0x22>
 8006104:	2302      	movs	r3, #2
 8006106:	e12d      	b.n	8006364 <HAL_SPI_Transmit+0x27e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006110:	f7fe fb28 	bl	8004764 <HAL_GetTick>
 8006114:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d002      	beq.n	800612c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800612a:	e116      	b.n	800635a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_SPI_Transmit+0x52>
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800613c:	e10d      	b.n	800635a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2203      	movs	r2, #3
 8006142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006184:	d10f      	bne.n	80061a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b40      	cmp	r3, #64	@ 0x40
 80061b2:	d007      	beq.n	80061c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061cc:	d14f      	bne.n	800626e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Transmit+0xf6>
 80061d6:	8afb      	ldrh	r3, [r7, #22]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d142      	bne.n	8006262 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006200:	e02f      	b.n	8006262 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d112      	bne.n	8006236 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	881a      	ldrh	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006234:	e015      	b.n	8006262 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006236:	f7fe fa95 	bl	8004764 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d803      	bhi.n	800624e <HAL_SPI_Transmit+0x168>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800624c:	d102      	bne.n	8006254 <HAL_SPI_Transmit+0x16e>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006260:	e07b      	b.n	800635a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ca      	bne.n	8006202 <HAL_SPI_Transmit+0x11c>
 800626c:	e050      	b.n	8006310 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Transmit+0x196>
 8006276:	8afb      	ldrh	r3, [r7, #22]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d144      	bne.n	8006306 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	7812      	ldrb	r2, [r2, #0]
 8006288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062a2:	e030      	b.n	8006306 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d113      	bne.n	80062da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062d8:	e015      	b.n	8006306 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062da:	f7fe fa43 	bl	8004764 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d803      	bhi.n	80062f2 <HAL_SPI_Transmit+0x20c>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062f0:	d102      	bne.n	80062f8 <HAL_SPI_Transmit+0x212>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006304:	e029      	b.n	800635a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1c9      	bne.n	80062a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fbdf 	bl	8006ad8 <SPI_EndRxTxTransaction>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e003      	b.n	800635a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006362:	7ffb      	ldrb	r3, [r7, #31]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d002      	beq.n	8006392 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006390:	e0fb      	b.n	800658a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800639a:	d112      	bne.n	80063c2 <HAL_SPI_Receive+0x56>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10e      	bne.n	80063c2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2204      	movs	r2, #4
 80063a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f8ef 	bl	800659c <HAL_SPI_TransmitReceive>
 80063be:	4603      	mov	r3, r0
 80063c0:	e0e8      	b.n	8006594 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_SPI_Receive+0x64>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e0e1      	b.n	8006594 <HAL_SPI_Receive+0x228>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d8:	f7fe f9c4 	bl	8004764 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_SPI_Receive+0x7e>
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ee:	e0cc      	b.n	800658a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2204      	movs	r2, #4
 80063f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	88fa      	ldrh	r2, [r7, #6]
 800640e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006436:	d10f      	bne.n	8006458 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006456:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d007      	beq.n	8006476 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006474:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d16a      	bne.n	8006554 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800647e:	e032      	b.n	80064e6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d115      	bne.n	80064ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f103 020c 	add.w	r2, r3, #12
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064b8:	e015      	b.n	80064e6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ba:	f7fe f953 	bl	8004764 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d803      	bhi.n	80064d2 <HAL_SPI_Receive+0x166>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_Receive+0x16c>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064e4:	e051      	b.n	800658a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1c7      	bne.n	8006480 <HAL_SPI_Receive+0x114>
 80064f0:	e035      	b.n	800655e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d113      	bne.n	8006528 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	b292      	uxth	r2, r2
 800650c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006526:	e015      	b.n	8006554 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006528:	f7fe f91c 	bl	8004764 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d803      	bhi.n	8006540 <HAL_SPI_Receive+0x1d4>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800653e:	d102      	bne.n	8006546 <HAL_SPI_Receive+0x1da>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006552:	e01a      	b.n	800658a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1c9      	bne.n	80064f2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fa52 	bl	8006a0c <SPI_EndRxTransaction>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
 8006580:	e003      	b.n	800658a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006592:	7dfb      	ldrb	r3, [r7, #23]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	@ 0x30
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065aa:	2301      	movs	r3, #1
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x26>
 80065be:	2302      	movs	r3, #2
 80065c0:	e198      	b.n	80068f4 <HAL_SPI_TransmitReceive+0x358>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ca:	f7fe f8cb 	bl	8004764 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d00f      	beq.n	800660c <HAL_SPI_TransmitReceive+0x70>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065f2:	d107      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x68>
 80065fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006600:	2b04      	cmp	r3, #4
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006604:	2302      	movs	r3, #2
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800660a:	e16d      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_SPI_TransmitReceive+0x82>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_SPI_TransmitReceive+0x82>
 8006618:	887b      	ldrh	r3, [r7, #2]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006624:	e160      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b04      	cmp	r3, #4
 8006630:	d003      	beq.n	800663a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2205      	movs	r2, #5
 8006636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	887a      	ldrh	r2, [r7, #2]
 8006662:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	d007      	beq.n	800668e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006696:	d17c      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x10a>
 80066a0:	8b7b      	ldrh	r3, [r7, #26]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d16a      	bne.n	800677c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ca:	e057      	b.n	800677c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d11b      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x176>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d016      	beq.n	8006712 <HAL_SPI_TransmitReceive+0x176>
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d113      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ee:	881a      	ldrh	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d119      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x1b8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d014      	beq.n	8006754 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	b292      	uxth	r2, r2
 8006736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006750:	2301      	movs	r3, #1
 8006752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006754:	f7fe f806 	bl	8004764 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006760:	429a      	cmp	r2, r3
 8006762:	d80b      	bhi.n	800677c <HAL_SPI_TransmitReceive+0x1e0>
 8006764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800676a:	d007      	beq.n	800677c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800677a:	e0b5      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1a2      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x130>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d19d      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x130>
 8006790:	e080      	b.n	8006894 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x204>
 800679a:	8b7b      	ldrh	r3, [r7, #26]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d16f      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	7812      	ldrb	r2, [r2, #0]
 80067ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c6:	e05b      	b.n	8006880 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d11c      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x274>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d017      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x274>
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d114      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	330c      	adds	r3, #12
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b01      	cmp	r3, #1
 800681c:	d119      	bne.n	8006852 <HAL_SPI_TransmitReceive+0x2b6>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d014      	beq.n	8006852 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800684e:	2301      	movs	r3, #1
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006852:	f7fd ff87 	bl	8004764 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800685e:	429a      	cmp	r2, r3
 8006860:	d803      	bhi.n	800686a <HAL_SPI_TransmitReceive+0x2ce>
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006868:	d102      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x2d4>
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800687e:	e033      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d19e      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x22c>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d199      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f91d 	bl	8006ad8 <SPI_EndRxTxTransaction>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d006      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80068b0:	e01a      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e003      	b.n	80068e8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80068f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3730      	adds	r7, #48	@ 0x30
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800690c:	f7fd ff2a 	bl	8004764 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4413      	add	r3, r2
 800691a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800691c:	f7fd ff22 	bl	8004764 <HAL_GetTick>
 8006920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006922:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	015b      	lsls	r3, r3, #5
 8006928:	0d1b      	lsrs	r3, r3, #20
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006932:	e054      	b.n	80069de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800693a:	d050      	beq.n	80069de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800693c:	f7fd ff12 	bl	8004764 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	d902      	bls.n	8006952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d13d      	bne.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696a:	d111      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006974:	d004      	beq.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d107      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006998:	d10f      	bne.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e017      	b.n	80069fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	3b01      	subs	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d19b      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200000c8 	.word	0x200000c8

08006a0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a20:	d111      	bne.n	8006a46 <SPI_EndRxTransaction+0x3a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2a:	d004      	beq.n	8006a36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a34:	d107      	bne.n	8006a46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a4e:	d12a      	bne.n	8006aa6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a58:	d012      	beq.n	8006a80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	@ 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff ff49 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02d      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e026      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2101      	movs	r1, #1
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff ff36 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01a      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e013      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2101      	movs	r1, #1
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff23 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e000      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2201      	movs	r2, #1
 8006aec:	2102      	movs	r1, #2
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff04 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e032      	b.n	8006b70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <SPI_EndRxTxTransaction+0xa0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b7c <SPI_EndRxTxTransaction+0xa4>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	0d5b      	lsrs	r3, r3, #21
 8006b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b28:	d112      	bne.n	8006b50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	@ 0x80
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fee1 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d016      	beq.n	8006b6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e00f      	b.n	8006b70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d0f2      	beq.n	8006b50 <SPI_EndRxTxTransaction+0x78>
 8006b6a:	e000      	b.n	8006b6e <SPI_EndRxTxTransaction+0x96>
        break;
 8006b6c:	bf00      	nop
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200000c8 	.word	0x200000c8
 8006b7c:	165e9f81 	.word	0x165e9f81

08006b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e041      	b.n	8006c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fd fb0c 	bl	80041c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 fc58 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d001      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e04e      	b.n	8006cd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a23      	ldr	r2, [pc, #140]	@ (8006ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d022      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c62:	d01d      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d018      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <HAL_TIM_Base_Start_IT+0xcc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a19      	ldr	r2, [pc, #100]	@ (8006cf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x80>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <HAL_TIM_Base_Start_IT+0xdc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d111      	bne.n	8006cc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b06      	cmp	r3, #6
 8006cb0:	d010      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc2:	e007      	b.n	8006cd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40001800 	.word	0x40001800

08006d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e041      	b.n	8006d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fd fa2a 	bl	8004180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f000 fb98 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <HAL_TIM_PWM_Start+0x24>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e022      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d109      	bne.n	8006dde <HAL_TIM_PWM_Start+0x3e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	bf14      	ite	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	2300      	moveq	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	e015      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_PWM_Start+0x58>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e008      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e07c      	b.n	8006f0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x82>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e20:	e013      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e30:	e00b      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e40:	e003      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fe04 	bl	8007a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f14 <HAL_TIM_PWM_Start+0x174>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_PWM_Start+0xcc>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2c      	ldr	r2, [pc, #176]	@ (8006f18 <HAL_TIM_PWM_Start+0x178>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_PWM_Start+0xd0>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <HAL_TIM_PWM_Start+0xd2>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a22      	ldr	r2, [pc, #136]	@ (8006f14 <HAL_TIM_PWM_Start+0x174>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e98:	d01d      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f1c <HAL_TIM_PWM_Start+0x17c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <HAL_TIM_PWM_Start+0x180>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f24 <HAL_TIM_PWM_Start+0x184>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a16      	ldr	r2, [pc, #88]	@ (8006f18 <HAL_TIM_PWM_Start+0x178>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	@ (8006f28 <HAL_TIM_PWM_Start+0x188>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x136>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a16      	ldr	r2, [pc, #88]	@ (8006f2c <HAL_TIM_PWM_Start+0x18c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d111      	bne.n	8006efa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b06      	cmp	r3, #6
 8006ee6:	d010      	beq.n	8006f0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef8:	e007      	b.n	8006f0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800

08006f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d020      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0202 	mvn.w	r2, #2
 8006f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa5b 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa4d 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa5e 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0204 	mvn.w	r2, #4
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa35 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa27 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fa38 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d020      	beq.n	800702c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01b      	beq.n	800702c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0208 	mvn.w	r2, #8
 8006ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa0f 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8007018:	e005      	b.n	8007026 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa01 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa12 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f003 0310 	and.w	r3, r3, #16
 8007032:	2b00      	cmp	r3, #0
 8007034:	d020      	beq.n	8007078 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01b      	beq.n	8007078 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0210 	mvn.w	r2, #16
 8007048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2208      	movs	r2, #8
 800704e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9e9 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8007064:	e005      	b.n	8007072 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9db 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9ec 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00c      	beq.n	800709c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d007      	beq.n	800709c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0201 	mvn.w	r2, #1
 8007094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fc ffb6 	bl	8004008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00c      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fdce 	bl	8007c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00c      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9bd 	bl	800745e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0220 	mvn.w	r2, #32
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fda0 	bl	8007c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800712a:	2302      	movs	r3, #2
 800712c:	e0ae      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b0c      	cmp	r3, #12
 800713a:	f200 809f 	bhi.w	800727c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007179 	.word	0x08007179
 8007148:	0800727d 	.word	0x0800727d
 800714c:	0800727d 	.word	0x0800727d
 8007150:	0800727d 	.word	0x0800727d
 8007154:	080071b9 	.word	0x080071b9
 8007158:	0800727d 	.word	0x0800727d
 800715c:	0800727d 	.word	0x0800727d
 8007160:	0800727d 	.word	0x0800727d
 8007164:	080071fb 	.word	0x080071fb
 8007168:	0800727d 	.word	0x0800727d
 800716c:	0800727d 	.word	0x0800727d
 8007170:	0800727d 	.word	0x0800727d
 8007174:	0800723b 	.word	0x0800723b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fa24 	bl	80075cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0208 	orr.w	r2, r2, #8
 8007192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0204 	bic.w	r2, r2, #4
 80071a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6999      	ldr	r1, [r3, #24]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	619a      	str	r2, [r3, #24]
      break;
 80071b6:	e064      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fa74 	bl	80076ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6999      	ldr	r1, [r3, #24]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	619a      	str	r2, [r3, #24]
      break;
 80071f8:	e043      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fac9 	bl	8007798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0208 	orr.w	r2, r2, #8
 8007214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0204 	bic.w	r2, r2, #4
 8007224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	61da      	str	r2, [r3, #28]
      break;
 8007238:	e023      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fb1d 	bl	8007880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69d9      	ldr	r1, [r3, #28]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	021a      	lsls	r2, r3, #8
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	61da      	str	r2, [r3, #28]
      break;
 800727a:	e002      	b.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIM_ConfigClockSource+0x1c>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e0b4      	b.n	800741a <HAL_TIM_ConfigClockSource+0x186>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e8:	d03e      	beq.n	8007368 <HAL_TIM_ConfigClockSource+0xd4>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ee:	f200 8087 	bhi.w	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f6:	f000 8086 	beq.w	8007406 <HAL_TIM_ConfigClockSource+0x172>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072fe:	d87f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b70      	cmp	r3, #112	@ 0x70
 8007302:	d01a      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xa6>
 8007304:	2b70      	cmp	r3, #112	@ 0x70
 8007306:	d87b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b60      	cmp	r3, #96	@ 0x60
 800730a:	d050      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x11a>
 800730c:	2b60      	cmp	r3, #96	@ 0x60
 800730e:	d877      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b50      	cmp	r3, #80	@ 0x50
 8007312:	d03c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0xfa>
 8007314:	2b50      	cmp	r3, #80	@ 0x50
 8007316:	d873      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d058      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x13a>
 800731c:	2b40      	cmp	r3, #64	@ 0x40
 800731e:	d86f      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b30      	cmp	r3, #48	@ 0x30
 8007322:	d064      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	2b30      	cmp	r3, #48	@ 0x30
 8007326:	d86b      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d060      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d867      	bhi.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05c      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	2b10      	cmp	r3, #16
 8007336:	d05a      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x15a>
 8007338:	e062      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800734a:	f000 fb69 	bl	8007a20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800735c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	609a      	str	r2, [r3, #8]
      break;
 8007366:	e04f      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007378:	f000 fb52 	bl	8007a20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800738a:	609a      	str	r2, [r3, #8]
      break;
 800738c:	e03c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	461a      	mov	r2, r3
 800739c:	f000 fac6 	bl	800792c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2150      	movs	r1, #80	@ 0x50
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb1f 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 80073ac:	e02c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 fae5 	bl	800798a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2160      	movs	r1, #96	@ 0x60
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fb0f 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 80073cc:	e01c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	461a      	mov	r2, r3
 80073dc:	f000 faa6 	bl	800792c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2140      	movs	r1, #64	@ 0x40
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 faff 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 80073ec:	e00c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 faf6 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 80073fe:	e003      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a46      	ldr	r2, [pc, #280]	@ (80075a0 <TIM_Base_SetConfig+0x12c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007492:	d00f      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a43      	ldr	r2, [pc, #268]	@ (80075a4 <TIM_Base_SetConfig+0x130>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a42      	ldr	r2, [pc, #264]	@ (80075a8 <TIM_Base_SetConfig+0x134>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a41      	ldr	r2, [pc, #260]	@ (80075ac <TIM_Base_SetConfig+0x138>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a40      	ldr	r2, [pc, #256]	@ (80075b0 <TIM_Base_SetConfig+0x13c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d108      	bne.n	80074c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a35      	ldr	r2, [pc, #212]	@ (80075a0 <TIM_Base_SetConfig+0x12c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d02b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d4:	d027      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a32      	ldr	r2, [pc, #200]	@ (80075a4 <TIM_Base_SetConfig+0x130>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d023      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a31      	ldr	r2, [pc, #196]	@ (80075a8 <TIM_Base_SetConfig+0x134>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d01f      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a30      	ldr	r2, [pc, #192]	@ (80075ac <TIM_Base_SetConfig+0x138>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2f      	ldr	r2, [pc, #188]	@ (80075b0 <TIM_Base_SetConfig+0x13c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d017      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2e      	ldr	r2, [pc, #184]	@ (80075b4 <TIM_Base_SetConfig+0x140>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2d      	ldr	r2, [pc, #180]	@ (80075b8 <TIM_Base_SetConfig+0x144>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2c      	ldr	r2, [pc, #176]	@ (80075bc <TIM_Base_SetConfig+0x148>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00b      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2b      	ldr	r2, [pc, #172]	@ (80075c0 <TIM_Base_SetConfig+0x14c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d007      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2a      	ldr	r2, [pc, #168]	@ (80075c4 <TIM_Base_SetConfig+0x150>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <TIM_Base_SetConfig+0x154>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800752c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a10      	ldr	r2, [pc, #64]	@ (80075a0 <TIM_Base_SetConfig+0x12c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0xf8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a12      	ldr	r2, [pc, #72]	@ (80075b0 <TIM_Base_SetConfig+0x13c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d103      	bne.n	8007574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b01      	cmp	r3, #1
 8007584:	d105      	bne.n	8007592 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f023 0201 	bic.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]
  }
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800
 80075c0:	40001800 	.word	0x40001800
 80075c4:	40001c00 	.word	0x40001c00
 80075c8:	40002000 	.word	0x40002000

080075cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	f023 0201 	bic.w	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f023 0302 	bic.w	r3, r3, #2
 8007614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a20      	ldr	r2, [pc, #128]	@ (80076a4 <TIM_OC1_SetConfig+0xd8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_OC1_SetConfig+0x64>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a1f      	ldr	r2, [pc, #124]	@ (80076a8 <TIM_OC1_SetConfig+0xdc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10c      	bne.n	800764a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f023 0308 	bic.w	r3, r3, #8
 8007636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0304 	bic.w	r3, r3, #4
 8007648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a15      	ldr	r2, [pc, #84]	@ (80076a4 <TIM_OC1_SetConfig+0xd8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_OC1_SetConfig+0x8e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a14      	ldr	r2, [pc, #80]	@ (80076a8 <TIM_OC1_SetConfig+0xdc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d111      	bne.n	800767e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4313      	orrs	r3, r2
 8007672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40010400 	.word	0x40010400

080076ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	f023 0210 	bic.w	r2, r3, #16
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f023 0320 	bic.w	r3, r3, #32
 80076f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a22      	ldr	r2, [pc, #136]	@ (8007790 <TIM_OC2_SetConfig+0xe4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_OC2_SetConfig+0x68>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a21      	ldr	r2, [pc, #132]	@ (8007794 <TIM_OC2_SetConfig+0xe8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d10d      	bne.n	8007730 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800772e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <TIM_OC2_SetConfig+0xe4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC2_SetConfig+0x94>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <TIM_OC2_SetConfig+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d113      	bne.n	8007768 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800774e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400

08007798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a21      	ldr	r2, [pc, #132]	@ (8007878 <TIM_OC3_SetConfig+0xe0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0x66>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a20      	ldr	r2, [pc, #128]	@ (800787c <TIM_OC3_SetConfig+0xe4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10d      	bne.n	800781a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a16      	ldr	r2, [pc, #88]	@ (8007878 <TIM_OC3_SetConfig+0xe0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0x92>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a15      	ldr	r2, [pc, #84]	@ (800787c <TIM_OC3_SetConfig+0xe4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40010000 	.word	0x40010000
 800787c:	40010400 	.word	0x40010400

08007880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	031b      	lsls	r3, r3, #12
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a12      	ldr	r2, [pc, #72]	@ (8007924 <TIM_OC4_SetConfig+0xa4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_OC4_SetConfig+0x68>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a11      	ldr	r2, [pc, #68]	@ (8007928 <TIM_OC4_SetConfig+0xa8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d109      	bne.n	80078fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	019b      	lsls	r3, r3, #6
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40010000 	.word	0x40010000
 8007928:	40010400 	.word	0x40010400

0800792c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 030a 	bic.w	r3, r3, #10
 8007968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	621a      	str	r2, [r3, #32]
}
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f023 0210 	bic.w	r2, r3, #16
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	031b      	lsls	r3, r3, #12
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b085      	sub	sp, #20
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f043 0307 	orr.w	r3, r3, #7
 8007a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	609a      	str	r2, [r3, #8]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2201      	movs	r2, #1
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	fa01 f303 	lsl.w	r3, r1, r3
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e05a      	b.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a21      	ldr	r2, [pc, #132]	@ (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d022      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b10:	d01d      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d018      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d013      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00e      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a18      	ldr	r2, [pc, #96]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d009      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a17      	ldr	r2, [pc, #92]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d004      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a15      	ldr	r2, [pc, #84]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d10c      	bne.n	8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40001800 	.word	0x40001800

08007ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e03d      	b.n	8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e042      	b.n	8007d08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fc fb34 	bl	8004304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	@ 0x24
 8007ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fdbd 	bl	8008834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695a      	ldr	r2, [r3, #20]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	@ 0x28
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d175      	bne.n	8007e1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_UART_Transmit+0x2c>
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e06e      	b.n	8007e1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2221      	movs	r2, #33	@ 0x21
 8007d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d4e:	f7fc fd09 	bl	8004764 <HAL_GetTick>
 8007d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d68:	d108      	bne.n	8007d7c <HAL_UART_Transmit+0x6c>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d104      	bne.n	8007d7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	e003      	b.n	8007d84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d84:	e02e      	b.n	8007de4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2180      	movs	r1, #128	@ 0x80
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fb1f 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e03a      	b.n	8007e1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e007      	b.n	8007dd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1cb      	bne.n	8007d86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2200      	movs	r2, #0
 8007df6:	2140      	movs	r1, #64	@ 0x40
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 faeb 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e006      	b.n	8007e1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007e1c:	2302      	movs	r3, #2
  }
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	4613      	mov	r3, r2
 8007e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d112      	bne.n	8007e66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_UART_Receive_IT+0x26>
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e00b      	b.n	8007e68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fb12 	bl	8008486 <UART_Start_Receive_IT>
 8007e62:	4603      	mov	r3, r0
 8007e64:	e000      	b.n	8007e68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b0ba      	sub	sp, #232	@ 0xe8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x66>
 8007ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fbf2 	bl	80086b8 <UART_Receive_IT>
      return;
 8007ed4:	e25b      	b.n	800838e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80de 	beq.w	800809c <HAL_UART_IRQHandler+0x22c>
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80d1 	beq.w	800809c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_UART_IRQHandler+0xae>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f043 0201 	orr.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <HAL_UART_IRQHandler+0xd2>
 8007f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d005      	beq.n	8007f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3a:	f043 0202 	orr.w	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <HAL_UART_IRQHandler+0xf6>
 8007f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	f043 0204 	orr.w	r2, r3, #4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <HAL_UART_IRQHandler+0x126>
 8007f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8e:	f043 0208 	orr.w	r2, r3, #8
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 81f2 	beq.w	8008384 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_UART_IRQHandler+0x14e>
 8007fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fb7d 	bl	80086b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <HAL_UART_IRQHandler+0x17a>
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d04f      	beq.n	800808a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa85 	bl	80084fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d141      	bne.n	8008082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800801c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800802a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800802e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1d9      	bne.n	8007ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d013      	beq.n	800807a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008056:	4a7e      	ldr	r2, [pc, #504]	@ (8008250 <HAL_UART_IRQHandler+0x3e0>)
 8008058:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805e:	4618      	mov	r0, r3
 8008060:	f7fc fcde 	bl	8004a20 <HAL_DMA_Abort_IT>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	e00e      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f994 	bl	80083a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008080:	e00a      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f990 	bl	80083a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	e006      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f98c 	bl	80083a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008096:	e175      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	bf00      	nop
    return;
 800809a:	e173      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	f040 814f 	bne.w	8008344 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8148 	beq.w	8008344 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8141 	beq.w	8008344 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	f040 80b6 	bne.w	8008254 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8145 	beq.w	8008388 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008106:	429a      	cmp	r2, r3
 8008108:	f080 813e 	bcs.w	8008388 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800811e:	f000 8088 	beq.w	8008232 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	330c      	adds	r3, #12
 8008128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800813c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800814e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800815a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1d9      	bne.n	8008122 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800817e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3314      	adds	r3, #20
 800818e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800819a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e1      	bne.n	800816e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3314      	adds	r3, #20
 80081ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e3      	bne.n	80081aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008202:	f023 0310 	bic.w	r3, r3, #16
 8008206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008214:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008216:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800821a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e3      	bne.n	80081f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	4618      	mov	r0, r3
 800822e:	f7fc fb87 	bl	8004940 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2202      	movs	r2, #2
 8008236:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008240:	b29b      	uxth	r3, r3
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	b29b      	uxth	r3, r3
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8b7 	bl	80083bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800824e:	e09b      	b.n	8008388 <HAL_UART_IRQHandler+0x518>
 8008250:	080085c1 	.word	0x080085c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 808e 	beq.w	800838c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8089 	beq.w	800838c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	330c      	adds	r3, #12
 8008280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800828a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	330c      	adds	r3, #12
 800829a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800829e:	647a      	str	r2, [r7, #68]	@ 0x44
 80082a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e3      	bne.n	800827a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3314      	adds	r3, #20
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	623b      	str	r3, [r7, #32]
   return(result);
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	f023 0301 	bic.w	r3, r3, #1
 80082c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3314      	adds	r3, #20
 80082d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80082d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	60fb      	str	r3, [r7, #12]
   return(result);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0310 	bic.w	r3, r3, #16
 800830e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800831c:	61fa      	str	r2, [r7, #28]
 800831e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	617b      	str	r3, [r7, #20]
   return(result);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e3      	bne.n	80082f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f83d 	bl	80083bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008342:	e023      	b.n	800838c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d009      	beq.n	8008364 <HAL_UART_IRQHandler+0x4f4>
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f943 	bl	80085e8 <UART_Transmit_IT>
    return;
 8008362:	e014      	b.n	800838e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00e      	beq.n	800838e <HAL_UART_IRQHandler+0x51e>
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d008      	beq.n	800838e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f983 	bl	8008688 <UART_EndTransmit_IT>
    return;
 8008382:	e004      	b.n	800838e <HAL_UART_IRQHandler+0x51e>
    return;
 8008384:	bf00      	nop
 8008386:	e002      	b.n	800838e <HAL_UART_IRQHandler+0x51e>
      return;
 8008388:	bf00      	nop
 800838a:	e000      	b.n	800838e <HAL_UART_IRQHandler+0x51e>
      return;
 800838c:	bf00      	nop
  }
}
 800838e:	37e8      	adds	r7, #232	@ 0xe8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e4:	e03b      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ec:	d037      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7fc f9b9 	bl	8004764 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	6a3a      	ldr	r2, [r7, #32]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <UART_WaitOnFlagUntilTimeout+0x30>
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e03a      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d023      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b80      	cmp	r3, #128	@ 0x80
 800841a:	d020      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d01d      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d116      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f857 	bl	80084fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2208      	movs	r2, #8
 8008450:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e00f      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	429a      	cmp	r2, r3
 800847a:	d0b4      	beq.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	4613      	mov	r3, r2
 8008492:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2222      	movs	r2, #34	@ 0x22
 80084b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695a      	ldr	r2, [r3, #20]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0220 	orr.w	r2, r2, #32
 80084ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b095      	sub	sp, #84	@ 0x54
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	330c      	adds	r3, #12
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	330c      	adds	r3, #12
 8008520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008522:	643a      	str	r2, [r7, #64]	@ 0x40
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e5      	bne.n	8008502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3314      	adds	r3, #20
 800853c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	61fb      	str	r3, [r7, #28]
   return(result);
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3314      	adds	r3, #20
 8008554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008558:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800855c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856e:	2b01      	cmp	r3, #1
 8008570:	d119      	bne.n	80085a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	330c      	adds	r3, #12
 8008578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	60bb      	str	r3, [r7, #8]
   return(result);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f023 0310 	bic.w	r3, r3, #16
 8008588:	647b      	str	r3, [r7, #68]	@ 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008592:	61ba      	str	r2, [r7, #24]
 8008594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6979      	ldr	r1, [r7, #20]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	613b      	str	r3, [r7, #16]
   return(result);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80085b4:	bf00      	nop
 80085b6:	3754      	adds	r7, #84	@ 0x54
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff fee4 	bl	80083a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b21      	cmp	r3, #33	@ 0x21
 80085fa:	d13e      	bne.n	800867a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008604:	d114      	bne.n	8008630 <UART_Transmit_IT+0x48>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d110      	bne.n	8008630 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008622:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	1c9a      	adds	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	621a      	str	r2, [r3, #32]
 800862e:	e008      	b.n	8008642 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	1c59      	adds	r1, r3, #1
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6211      	str	r1, [r2, #32]
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29b      	uxth	r3, r3
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4619      	mov	r1, r3
 8008650:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10f      	bne.n	8008676 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008664:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008674:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	e000      	b.n	800867c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800867a:	2302      	movs	r3, #2
  }
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800869e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fe73 	bl	8008394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08c      	sub	sp, #48	@ 0x30
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b22      	cmp	r3, #34	@ 0x22
 80086ca:	f040 80ae 	bne.w	800882a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d6:	d117      	bne.n	8008708 <UART_Receive_IT+0x50>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d113      	bne.n	8008708 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008700:	1c9a      	adds	r2, r3, #2
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	629a      	str	r2, [r3, #40]	@ 0x28
 8008706:	e026      	b.n	8008756 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800871a:	d007      	beq.n	800872c <UART_Receive_IT+0x74>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <UART_Receive_IT+0x82>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	b2da      	uxtb	r2, r3
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	e008      	b.n	800874c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008746:	b2da      	uxtb	r2, r3
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29b      	uxth	r3, r3
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	4619      	mov	r1, r3
 8008764:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008766:	2b00      	cmp	r3, #0
 8008768:	d15d      	bne.n	8008826 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0220 	bic.w	r2, r2, #32
 8008778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d135      	bne.n	800881c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	613b      	str	r3, [r7, #16]
   return(result);
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f023 0310 	bic.w	r3, r3, #16
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d6:	623a      	str	r2, [r7, #32]
 80087d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	69f9      	ldr	r1, [r7, #28]
 80087dc:	6a3a      	ldr	r2, [r7, #32]
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d10a      	bne.n	800880e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fdd1 	bl	80083bc <HAL_UARTEx_RxEventCallback>
 800881a:	e002      	b.n	8008822 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7fb fb87 	bl	8003f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	e002      	b.n	800882c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	e000      	b.n	800882c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800882a:	2302      	movs	r3, #2
  }
}
 800882c:	4618      	mov	r0, r3
 800882e:	3730      	adds	r7, #48	@ 0x30
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008838:	b0c0      	sub	sp, #256	@ 0x100
 800883a:	af00      	add	r7, sp, #0
 800883c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800884c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008850:	68d9      	ldr	r1, [r3, #12]
 8008852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	ea40 0301 	orr.w	r3, r0, r1
 800885c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800885e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	431a      	orrs	r2, r3
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	431a      	orrs	r2, r3
 8008874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800888c:	f021 010c 	bic.w	r1, r1, #12
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800889a:	430b      	orrs	r3, r1
 800889c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800889e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ae:	6999      	ldr	r1, [r3, #24]
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	ea40 0301 	orr.w	r3, r0, r1
 80088ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b8f      	ldr	r3, [pc, #572]	@ (8008b00 <UART_SetConfig+0x2cc>)
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d005      	beq.n	80088d4 <UART_SetConfig+0xa0>
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b8d      	ldr	r3, [pc, #564]	@ (8008b04 <UART_SetConfig+0x2d0>)
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d104      	bne.n	80088de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088d4:	f7fc ff4a 	bl	800576c <HAL_RCC_GetPCLK2Freq>
 80088d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80088dc:	e003      	b.n	80088e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088de:	f7fc ff31 	bl	8005744 <HAL_RCC_GetPCLK1Freq>
 80088e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088f0:	f040 810c 	bne.w	8008b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	1891      	adds	r1, r2, r2
 800890c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800890e:	415b      	adcs	r3, r3
 8008910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008916:	4621      	mov	r1, r4
 8008918:	eb12 0801 	adds.w	r8, r2, r1
 800891c:	4629      	mov	r1, r5
 800891e:	eb43 0901 	adc.w	r9, r3, r1
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800892e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008936:	4690      	mov	r8, r2
 8008938:	4699      	mov	r9, r3
 800893a:	4623      	mov	r3, r4
 800893c:	eb18 0303 	adds.w	r3, r8, r3
 8008940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008944:	462b      	mov	r3, r5
 8008946:	eb49 0303 	adc.w	r3, r9, r3
 800894a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800894e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800895a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800895e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008962:	460b      	mov	r3, r1
 8008964:	18db      	adds	r3, r3, r3
 8008966:	653b      	str	r3, [r7, #80]	@ 0x50
 8008968:	4613      	mov	r3, r2
 800896a:	eb42 0303 	adc.w	r3, r2, r3
 800896e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008978:	f7f8 f9de 	bl	8000d38 <__aeabi_uldivmod>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4b61      	ldr	r3, [pc, #388]	@ (8008b08 <UART_SetConfig+0x2d4>)
 8008982:	fba3 2302 	umull	r2, r3, r3, r2
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	011c      	lsls	r4, r3, #4
 800898a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800898e:	2200      	movs	r2, #0
 8008990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008994:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	1891      	adds	r1, r2, r2
 80089a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089a4:	415b      	adcs	r3, r3
 80089a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089ac:	4641      	mov	r1, r8
 80089ae:	eb12 0a01 	adds.w	sl, r2, r1
 80089b2:	4649      	mov	r1, r9
 80089b4:	eb43 0b01 	adc.w	fp, r3, r1
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089cc:	4692      	mov	sl, r2
 80089ce:	469b      	mov	fp, r3
 80089d0:	4643      	mov	r3, r8
 80089d2:	eb1a 0303 	adds.w	r3, sl, r3
 80089d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089da:	464b      	mov	r3, r9
 80089dc:	eb4b 0303 	adc.w	r3, fp, r3
 80089e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80089f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089f8:	460b      	mov	r3, r1
 80089fa:	18db      	adds	r3, r3, r3
 80089fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80089fe:	4613      	mov	r3, r2
 8008a00:	eb42 0303 	adc.w	r3, r2, r3
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a0e:	f7f8 f993 	bl	8000d38 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	4b3b      	ldr	r3, [pc, #236]	@ (8008b08 <UART_SetConfig+0x2d4>)
 8008a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	2264      	movs	r2, #100	@ 0x64
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	1acb      	subs	r3, r1, r3
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a2e:	4b36      	ldr	r3, [pc, #216]	@ (8008b08 <UART_SetConfig+0x2d4>)
 8008a30:	fba3 2302 	umull	r2, r3, r3, r2
 8008a34:	095b      	lsrs	r3, r3, #5
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a3c:	441c      	add	r4, r3
 8008a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a50:	4642      	mov	r2, r8
 8008a52:	464b      	mov	r3, r9
 8008a54:	1891      	adds	r1, r2, r2
 8008a56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a58:	415b      	adcs	r3, r3
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a60:	4641      	mov	r1, r8
 8008a62:	1851      	adds	r1, r2, r1
 8008a64:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a66:	4649      	mov	r1, r9
 8008a68:	414b      	adcs	r3, r1
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	f04f 0300 	mov.w	r3, #0
 8008a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a78:	4659      	mov	r1, fp
 8008a7a:	00cb      	lsls	r3, r1, #3
 8008a7c:	4651      	mov	r1, sl
 8008a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a82:	4651      	mov	r1, sl
 8008a84:	00ca      	lsls	r2, r1, #3
 8008a86:	4610      	mov	r0, r2
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	189b      	adds	r3, r3, r2
 8008a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a94:	464b      	mov	r3, r9
 8008a96:	460a      	mov	r2, r1
 8008a98:	eb42 0303 	adc.w	r3, r2, r3
 8008a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008aac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	18db      	adds	r3, r3, r3
 8008ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aba:	4613      	mov	r3, r2
 8008abc:	eb42 0303 	adc.w	r3, r2, r3
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008aca:	f7f8 f935 	bl	8000d38 <__aeabi_uldivmod>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <UART_SetConfig+0x2d4>)
 8008ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	2164      	movs	r1, #100	@ 0x64
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	3332      	adds	r3, #50	@ 0x32
 8008ae6:	4a08      	ldr	r2, [pc, #32]	@ (8008b08 <UART_SetConfig+0x2d4>)
 8008ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	f003 0207 	and.w	r2, r3, #7
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4422      	add	r2, r4
 8008afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008afc:	e106      	b.n	8008d0c <UART_SetConfig+0x4d8>
 8008afe:	bf00      	nop
 8008b00:	40011000 	.word	0x40011000
 8008b04:	40011400 	.word	0x40011400
 8008b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b1e:	4642      	mov	r2, r8
 8008b20:	464b      	mov	r3, r9
 8008b22:	1891      	adds	r1, r2, r2
 8008b24:	6239      	str	r1, [r7, #32]
 8008b26:	415b      	adcs	r3, r3
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b2e:	4641      	mov	r1, r8
 8008b30:	1854      	adds	r4, r2, r1
 8008b32:	4649      	mov	r1, r9
 8008b34:	eb43 0501 	adc.w	r5, r3, r1
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	00eb      	lsls	r3, r5, #3
 8008b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b46:	00e2      	lsls	r2, r4, #3
 8008b48:	4614      	mov	r4, r2
 8008b4a:	461d      	mov	r5, r3
 8008b4c:	4643      	mov	r3, r8
 8008b4e:	18e3      	adds	r3, r4, r3
 8008b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b54:	464b      	mov	r3, r9
 8008b56:	eb45 0303 	adc.w	r3, r5, r3
 8008b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	008b      	lsls	r3, r1, #2
 8008b7e:	4621      	mov	r1, r4
 8008b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b84:	4621      	mov	r1, r4
 8008b86:	008a      	lsls	r2, r1, #2
 8008b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b8c:	f7f8 f8d4 	bl	8000d38 <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4b60      	ldr	r3, [pc, #384]	@ (8008d18 <UART_SetConfig+0x4e4>)
 8008b96:	fba3 2302 	umull	r2, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	011c      	lsls	r4, r3, #4
 8008b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ba8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	1891      	adds	r1, r2, r2
 8008bb6:	61b9      	str	r1, [r7, #24]
 8008bb8:	415b      	adcs	r3, r3
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	1851      	adds	r1, r2, r1
 8008bc4:	6139      	str	r1, [r7, #16]
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	414b      	adcs	r3, r1
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bd8:	4659      	mov	r1, fp
 8008bda:	00cb      	lsls	r3, r1, #3
 8008bdc:	4651      	mov	r1, sl
 8008bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be2:	4651      	mov	r1, sl
 8008be4:	00ca      	lsls	r2, r1, #3
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	4642      	mov	r2, r8
 8008bee:	189b      	adds	r3, r3, r2
 8008bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bf4:	464b      	mov	r3, r9
 8008bf6:	460a      	mov	r2, r1
 8008bf8:	eb42 0303 	adc.w	r3, r2, r3
 8008bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c18:	4649      	mov	r1, r9
 8008c1a:	008b      	lsls	r3, r1, #2
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c22:	4641      	mov	r1, r8
 8008c24:	008a      	lsls	r2, r1, #2
 8008c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c2a:	f7f8 f885 	bl	8000d38 <__aeabi_uldivmod>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	4b38      	ldr	r3, [pc, #224]	@ (8008d18 <UART_SetConfig+0x4e4>)
 8008c36:	fba3 2301 	umull	r2, r3, r3, r1
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	2264      	movs	r2, #100	@ 0x64
 8008c3e:	fb02 f303 	mul.w	r3, r2, r3
 8008c42:	1acb      	subs	r3, r1, r3
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	3332      	adds	r3, #50	@ 0x32
 8008c48:	4a33      	ldr	r2, [pc, #204]	@ (8008d18 <UART_SetConfig+0x4e4>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c54:	441c      	add	r4, r3
 8008c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	1891      	adds	r1, r2, r2
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	415b      	adcs	r3, r3
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c74:	4641      	mov	r1, r8
 8008c76:	1851      	adds	r1, r2, r1
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	414b      	adcs	r3, r1
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	00cb      	lsls	r3, r1, #3
 8008c90:	4651      	mov	r1, sl
 8008c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c96:	4651      	mov	r1, sl
 8008c98:	00ca      	lsls	r2, r1, #3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	189b      	adds	r3, r3, r2
 8008ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	460a      	mov	r2, r1
 8008caa:	eb42 0303 	adc.w	r3, r2, r3
 8008cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cba:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008cc8:	4649      	mov	r1, r9
 8008cca:	008b      	lsls	r3, r1, #2
 8008ccc:	4641      	mov	r1, r8
 8008cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	008a      	lsls	r2, r1, #2
 8008cd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cda:	f7f8 f82d 	bl	8000d38 <__aeabi_uldivmod>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <UART_SetConfig+0x4e4>)
 8008ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	2164      	movs	r1, #100	@ 0x64
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	3332      	adds	r3, #50	@ 0x32
 8008cf6:	4a08      	ldr	r2, [pc, #32]	@ (8008d18 <UART_SetConfig+0x4e4>)
 8008cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfc:	095b      	lsrs	r3, r3, #5
 8008cfe:	f003 020f 	and.w	r2, r3, #15
 8008d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4422      	add	r2, r4
 8008d0a:	609a      	str	r2, [r3, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d12:	46bd      	mov	sp, r7
 8008d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d18:	51eb851f 	.word	0x51eb851f

08008d1c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008d22:	201c      	movs	r0, #28
 8008d24:	f003 fbd4 	bl	800c4d0 <pvPortMalloc>
 8008d28:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f986 	bl	800904c <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8008d40:	687b      	ldr	r3, [r7, #4]
    }
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b090      	sub	sp, #64	@ 0x40
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63bb      	str	r3, [r7, #56]	@ 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xEventGroupWaitBits+0x38>
        __asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	623b      	str	r3, [r7, #32]
    }
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d8a:	d30b      	bcc.n	8008da4 <xEventGroupWaitBits+0x58>
        __asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61fb      	str	r3, [r7, #28]
    }
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <xEventGroupWaitBits+0x76>
        __asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	61bb      	str	r3, [r7, #24]
    }
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <xEventGroupWaitBits+0x72>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dc2:	f002 f811 	bl	800ade8 <xTaskGetSchedulerState>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <xEventGroupWaitBits+0x86>
 8008dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <xEventGroupWaitBits+0x8a>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <xEventGroupWaitBits+0x8c>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <xEventGroupWaitBits+0xa8>
        __asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	617b      	str	r3, [r7, #20]
    }
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xEventGroupWaitBits+0xa4>
        }
    #endif

    vTaskSuspendAll();
 8008df4:	f001 fb5e 	bl	800a4b4 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e04:	f000 f900 	bl	8009008 <prvTestWaitCondition>
 8008e08:	62b8      	str	r0, [r7, #40]	@ 0x28

        if( xWaitConditionMet != pdFALSE )
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00e      	beq.n	8008e2e <xEventGroupWaitBits+0xe2>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d028      	beq.n	8008e70 <xEventGroupWaitBits+0x124>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	43db      	mvns	r3, r3
 8008e26:	401a      	ands	r2, r3
 8008e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e020      	b.n	8008e70 <xEventGroupWaitBits+0x124>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8008e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <xEventGroupWaitBits+0xf2>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTimeoutOccurred = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e3c:	e018      	b.n	8008e70 <xEventGroupWaitBits+0x124>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <xEventGroupWaitBits+0x100>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <xEventGroupWaitBits+0x10e>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e58:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5c:	1d18      	adds	r0, r3, #4
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	4313      	orrs	r3, r2
 8008e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e66:	4619      	mov	r1, r3
 8008e68:	f001 fd44 	bl	800a8f4 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8008e70:	f001 fb2e 	bl	800a4d0 <xTaskResumeAll>
 8008e74:	6278      	str	r0, [r7, #36]	@ 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8008e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d031      	beq.n	8008ee0 <xEventGroupWaitBits+0x194>
    {
        if( xAlreadyYielded == pdFALSE )
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <xEventGroupWaitBits+0x146>
        {
            portYIELD_WITHIN_API();
 8008e82:	4b1a      	ldr	r3, [pc, #104]	@ (8008eec <xEventGroupWaitBits+0x1a0>)
 8008e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8008e92:	f002 f95d 	bl	800b150 <uxTaskResetEventItemValue>
 8008e96:	63f8      	str	r0, [r7, #60]	@ 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11a      	bne.n	8008ed8 <xEventGroupWaitBits+0x18c>
        {
            taskENTER_CRITICAL();
 8008ea2:	f003 f9e3 	bl	800c26c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008eb2:	f000 f8a9 	bl	8009008 <prvTestWaitCondition>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d009      	beq.n	8008ed0 <xEventGroupWaitBits+0x184>
                {
                    if( xClearOnExit != pdFALSE )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <xEventGroupWaitBits+0x184>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	401a      	ands	r2, r3
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            taskEXIT_CRITICAL();
 8008ed4:	f003 f9fc 	bl	800c2d0 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8008ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3740      	adds	r7, #64	@ 0x40
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	e000ed04 	.word	0xe000ed04

08008ef0 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08e      	sub	sp, #56	@ 0x38
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008efa:	2300      	movs	r3, #0
 8008efc:	633b      	str	r3, [r7, #48]	@ 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    BaseType_t xMatchFound = pdFALSE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <xEventGroupSetBits+0x34>
        __asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	613b      	str	r3, [r7, #16]
    }
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f2a:	d30b      	bcc.n	8008f44 <xEventGroupSetBits+0x54>
        __asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	60fb      	str	r3, [r7, #12]
    }
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	e7fd      	b.n	8008f40 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	3304      	adds	r3, #4
 8008f48:	627b      	str	r3, [r7, #36]	@ 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8008f50:	f001 fab0 	bl	800a4b4 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f64:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8008f66:	e03c      	b.n	8008fe2 <xEventGroupSetBits+0xf2>
        {
            pxNext = listGET_NEXT( pxListItem );
 8008f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008f7e:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f86:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d108      	bne.n	8008fa4 <xEventGroupSetBits+0xb4>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	4013      	ands	r3, r2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <xEventGroupSetBits+0xc6>
                {
                    xMatchFound = pdTRUE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fa2:	e008      	b.n	8008fb6 <xEventGroupSetBits+0xc6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	4013      	ands	r3, r2
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d101      	bne.n	8008fb6 <xEventGroupSetBits+0xc6>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d010      	beq.n	8008fde <xEventGroupSetBits+0xee>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <xEventGroupSetBits+0xde>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	633b      	str	r3, [r7, #48]	@ 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008fda:	f001 fd61 	bl	800aaa0 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        while( pxListItem != pxListEnd )
 8008fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d1be      	bne.n	8008f68 <xEventGroupSetBits+0x78>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8008ff8:	f001 fa6a 	bl	800a4d0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8008ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffe:	681b      	ldr	r3, [r3, #0]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3738      	adds	r7, #56	@ 0x38
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d107      	bne.n	800902e <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8009028:	2301      	movs	r3, #1
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e007      	b.n	800903e <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4013      	ands	r3, r2
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	d101      	bne.n	800903e <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 800903a:	2301      	movs	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 800903e:	697b      	ldr	r3, [r7, #20]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f103 0208 	add.w	r2, r3, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009064:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f103 0208 	add.w	r2, r3, #8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f103 0208 	add.w	r2, r3, #8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80090ee:	b480      	push	{r7}
 80090f0:	b085      	sub	sp, #20
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009104:	d103      	bne.n	800910e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e00c      	b.n	8009128 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3308      	adds	r3, #8
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	e002      	b.n	800911c <vListInsert+0x2e>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	d2f6      	bcs.n	8009116 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6892      	ldr	r2, [r2, #8]
 8009176:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6852      	ldr	r2, [r2, #4]
 8009180:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d103      	bne.n	8009194 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	1e5a      	subs	r2, r3, #1
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <xQueueGenericReset+0x2c>
        __asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	60bb      	str	r3, [r7, #8]
    }
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80091e0:	f003 f844 	bl	800c26c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ec:	68f9      	ldr	r1, [r7, #12]
 80091ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	441a      	add	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009210:	3b01      	subs	r3, #1
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	441a      	add	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	22ff      	movs	r2, #255	@ 0xff
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	22ff      	movs	r2, #255	@ 0xff
 800922c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d114      	bne.n	8009260 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01a      	beq.n	8009274 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3310      	adds	r3, #16
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fbc4 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d012      	beq.n	8009274 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800924e:	4b0d      	ldr	r3, [pc, #52]	@ (8009284 <xQueueGenericReset+0xd0>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	e009      	b.n	8009274 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3310      	adds	r3, #16
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fef1 	bl	800904c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3324      	adds	r3, #36	@ 0x24
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff feec 	bl	800904c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8009274:	f003 f82c 	bl	800c2d0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8009278:	2301      	movs	r3, #1
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009288:	b580      	push	{r7, lr}
 800928a:	b08c      	sub	sp, #48	@ 0x30
 800928c:	af02      	add	r7, sp, #8
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10b      	bne.n	80092b4 <xQueueGenericCreate+0x2c>
        __asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	61bb      	str	r3, [r7, #24]
    }
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	fb02 f303 	mul.w	r3, r2, r3
 80092bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d006      	beq.n	80092d2 <xQueueGenericCreate+0x4a>
 80092c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d101      	bne.n	80092d6 <xQueueGenericCreate+0x4e>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <xQueueGenericCreate+0x50>
 80092d6:	2300      	movs	r3, #0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <xQueueGenericCreate+0x6c>
        __asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	617b      	str	r3, [r7, #20]
    }
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80092fa:	d90b      	bls.n	8009314 <xQueueGenericCreate+0x8c>
        __asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	613b      	str	r3, [r7, #16]
    }
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	3350      	adds	r3, #80	@ 0x50
 8009318:	4618      	mov	r0, r3
 800931a:	f003 f8d9 	bl	800c4d0 <pvPortMalloc>
 800931e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	3350      	adds	r3, #80	@ 0x50
 800932e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009330:	79fa      	ldrb	r2, [r7, #7]
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	4613      	mov	r3, r2
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f805 	bl	800934c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009342:	6a3b      	ldr	r3, [r7, #32]
    }
 8009344:	4618      	mov	r0, r3
 8009346:	3728      	adds	r7, #40	@ 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d103      	bne.n	8009368 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e002      	b.n	800936e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800937a:	2101      	movs	r1, #1
 800937c:	69b8      	ldr	r0, [r7, #24]
 800937e:	f7ff ff19 	bl	80091b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	2073      	movs	r0, #115	@ 0x73
 8009392:	f004 fa59 	bl	800d848 <SEGGER_SYSVIEW_RecordU32x3>
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b090      	sub	sp, #64	@ 0x40
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10b      	bne.n	80093d4 <xQueueGenericSend+0x34>
        __asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d103      	bne.n	80093e2 <xQueueGenericSend+0x42>
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <xQueueGenericSend+0x46>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e000      	b.n	80093e8 <xQueueGenericSend+0x48>
 80093e6:	2300      	movs	r3, #0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <xQueueGenericSend+0x64>
        __asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b02      	cmp	r3, #2
 8009408:	d103      	bne.n	8009412 <xQueueGenericSend+0x72>
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940e:	2b01      	cmp	r3, #1
 8009410:	d101      	bne.n	8009416 <xQueueGenericSend+0x76>
 8009412:	2301      	movs	r3, #1
 8009414:	e000      	b.n	8009418 <xQueueGenericSend+0x78>
 8009416:	2300      	movs	r3, #0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <xQueueGenericSend+0x94>
        __asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	623b      	str	r3, [r7, #32]
    }
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009434:	f001 fcd8 	bl	800ade8 <xTaskGetSchedulerState>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <xQueueGenericSend+0xa4>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueGenericSend+0xa8>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueGenericSend+0xaa>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10b      	bne.n	8009466 <xQueueGenericSend+0xc6>
        __asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61fb      	str	r3, [r7, #28]
    }
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	e7fd      	b.n	8009462 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009466:	f002 ff01 	bl	800c26c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009472:	429a      	cmp	r2, r3
 8009474:	d302      	bcc.n	800947c <xQueueGenericSend+0xdc>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d136      	bne.n	80094ea <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 800947c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947e:	4618      	mov	r0, r3
 8009480:	f005 f81c 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	460b      	mov	r3, r1
 800948e:	4601      	mov	r1, r0
 8009490:	205a      	movs	r0, #90	@ 0x5a
 8009492:	f004 fa4f 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800949c:	f000 fca7 	bl	8009dee <prvCopyDataToQueue>
 80094a0:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d010      	beq.n	80094cc <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	3324      	adds	r3, #36	@ 0x24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 fa8e 	bl	800a9d0 <xTaskRemoveFromEventList>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80094ba:	4b4d      	ldr	r3, [pc, #308]	@ (80095f0 <xQueueGenericSend+0x250>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	e00a      	b.n	80094e2 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80094d2:	4b47      	ldr	r3, [pc, #284]	@ (80095f0 <xQueueGenericSend+0x250>)
 80094d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80094e2:	f002 fef5 	bl	800c2d0 <vPortExitCritical>
                return pdPASS;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e07d      	b.n	80095e6 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d110      	bne.n	8009512 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80094f0:	f002 feee 	bl	800c2d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	4618      	mov	r0, r3
 80094f8:	f004 ffe0 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	460b      	mov	r3, r1
 8009506:	4601      	mov	r1, r0
 8009508:	205a      	movs	r0, #90	@ 0x5a
 800950a:	f004 fa13 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800950e:	2300      	movs	r3, #0
 8009510:	e069      	b.n	80095e6 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4618      	mov	r0, r3
 800951e:	f001 fb27 	bl	800ab70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009522:	2301      	movs	r3, #1
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009526:	f002 fed3 	bl	800c2d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800952a:	f000 ffc3 	bl	800a4b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800952e:	f002 fe9d 	bl	800c26c <vPortEnterCritical>
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009538:	b25b      	sxtb	r3, r3
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800953e:	d103      	bne.n	8009548 <xQueueGenericSend+0x1a8>
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800954e:	b25b      	sxtb	r3, r3
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009554:	d103      	bne.n	800955e <xQueueGenericSend+0x1be>
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800955e:	f002 feb7 	bl	800c2d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009562:	1d3a      	adds	r2, r7, #4
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fb16 	bl	800ab9c <xTaskCheckForTimeOut>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d124      	bne.n	80095c0 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009576:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009578:	f000 fd31 	bl	8009fde <prvIsQueueFull>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d018      	beq.n	80095b4 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	3310      	adds	r3, #16
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 f98c 	bl	800a8a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009592:	f000 fcbc 	bl	8009f0e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009596:	f000 ff9b 	bl	800a4d0 <xTaskResumeAll>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	f47f af62 	bne.w	8009466 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80095a2:	4b13      	ldr	r3, [pc, #76]	@ (80095f0 <xQueueGenericSend+0x250>)
 80095a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	e758      	b.n	8009466 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80095b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095b6:	f000 fcaa 	bl	8009f0e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80095ba:	f000 ff89 	bl	800a4d0 <xTaskResumeAll>
 80095be:	e752      	b.n	8009466 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80095c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095c2:	f000 fca4 	bl	8009f0e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80095c6:	f000 ff83 	bl	800a4d0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	4618      	mov	r0, r3
 80095ce:	f004 ff75 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	460b      	mov	r3, r1
 80095dc:	4601      	mov	r1, r0
 80095de:	205a      	movs	r0, #90	@ 0x5a
 80095e0:	f004 f9a8 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80095e4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3738      	adds	r7, #56	@ 0x38
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	e000ed04 	.word	0xe000ed04

080095f4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b090      	sub	sp, #64	@ 0x40
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8009606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800961e:	bf00      	nop
 8009620:	bf00      	nop
 8009622:	e7fd      	b.n	8009620 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <xQueueGenericSendFromISR+0x3e>
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <xQueueGenericSendFromISR+0x42>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <xQueueGenericSendFromISR+0x44>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d103      	bne.n	8009662 <xQueueGenericSendFromISR+0x6e>
 800965a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <xQueueGenericSendFromISR+0x72>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <xQueueGenericSendFromISR+0x74>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
    }
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009684:	f002 fee2 	bl	800c44c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009688:	f3ef 8211 	mrs	r2, BASEPRI
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	61fa      	str	r2, [r7, #28]
 800969e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80096a0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d302      	bcc.n	80096b6 <xQueueGenericSendFromISR+0xc2>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d149      	bne.n	800974a <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	4618      	mov	r0, r3
 80096ca:	f004 fef7 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 80096ce:	4601      	mov	r1, r0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	461a      	mov	r2, r3
 80096d4:	2060      	movs	r0, #96	@ 0x60
 80096d6:	f004 f85d 	bl	800d794 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096e0:	f000 fb85 	bl	8009dee <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80096e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80096e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096ec:	d112      	bne.n	8009714 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d026      	beq.n	8009744 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	3324      	adds	r3, #36	@ 0x24
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f968 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d01e      	beq.n	8009744 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01b      	beq.n	8009744 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	e017      	b.n	8009744 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009714:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009718:	2b7f      	cmp	r3, #127	@ 0x7f
 800971a:	d10b      	bne.n	8009734 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	617b      	str	r3, [r7, #20]
    }
 800972e:	bf00      	nop
 8009730:	bf00      	nop
 8009732:	e7fd      	b.n	8009730 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009738:	3301      	adds	r3, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	b25a      	sxtb	r2, r3
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8009744:	2301      	movs	r3, #1
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8009748:	e00b      	b.n	8009762 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	4618      	mov	r0, r3
 800974e:	f004 feb5 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009752:	4601      	mov	r1, r0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	461a      	mov	r2, r3
 8009758:	2060      	movs	r0, #96	@ 0x60
 800975a:	f004 f81b 	bl	800d794 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800975e:	2300      	movs	r3, #0
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009764:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800976c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800976e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009770:	4618      	mov	r0, r3
 8009772:	3740      	adds	r7, #64	@ 0x40
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009778:	b590      	push	{r4, r7, lr}
 800977a:	b08f      	sub	sp, #60	@ 0x3c
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009784:	2300      	movs	r3, #0
 8009786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xQueueReceive+0x32>
        __asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	623b      	str	r3, [r7, #32]
    }
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d103      	bne.n	80097b8 <xQueueReceive+0x40>
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <xQueueReceive+0x44>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <xQueueReceive+0x46>
 80097bc:	2300      	movs	r3, #0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10b      	bne.n	80097da <xQueueReceive+0x62>
        __asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61fb      	str	r3, [r7, #28]
    }
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097da:	f001 fb05 	bl	800ade8 <xTaskGetSchedulerState>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <xQueueReceive+0x72>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <xQueueReceive+0x76>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <xQueueReceive+0x78>
 80097ee:	2300      	movs	r3, #0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <xQueueReceive+0x94>
        __asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	61bb      	str	r3, [r7, #24]
    }
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800980c:	f002 fd2e 	bl	800c26c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d02f      	beq.n	800987c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800981c:	68b9      	ldr	r1, [r7, #8]
 800981e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009820:	f000 fb4f 	bl	8009ec2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	4618      	mov	r0, r3
 8009828:	f004 fe48 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 800982c:	4604      	mov	r4, r0
 800982e:	2000      	movs	r0, #0
 8009830:	f004 fe44 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009834:	4602      	mov	r2, r0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2101      	movs	r1, #1
 800983a:	9100      	str	r1, [sp, #0]
 800983c:	4621      	mov	r1, r4
 800983e:	205c      	movs	r0, #92	@ 0x5c
 8009840:	f004 f878 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	1e5a      	subs	r2, r3, #1
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00f      	beq.n	8009874 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009856:	3310      	adds	r3, #16
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f8b9 	bl	800a9d0 <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009864:	4b4d      	ldr	r3, [pc, #308]	@ (800999c <xQueueReceive+0x224>)
 8009866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009874:	f002 fd2c 	bl	800c2d0 <vPortExitCritical>
                return pdPASS;
 8009878:	2301      	movs	r3, #1
 800987a:	e08a      	b.n	8009992 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d113      	bne.n	80098aa <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009882:	f002 fd25 	bl	800c2d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009888:	4618      	mov	r0, r3
 800988a:	f004 fe17 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 800988e:	4604      	mov	r4, r0
 8009890:	2000      	movs	r0, #0
 8009892:	f004 fe13 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009896:	4602      	mov	r2, r0
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2101      	movs	r1, #1
 800989c:	9100      	str	r1, [sp, #0]
 800989e:	4621      	mov	r1, r4
 80098a0:	205c      	movs	r0, #92	@ 0x5c
 80098a2:	f004 f847 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80098a6:	2300      	movs	r3, #0
 80098a8:	e073      	b.n	8009992 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80098aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80098b0:	f107 0310 	add.w	r3, r7, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 f95b 	bl	800ab70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80098ba:	2301      	movs	r3, #1
 80098bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80098be:	f002 fd07 	bl	800c2d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80098c2:	f000 fdf7 	bl	800a4b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80098c6:	f002 fcd1 	bl	800c26c <vPortEnterCritical>
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098d0:	b25b      	sxtb	r3, r3
 80098d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098d6:	d103      	bne.n	80098e0 <xQueueReceive+0x168>
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098ec:	d103      	bne.n	80098f6 <xQueueReceive+0x17e>
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098f6:	f002 fceb 	bl	800c2d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098fa:	1d3a      	adds	r2, r7, #4
 80098fc:	f107 0310 	add.w	r3, r7, #16
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f001 f94a 	bl	800ab9c <xTaskCheckForTimeOut>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d124      	bne.n	8009958 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800990e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009910:	f000 fb4f 	bl	8009fb2 <prvIsQueueEmpty>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d018      	beq.n	800994c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	3324      	adds	r3, #36	@ 0x24
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f000 ffc0 	bl	800a8a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800992a:	f000 faf0 	bl	8009f0e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800992e:	f000 fdcf 	bl	800a4d0 <xTaskResumeAll>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	f47f af69 	bne.w	800980c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800993a:	4b18      	ldr	r3, [pc, #96]	@ (800999c <xQueueReceive+0x224>)
 800993c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	e75f      	b.n	800980c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800994c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800994e:	f000 fade 	bl	8009f0e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009952:	f000 fdbd 	bl	800a4d0 <xTaskResumeAll>
 8009956:	e759      	b.n	800980c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800995a:	f000 fad8 	bl	8009f0e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800995e:	f000 fdb7 	bl	800a4d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009964:	f000 fb25 	bl	8009fb2 <prvIsQueueEmpty>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	f43f af4e 	beq.w	800980c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009972:	4618      	mov	r0, r3
 8009974:	f004 fda2 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009978:	4604      	mov	r4, r0
 800997a:	2000      	movs	r0, #0
 800997c:	f004 fd9e 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009980:	4602      	mov	r2, r0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2101      	movs	r1, #1
 8009986:	9100      	str	r1, [sp, #0]
 8009988:	4621      	mov	r1, r4
 800998a:	205c      	movs	r0, #92	@ 0x5c
 800998c:	f003 ffd2 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009990:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009992:	4618      	mov	r0, r3
 8009994:	3734      	adds	r7, #52	@ 0x34
 8009996:	46bd      	mov	sp, r7
 8009998:	bd90      	pop	{r4, r7, pc}
 800999a:	bf00      	nop
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b091      	sub	sp, #68	@ 0x44
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10b      	bne.n	80099d4 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	623b      	str	r3, [r7, #32]
    }
 80099ce:	bf00      	nop
 80099d0:	bf00      	nop
 80099d2:	e7fd      	b.n	80099d0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80099d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	61fb      	str	r3, [r7, #28]
    }
 80099ee:	bf00      	nop
 80099f0:	bf00      	nop
 80099f2:	e7fd      	b.n	80099f0 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099f4:	f001 f9f8 	bl	800ade8 <xTaskGetSchedulerState>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <xQueueSemaphoreTake+0x64>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <xQueueSemaphoreTake+0x68>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <xQueueSemaphoreTake+0x6a>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <xQueueSemaphoreTake+0x86>
        __asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	61bb      	str	r3, [r7, #24]
    }
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009a26:	f002 fc21 	bl	800c26c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d034      	beq.n	8009aa0 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f004 fd3f 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009a3e:	4604      	mov	r4, r0
 8009a40:	2000      	movs	r0, #0
 8009a42:	f004 fd3b 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009a46:	4602      	mov	r2, r0
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	9100      	str	r1, [sp, #0]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	205c      	movs	r0, #92	@ 0x5c
 8009a52:	f003 ff6f 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	1e5a      	subs	r2, r3, #1
 8009a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a66:	f001 fb8b 	bl	800b180 <pvTaskIncrementMutexHeldCount>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00f      	beq.n	8009a98 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 ffa7 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009a88:	4b64      	ldr	r3, [pc, #400]	@ (8009c1c <xQueueSemaphoreTake+0x27c>)
 8009a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009a98:	f002 fc1a 	bl	800c2d0 <vPortExitCritical>
                return pdPASS;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e0b8      	b.n	8009c12 <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d122      	bne.n	8009aec <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <xQueueSemaphoreTake+0x124>
        __asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	617b      	str	r3, [r7, #20]
    }
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009ac4:	f002 fc04 	bl	800c2d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	4618      	mov	r0, r3
 8009acc:	f004 fcf6 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f004 fcf2 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2101      	movs	r1, #1
 8009ade:	9100      	str	r1, [sp, #0]
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	205c      	movs	r0, #92	@ 0x5c
 8009ae4:	f003 ff26 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e092      	b.n	8009c12 <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009af2:	f107 030c 	add.w	r3, r7, #12
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 f83a 	bl	800ab70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009afc:	2301      	movs	r3, #1
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009b00:	f002 fbe6 	bl	800c2d0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009b04:	f000 fcd6 	bl	800a4b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009b08:	f002 fbb0 	bl	800c26c <vPortEnterCritical>
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b12:	b25b      	sxtb	r3, r3
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b18:	d103      	bne.n	8009b22 <xQueueSemaphoreTake+0x182>
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b28:	b25b      	sxtb	r3, r3
 8009b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b2e:	d103      	bne.n	8009b38 <xQueueSemaphoreTake+0x198>
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b38:	f002 fbca 	bl	800c2d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b3c:	463a      	mov	r2, r7
 8009b3e:	f107 030c 	add.w	r3, r7, #12
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 f829 	bl	800ab9c <xTaskCheckForTimeOut>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d132      	bne.n	8009bb6 <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b52:	f000 fa2e 	bl	8009fb2 <prvIsQueueEmpty>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d026      	beq.n	8009baa <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d109      	bne.n	8009b78 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8009b64:	f002 fb82 	bl	800c26c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 f959 	bl	800ae24 <xTaskPriorityInherit>
 8009b72:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8009b74:	f002 fbac 	bl	800c2d0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	3324      	adds	r3, #36	@ 0x24
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fe91 	bl	800a8a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009b86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b88:	f000 f9c1 	bl	8009f0e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009b8c:	f000 fca0 	bl	800a4d0 <xTaskResumeAll>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f af47 	bne.w	8009a26 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8009b98:	4b20      	ldr	r3, [pc, #128]	@ (8009c1c <xQueueSemaphoreTake+0x27c>)
 8009b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	e73d      	b.n	8009a26 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bac:	f000 f9af 	bl	8009f0e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009bb0:	f000 fc8e 	bl	800a4d0 <xTaskResumeAll>
 8009bb4:	e737      	b.n	8009a26 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009bb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bb8:	f000 f9a9 	bl	8009f0e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009bbc:	f000 fc88 	bl	800a4d0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bc2:	f000 f9f6 	bl	8009fb2 <prvIsQueueEmpty>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f43f af2c 	beq.w	8009a26 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00d      	beq.n	8009bf0 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8009bd4:	f002 fb4a 	bl	800c26c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009bd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bda:	f000 f8f0 	bl	8009dbe <prvGetDisinheritPriorityAfterTimeout>
 8009bde:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fa18 	bl	800b01c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009bec:	f002 fb70 	bl	800c2d0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f004 fc62 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	f004 fc5e 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009c00:	4602      	mov	r2, r0
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2101      	movs	r1, #1
 8009c06:	9100      	str	r1, [sp, #0]
 8009c08:	4621      	mov	r1, r4
 8009c0a:	205c      	movs	r0, #92	@ 0x5c
 8009c0c:	f003 fe92 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009c10:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	373c      	adds	r7, #60	@ 0x3c
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd90      	pop	{r4, r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	e000ed04 	.word	0xe000ed04

08009c20 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b091      	sub	sp, #68	@ 0x44
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <xQueueReceiveFromISR+0x3c>
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <xQueueReceiveFromISR+0x40>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <xQueueReceiveFromISR+0x42>
 8009c60:	2300      	movs	r3, #0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c7e:	f002 fbe5 	bl	800c44c <vPortValidateInterruptPriority>
        __asm volatile
 8009c82:	f3ef 8211 	mrs	r2, BASEPRI
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	623a      	str	r2, [r7, #32]
 8009c98:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8009c9a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d04e      	beq.n	8009d48 <xQueueReceiveFromISR+0x128>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f004 fc00 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f004 fbfb 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4621      	mov	r1, r4
 8009ccc:	2062      	movs	r0, #98	@ 0x62
 8009cce:	f003 fdbb 	bl	800d848 <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009cd6:	f000 f8f4 	bl	8009ec2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	1e5a      	subs	r2, r3, #1
 8009cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8009ce2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cea:	d112      	bne.n	8009d12 <xQueueReceiveFromISR+0xf2>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d026      	beq.n	8009d42 <xQueueReceiveFromISR+0x122>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	3310      	adds	r3, #16
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fe69 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01e      	beq.n	8009d42 <xQueueReceiveFromISR+0x122>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01b      	beq.n	8009d42 <xQueueReceiveFromISR+0x122>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e017      	b.n	8009d42 <xQueueReceiveFromISR+0x122>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8009d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d18:	d10b      	bne.n	8009d32 <xQueueReceiveFromISR+0x112>
        __asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	61bb      	str	r3, [r7, #24]
    }
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <xQueueReceiveFromISR+0x10e>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d36:	3301      	adds	r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	b25a      	sxtb	r2, r3
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8009d42:	2301      	movs	r3, #1
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d46:	e010      	b.n	8009d6a <xQueueReceiveFromISR+0x14a>
        }
        else
        {
            xReturn = pdFAIL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f004 fbb4 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009d54:	4604      	mov	r4, r0
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f004 fbaf 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4621      	mov	r1, r4
 8009d64:	2062      	movs	r0, #98	@ 0x62
 8009d66:	f003 fd6f 	bl	800d848 <SEGGER_SYSVIEW_RecordU32x3>
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f383 8811 	msr	BASEPRI, r3
    }
 8009d74:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3744      	adds	r7, #68	@ 0x44
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd90      	pop	{r4, r7, pc}

08009d80 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10b      	bne.n	8009da6 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	60bb      	str	r3, [r7, #8]
    }
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	e7fd      	b.n	8009da2 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8009da6:	f002 fa61 	bl	800c26c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dae:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8009db0:	f002 fa8e 	bl	800c2d0 <vPortExitCritical>

    return uxReturn;
 8009db4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009dbe:	b480      	push	{r7}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d006      	beq.n	8009ddc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f1c3 0305 	rsb	r3, r3, #5
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e001      	b.n	8009de0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009de0:	68fb      	ldr	r3, [r7, #12]
    }
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e02:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10d      	bne.n	8009e28 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d14d      	bne.n	8009eb0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 f87d 	bl	800af18 <xTaskPriorityDisinherit>
 8009e1e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	609a      	str	r2, [r3, #8]
 8009e26:	e043      	b.n	8009eb0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d119      	bne.n	8009e62 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6858      	ldr	r0, [r3, #4]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e36:	461a      	mov	r2, r3
 8009e38:	68b9      	ldr	r1, [r7, #8]
 8009e3a:	f005 fcba 	bl	800f7b2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e46:	441a      	add	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d32b      	bcc.n	8009eb0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	605a      	str	r2, [r3, #4]
 8009e60:	e026      	b.n	8009eb0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68d8      	ldr	r0, [r3, #12]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	f005 fca0 	bl	800f7b2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	425b      	negs	r3, r3
 8009e7c:	441a      	add	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d207      	bcs.n	8009e9e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e96:	425b      	negs	r3, r3
 8009e98:	441a      	add	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d105      	bne.n	8009eb0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009eb8:	697b      	ldr	r3, [r7, #20]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d018      	beq.n	8009f06 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d303      	bcc.n	8009ef6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68d9      	ldr	r1, [r3, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efe:	461a      	mov	r2, r3
 8009f00:	6838      	ldr	r0, [r7, #0]
 8009f02:	f005 fc56 	bl	800f7b2 <memcpy>
    }
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009f16:	f002 f9a9 	bl	800c26c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f20:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f22:	e011      	b.n	8009f48 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d012      	beq.n	8009f52 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3324      	adds	r3, #36	@ 0x24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fd4d 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009f3c:	f000 fe96 	bl	800ac6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dce9      	bgt.n	8009f24 <prvUnlockQueue+0x16>
 8009f50:	e000      	b.n	8009f54 <prvUnlockQueue+0x46>
                        break;
 8009f52:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	22ff      	movs	r2, #255	@ 0xff
 8009f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009f5c:	f002 f9b8 	bl	800c2d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009f60:	f002 f984 	bl	800c26c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f6a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f6c:	e011      	b.n	8009f92 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d012      	beq.n	8009f9c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fd28 	bl	800a9d0 <xTaskRemoveFromEventList>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009f86:	f000 fe71 	bl	800ac6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dce9      	bgt.n	8009f6e <prvUnlockQueue+0x60>
 8009f9a:	e000      	b.n	8009f9e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009f9c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	22ff      	movs	r2, #255	@ 0xff
 8009fa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009fa6:	f002 f993 	bl	800c2d0 <vPortExitCritical>
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fba:	f002 f957 	bl	800c26c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e001      	b.n	8009fd0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009fd0:	f002 f97e 	bl	800c2d0 <vPortExitCritical>

    return xReturn;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fe6:	f002 f941 	bl	800c26c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d102      	bne.n	8009ffc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e001      	b.n	800a000 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a000:	f002 f966 	bl	800c2d0 <vPortExitCritical>

    return xReturn;
 800a004:	68fb      	ldr	r3, [r7, #12]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
    }
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a040:	429a      	cmp	r2, r3
 800a042:	d102      	bne.n	800a04a <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800a044:	2301      	movs	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e001      	b.n	800a04e <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a04e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a050:	4618      	mov	r0, r3
 800a052:	371c      	adds	r7, #28
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e01e      	b.n	800a0aa <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a06c:	4a13      	ldr	r2, [pc, #76]	@ (800a0bc <vQueueAddToRegistry+0x60>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d115      	bne.n	800a0a4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a078:	4910      	ldr	r1, [pc, #64]	@ (800a0bc <vQueueAddToRegistry+0x60>)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a082:	4a0e      	ldr	r2, [pc, #56]	@ (800a0bc <vQueueAddToRegistry+0x60>)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	4413      	add	r3, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	f004 fa13 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 800a096:	4601      	mov	r1, r0
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	2071      	movs	r0, #113	@ 0x71
 800a09e:	f003 fb79 	bl	800d794 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a0a2:	e006      	b.n	800a0b2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b07      	cmp	r3, #7
 800a0ae:	d9dd      	bls.n	800a06c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200017e4 	.word	0x200017e4

0800a0c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a0d0:	f002 f8cc 	bl	800c26c <vPortEnterCritical>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0da:	b25b      	sxtb	r3, r3
 800a0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0e0:	d103      	bne.n	800a0ea <vQueueWaitForMessageRestricted+0x2a>
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0f0:	b25b      	sxtb	r3, r3
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0f6:	d103      	bne.n	800a100 <vQueueWaitForMessageRestricted+0x40>
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a100:	f002 f8e6 	bl	800c2d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	3324      	adds	r3, #36	@ 0x24
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fc2b 	bl	800a970 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a11a:	6978      	ldr	r0, [r7, #20]
 800a11c:	f7ff fef7 	bl	8009f0e <prvUnlockQueue>
    }
 800a120:	bf00      	nop
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08c      	sub	sp, #48	@ 0x30
 800a12c:	af04      	add	r7, sp, #16
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	4613      	mov	r3, r2
 800a136:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f002 f9c7 	bl	800c4d0 <pvPortMalloc>
 800a142:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00e      	beq.n	800a168 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a14a:	2058      	movs	r0, #88	@ 0x58
 800a14c:	f002 f9c0 	bl	800c4d0 <pvPortMalloc>
 800a150:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a15e:	e005      	b.n	800a16c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a160:	6978      	ldr	r0, [r7, #20]
 800a162:	f002 fa97 	bl	800c694 <vPortFree>
 800a166:	e001      	b.n	800a16c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d013      	beq.n	800a19a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	2300      	movs	r3, #0
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	9302      	str	r3, [sp, #8]
 800a17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17e:	9301      	str	r3, [sp, #4]
 800a180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f80e 	bl	800a1aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a18e:	69f8      	ldr	r0, [r7, #28]
 800a190:	f000 f8a2 	bl	800a2d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a194:	2301      	movs	r3, #1
 800a196:	61bb      	str	r3, [r7, #24]
 800a198:	e002      	b.n	800a1a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a19e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
    }
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3720      	adds	r7, #32
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b088      	sub	sp, #32
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	21a5      	movs	r1, #165	@ 0xa5
 800a1c4:	f005 fa79 	bl	800f6ba <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f023 0307 	bic.w	r3, r3, #7
 800a1e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	617b      	str	r3, [r7, #20]
    }
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	e7fd      	b.n	800a200 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01f      	beq.n	800a24a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a20a:	2300      	movs	r3, #0
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	e012      	b.n	800a236 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	4413      	add	r3, r2
 800a216:	7819      	ldrb	r1, [r3, #0]
 800a218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	3334      	adds	r3, #52	@ 0x34
 800a220:	460a      	mov	r2, r1
 800a222:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	3301      	adds	r3, #1
 800a234:	61fb      	str	r3, [r7, #28]
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b09      	cmp	r3, #9
 800a23a:	d9e9      	bls.n	800a210 <prvInitialiseNewTask+0x66>
 800a23c:	e000      	b.n	800a240 <prvInitialiseNewTask+0x96>
            {
                break;
 800a23e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a248:	e003      	b.n	800a252 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a254:	2b04      	cmp	r3, #4
 800a256:	d901      	bls.n	800a25c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a258:	2304      	movs	r3, #4
 800a25a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a260:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a266:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	2200      	movs	r2, #0
 800a26c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	3304      	adds	r3, #4
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe ff0a 	bl	800908c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	3318      	adds	r3, #24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe ff05 	bl	800908c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a286:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	f1c3 0205 	rsb	r2, r3, #5
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a296:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	3350      	adds	r3, #80	@ 0x50
 800a29c:	2204      	movs	r2, #4
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f005 fa0a 	bl	800f6ba <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	3354      	adds	r3, #84	@ 0x54
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f005 fa03 	bl	800f6ba <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	69b8      	ldr	r0, [r7, #24]
 800a2ba:	f001 fe25 	bl	800bf08 <pxPortInitialiseStack>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a2d0:	bf00      	nop
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a2d8:	b5b0      	push	{r4, r5, r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a2e0:	f001 ffc4 	bl	800c26c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a2e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a3d4 <prvAddNewTaskToReadyList+0xfc>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	4a3a      	ldr	r2, [pc, #232]	@ (800a3d4 <prvAddNewTaskToReadyList+0xfc>)
 800a2ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a2ee:	4b3a      	ldr	r3, [pc, #232]	@ (800a3d8 <prvAddNewTaskToReadyList+0x100>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d109      	bne.n	800a30a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a2f6:	4a38      	ldr	r2, [pc, #224]	@ (800a3d8 <prvAddNewTaskToReadyList+0x100>)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a2fc:	4b35      	ldr	r3, [pc, #212]	@ (800a3d4 <prvAddNewTaskToReadyList+0xfc>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d110      	bne.n	800a326 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a304:	f000 fcd6 	bl	800acb4 <prvInitialiseTaskLists>
 800a308:	e00d      	b.n	800a326 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a30a:	4b34      	ldr	r3, [pc, #208]	@ (800a3dc <prvAddNewTaskToReadyList+0x104>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d109      	bne.n	800a326 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a312:	4b31      	ldr	r3, [pc, #196]	@ (800a3d8 <prvAddNewTaskToReadyList+0x100>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d802      	bhi.n	800a326 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a320:	4a2d      	ldr	r2, [pc, #180]	@ (800a3d8 <prvAddNewTaskToReadyList+0x100>)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a326:	4b2e      	ldr	r3, [pc, #184]	@ (800a3e0 <prvAddNewTaskToReadyList+0x108>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	4a2c      	ldr	r2, [pc, #176]	@ (800a3e0 <prvAddNewTaskToReadyList+0x108>)
 800a32e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a330:	4b2b      	ldr	r3, [pc, #172]	@ (800a3e0 <prvAddNewTaskToReadyList+0x108>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d016      	beq.n	800a36c <prvAddNewTaskToReadyList+0x94>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4618      	mov	r0, r3
 800a342:	f003 ff95 	bl	800e270 <SEGGER_SYSVIEW_OnTaskCreate>
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a356:	461d      	mov	r5, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461c      	mov	r4, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a362:	1ae3      	subs	r3, r4, r3
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	462b      	mov	r3, r5
 800a368:	f002 fb64 	bl	800ca34 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4618      	mov	r0, r3
 800a370:	f004 f802 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	2201      	movs	r2, #1
 800a37a:	409a      	lsls	r2, r3
 800a37c:	4b19      	ldr	r3, [pc, #100]	@ (800a3e4 <prvAddNewTaskToReadyList+0x10c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4313      	orrs	r3, r2
 800a382:	4a18      	ldr	r2, [pc, #96]	@ (800a3e4 <prvAddNewTaskToReadyList+0x10c>)
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4a15      	ldr	r2, [pc, #84]	@ (800a3e8 <prvAddNewTaskToReadyList+0x110>)
 800a394:	441a      	add	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3304      	adds	r3, #4
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f7fe fe82 	bl	80090a6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a3a2:	f001 ff95 	bl	800c2d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <prvAddNewTaskToReadyList+0x104>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00e      	beq.n	800a3cc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <prvAddNewTaskToReadyList+0x100>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d207      	bcs.n	800a3cc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <prvAddNewTaskToReadyList+0x114>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d4:	200018fc 	.word	0x200018fc
 800a3d8:	20001824 	.word	0x20001824
 800a3dc:	20001908 	.word	0x20001908
 800a3e0:	20001918 	.word	0x20001918
 800a3e4:	20001904 	.word	0x20001904
 800a3e8:	20001828 	.word	0x20001828
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800a3f6:	4b27      	ldr	r3, [pc, #156]	@ (800a494 <vTaskStartScheduler+0xa4>)
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	2300      	movs	r3, #0
 800a400:	2282      	movs	r2, #130	@ 0x82
 800a402:	4925      	ldr	r1, [pc, #148]	@ (800a498 <vTaskStartScheduler+0xa8>)
 800a404:	4825      	ldr	r0, [pc, #148]	@ (800a49c <vTaskStartScheduler+0xac>)
 800a406:	f7ff fe8f 	bl	800a128 <xTaskCreate>
 800a40a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d102      	bne.n	800a418 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800a412:	f001 f9db 	bl	800b7cc <xTimerCreateTimerTask>
 800a416:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d124      	bne.n	800a468 <vTaskStartScheduler+0x78>
        __asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60bb      	str	r3, [r7, #8]
    }
 800a430:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a432:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a0 <vTaskStartScheduler+0xb0>)
 800a434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a438:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a43a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4a4 <vTaskStartScheduler+0xb4>)
 800a43c:	2201      	movs	r2, #1
 800a43e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a440:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <vTaskStartScheduler+0xb8>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a446:	4b19      	ldr	r3, [pc, #100]	@ (800a4ac <vTaskStartScheduler+0xbc>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <vTaskStartScheduler+0xa4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d102      	bne.n	800a458 <vTaskStartScheduler+0x68>
 800a452:	f003 fef1 	bl	800e238 <SEGGER_SYSVIEW_OnIdle>
 800a456:	e004      	b.n	800a462 <vTaskStartScheduler+0x72>
 800a458:	4b14      	ldr	r3, [pc, #80]	@ (800a4ac <vTaskStartScheduler+0xbc>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f003 ff49 	bl	800e2f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a462:	f001 fddf 	bl	800c024 <xPortStartScheduler>
 800a466:	e00f      	b.n	800a488 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a46e:	d10b      	bne.n	800a488 <vTaskStartScheduler+0x98>
        __asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	607b      	str	r3, [r7, #4]
    }
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a488:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <vTaskStartScheduler+0xc0>)
 800a48a:	681b      	ldr	r3, [r3, #0]
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20001920 	.word	0x20001920
 800a498:	08012984 	.word	0x08012984
 800a49c:	0800ac85 	.word	0x0800ac85
 800a4a0:	2000191c 	.word	0x2000191c
 800a4a4:	20001908 	.word	0x20001908
 800a4a8:	20001900 	.word	0x20001900
 800a4ac:	20001824 	.word	0x20001824
 800a4b0:	200000d4 	.word	0x200000d4

0800a4b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <vTaskSuspendAll+0x18>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	4a03      	ldr	r2, [pc, #12]	@ (800a4cc <vTaskSuspendAll+0x18>)
 800a4c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a4c2:	bf00      	nop
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	20001924 	.word	0x20001924

0800a4d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a4de:	4b44      	ldr	r3, [pc, #272]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xTaskResumeAll+0x2e>
        __asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
    }
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a4fe:	f001 feb5 	bl	800c26c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a502:	4b3b      	ldr	r3, [pc, #236]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3b01      	subs	r3, #1
 800a508:	4a39      	ldr	r2, [pc, #228]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a50a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50c:	4b38      	ldr	r3, [pc, #224]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d165      	bne.n	800a5e0 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a514:	4b37      	ldr	r3, [pc, #220]	@ (800a5f4 <xTaskResumeAll+0x124>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d061      	beq.n	800a5e0 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a51c:	e032      	b.n	800a584 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51e:	4b36      	ldr	r3, [pc, #216]	@ (800a5f8 <xTaskResumeAll+0x128>)
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3318      	adds	r3, #24
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fe18 	bl	8009160 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3304      	adds	r3, #4
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fe13 	bl	8009160 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f003 ff1b 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	2201      	movs	r2, #1
 800a548:	409a      	lsls	r2, r3
 800a54a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5fc <xTaskResumeAll+0x12c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4313      	orrs	r3, r2
 800a550:	4a2a      	ldr	r2, [pc, #168]	@ (800a5fc <xTaskResumeAll+0x12c>)
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4a27      	ldr	r2, [pc, #156]	@ (800a600 <xTaskResumeAll+0x130>)
 800a562:	441a      	add	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7fe fd9b 	bl	80090a6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a574:	4b23      	ldr	r3, [pc, #140]	@ (800a604 <xTaskResumeAll+0x134>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d302      	bcc.n	800a584 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a57e:	4b22      	ldr	r3, [pc, #136]	@ (800a608 <xTaskResumeAll+0x138>)
 800a580:	2201      	movs	r2, #1
 800a582:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a584:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f8 <xTaskResumeAll+0x128>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1c8      	bne.n	800a51e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a592:	f000 fc0d 	bl	800adb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a596:	4b1d      	ldr	r3, [pc, #116]	@ (800a60c <xTaskResumeAll+0x13c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d010      	beq.n	800a5c4 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a5a2:	f000 f859 	bl	800a658 <xTaskIncrementTick>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a5ac:	4b16      	ldr	r3, [pc, #88]	@ (800a608 <xTaskResumeAll+0x138>)
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1f1      	bne.n	800a5a2 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a5be:	4b13      	ldr	r3, [pc, #76]	@ (800a60c <xTaskResumeAll+0x13c>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a5c4:	4b10      	ldr	r3, [pc, #64]	@ (800a608 <xTaskResumeAll+0x138>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a610 <xTaskResumeAll+0x140>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a5e0:	f001 fe76 	bl	800c2d0 <vPortExitCritical>

    return xAlreadyYielded;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20001924 	.word	0x20001924
 800a5f4:	200018fc 	.word	0x200018fc
 800a5f8:	200018bc 	.word	0x200018bc
 800a5fc:	20001904 	.word	0x20001904
 800a600:	20001828 	.word	0x20001828
 800a604:	20001824 	.word	0x20001824
 800a608:	20001910 	.word	0x20001910
 800a60c:	2000190c 	.word	0x2000190c
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a61a:	4b05      	ldr	r3, [pc, #20]	@ (800a630 <xTaskGetTickCount+0x1c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a620:	687b      	ldr	r3, [r7, #4]
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20001900 	.word	0x20001900

0800a634 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a63a:	f001 ff07 	bl	800c44c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a642:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <xTaskGetTickCountFromISR+0x20>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a648:	683b      	ldr	r3, [r7, #0]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20001900 	.word	0x20001900

0800a658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a662:	4b51      	ldr	r3, [pc, #324]	@ (800a7a8 <xTaskIncrementTick+0x150>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 8093 	bne.w	800a792 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a66c:	4b4f      	ldr	r3, [pc, #316]	@ (800a7ac <xTaskIncrementTick+0x154>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a674:	4a4d      	ldr	r2, [pc, #308]	@ (800a7ac <xTaskIncrementTick+0x154>)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d121      	bne.n	800a6c4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a680:	4b4b      	ldr	r3, [pc, #300]	@ (800a7b0 <xTaskIncrementTick+0x158>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <xTaskIncrementTick+0x4a>
        __asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	603b      	str	r3, [r7, #0]
    }
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	e7fd      	b.n	800a69e <xTaskIncrementTick+0x46>
 800a6a2:	4b43      	ldr	r3, [pc, #268]	@ (800a7b0 <xTaskIncrementTick+0x158>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	4b42      	ldr	r3, [pc, #264]	@ (800a7b4 <xTaskIncrementTick+0x15c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a40      	ldr	r2, [pc, #256]	@ (800a7b0 <xTaskIncrementTick+0x158>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	4a40      	ldr	r2, [pc, #256]	@ (800a7b4 <xTaskIncrementTick+0x15c>)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	4b40      	ldr	r3, [pc, #256]	@ (800a7b8 <xTaskIncrementTick+0x160>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7b8 <xTaskIncrementTick+0x160>)
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	f000 fb76 	bl	800adb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a6c4:	4b3d      	ldr	r3, [pc, #244]	@ (800a7bc <xTaskIncrementTick+0x164>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d34c      	bcc.n	800a768 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ce:	4b38      	ldr	r3, [pc, #224]	@ (800a7b0 <xTaskIncrementTick+0x158>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6d8:	4b38      	ldr	r3, [pc, #224]	@ (800a7bc <xTaskIncrementTick+0x164>)
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6de:	601a      	str	r2, [r3, #0]
                    break;
 800a6e0:	e042      	b.n	800a768 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e2:	4b33      	ldr	r3, [pc, #204]	@ (800a7b0 <xTaskIncrementTick+0x158>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d203      	bcs.n	800a702 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a6fa:	4a30      	ldr	r2, [pc, #192]	@ (800a7bc <xTaskIncrementTick+0x164>)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a700:	e032      	b.n	800a768 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	3304      	adds	r3, #4
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fd2a 	bl	8009160 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	2b00      	cmp	r3, #0
 800a712:	d004      	beq.n	800a71e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	3318      	adds	r3, #24
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fd21 	bl	8009160 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f003 fe29 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72a:	2201      	movs	r2, #1
 800a72c:	409a      	lsls	r2, r3
 800a72e:	4b24      	ldr	r3, [pc, #144]	@ (800a7c0 <xTaskIncrementTick+0x168>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4313      	orrs	r3, r2
 800a734:	4a22      	ldr	r2, [pc, #136]	@ (800a7c0 <xTaskIncrementTick+0x168>)
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4a1f      	ldr	r2, [pc, #124]	@ (800a7c4 <xTaskIncrementTick+0x16c>)
 800a746:	441a      	add	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f7fe fca9 	bl	80090a6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a758:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c8 <xTaskIncrementTick+0x170>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75e:	429a      	cmp	r2, r3
 800a760:	d3b5      	bcc.n	800a6ce <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800a762:	2301      	movs	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a766:	e7b2      	b.n	800a6ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a768:	4b17      	ldr	r3, [pc, #92]	@ (800a7c8 <xTaskIncrementTick+0x170>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76e:	4915      	ldr	r1, [pc, #84]	@ (800a7c4 <xTaskIncrementTick+0x16c>)
 800a770:	4613      	mov	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	440b      	add	r3, r1
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d901      	bls.n	800a784 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a784:	4b11      	ldr	r3, [pc, #68]	@ (800a7cc <xTaskIncrementTick+0x174>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d007      	beq.n	800a79c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	e004      	b.n	800a79c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a792:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d0 <xTaskIncrementTick+0x178>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d0 <xTaskIncrementTick+0x178>)
 800a79a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a79c:	697b      	ldr	r3, [r7, #20]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20001924 	.word	0x20001924
 800a7ac:	20001900 	.word	0x20001900
 800a7b0:	200018b4 	.word	0x200018b4
 800a7b4:	200018b8 	.word	0x200018b8
 800a7b8:	20001914 	.word	0x20001914
 800a7bc:	2000191c 	.word	0x2000191c
 800a7c0:	20001904 	.word	0x20001904
 800a7c4:	20001828 	.word	0x20001828
 800a7c8:	20001824 	.word	0x20001824
 800a7cc:	20001910 	.word	0x20001910
 800a7d0:	2000190c 	.word	0x2000190c

0800a7d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7da:	4b2d      	ldr	r3, [pc, #180]	@ (800a890 <vTaskSwitchContext+0xbc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a894 <vTaskSwitchContext+0xc0>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a7e8:	e04e      	b.n	800a888 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800a7ea:	4b2a      	ldr	r3, [pc, #168]	@ (800a894 <vTaskSwitchContext+0xc0>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f0:	4b29      	ldr	r3, [pc, #164]	@ (800a898 <vTaskSwitchContext+0xc4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	fab3 f383 	clz	r3, r3
 800a7fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a7fe:	7afb      	ldrb	r3, [r7, #11]
 800a800:	f1c3 031f 	rsb	r3, r3, #31
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	4925      	ldr	r1, [pc, #148]	@ (800a89c <vTaskSwitchContext+0xc8>)
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <vTaskSwitchContext+0x5e>
        __asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	607b      	str	r3, [r7, #4]
    }
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	e7fd      	b.n	800a82e <vTaskSwitchContext+0x5a>
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4a17      	ldr	r2, [pc, #92]	@ (800a89c <vTaskSwitchContext+0xc8>)
 800a83e:	4413      	add	r3, r2
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	605a      	str	r2, [r3, #4]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	3308      	adds	r3, #8
 800a854:	429a      	cmp	r2, r3
 800a856:	d104      	bne.n	800a862 <vTaskSwitchContext+0x8e>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	4a0d      	ldr	r2, [pc, #52]	@ (800a8a0 <vTaskSwitchContext+0xcc>)
 800a86a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a86c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <vTaskSwitchContext+0xcc>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a4 <vTaskSwitchContext+0xd0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d102      	bne.n	800a87e <vTaskSwitchContext+0xaa>
 800a878:	f003 fcde 	bl	800e238 <SEGGER_SYSVIEW_OnIdle>
}
 800a87c:	e004      	b.n	800a888 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800a87e:	4b08      	ldr	r3, [pc, #32]	@ (800a8a0 <vTaskSwitchContext+0xcc>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f003 fd36 	bl	800e2f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20001924 	.word	0x20001924
 800a894:	20001910 	.word	0x20001910
 800a898:	20001904 	.word	0x20001904
 800a89c:	20001828 	.word	0x20001828
 800a8a0:	20001824 	.word	0x20001824
 800a8a4:	20001920 	.word	0x20001920

0800a8a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60fb      	str	r3, [r7, #12]
    }
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8d0:	4b07      	ldr	r3, [pc, #28]	@ (800a8f0 <vTaskPlaceOnEventList+0x48>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3318      	adds	r3, #24
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7fe fc08 	bl	80090ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8de:	2101      	movs	r1, #1
 800a8e0:	6838      	ldr	r0, [r7, #0]
 800a8e2:	f000 fefb 	bl	800b6dc <prvAddCurrentTaskToDelayedList>
}
 800a8e6:	bf00      	nop
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001824 	.word	0x20001824

0800a8f4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <vTaskPlaceOnUnorderedEventList+0x2a>
        __asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	617b      	str	r3, [r7, #20]
    }
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 800a91e:	4b12      	ldr	r3, [pc, #72]	@ (800a968 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10b      	bne.n	800a93e <vTaskPlaceOnUnorderedEventList+0x4a>
        __asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	613b      	str	r3, [r7, #16]
    }
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a93e:	4b0b      	ldr	r3, [pc, #44]	@ (800a96c <vTaskPlaceOnUnorderedEventList+0x78>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a948:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a94a:	4b08      	ldr	r3, [pc, #32]	@ (800a96c <vTaskPlaceOnUnorderedEventList+0x78>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3318      	adds	r3, #24
 800a950:	4619      	mov	r1, r3
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7fe fba7 	bl	80090a6 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a958:	2101      	movs	r1, #1
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 febe 	bl	800b6dc <prvAddCurrentTaskToDelayedList>
}
 800a960:	bf00      	nop
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20001924 	.word	0x20001924
 800a96c:	20001824 	.word	0x20001824

0800a970 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10b      	bne.n	800a99a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	617b      	str	r3, [r7, #20]
    }
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a99a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <vTaskPlaceOnEventListRestricted+0x5c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3318      	adds	r3, #24
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7fe fb7f 	bl	80090a6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9b2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a9b4:	2024      	movs	r0, #36	@ 0x24
 800a9b6:	f002 fe93 	bl	800d6e0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	68b8      	ldr	r0, [r7, #8]
 800a9be:	f000 fe8d 	bl	800b6dc <prvAddCurrentTaskToDelayedList>
    }
 800a9c2:	bf00      	nop
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20001824 	.word	0x20001824

0800a9d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60fb      	str	r3, [r7, #12]
    }
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	3318      	adds	r3, #24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe fbac 	bl	8009160 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa08:	4b1f      	ldr	r3, [pc, #124]	@ (800aa88 <xTaskRemoveFromEventList+0xb8>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d120      	bne.n	800aa52 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fba3 	bl	8009160 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f003 fcab 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa26:	2201      	movs	r2, #1
 800aa28:	409a      	lsls	r2, r3
 800aa2a:	4b18      	ldr	r3, [pc, #96]	@ (800aa8c <xTaskRemoveFromEventList+0xbc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	4a16      	ldr	r2, [pc, #88]	@ (800aa8c <xTaskRemoveFromEventList+0xbc>)
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4a13      	ldr	r2, [pc, #76]	@ (800aa90 <xTaskRemoveFromEventList+0xc0>)
 800aa42:	441a      	add	r2, r3
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fe fb2b 	bl	80090a6 <vListInsertEnd>
 800aa50:	e005      	b.n	800aa5e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3318      	adds	r3, #24
 800aa56:	4619      	mov	r1, r3
 800aa58:	480e      	ldr	r0, [pc, #56]	@ (800aa94 <xTaskRemoveFromEventList+0xc4>)
 800aa5a:	f7fe fb24 	bl	80090a6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	4b0d      	ldr	r3, [pc, #52]	@ (800aa98 <xTaskRemoveFromEventList+0xc8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d905      	bls.n	800aa78 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800aa70:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <xTaskRemoveFromEventList+0xcc>)
 800aa72:	2201      	movs	r2, #1
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	e001      	b.n	800aa7c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800aa7c:	697b      	ldr	r3, [r7, #20]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001924 	.word	0x20001924
 800aa8c:	20001904 	.word	0x20001904
 800aa90:	20001828 	.word	0x20001828
 800aa94:	200018bc 	.word	0x200018bc
 800aa98:	20001824 	.word	0x20001824
 800aa9c:	20001910 	.word	0x20001910

0800aaa0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800aaaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ab5c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10b      	bne.n	800aaca <vTaskRemoveFromUnorderedEventList+0x2a>
        __asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	613b      	str	r3, [r7, #16]
    }
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	e7fd      	b.n	800aac6 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10b      	bne.n	800aaf8 <vTaskRemoveFromUnorderedEventList+0x58>
        __asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	60fb      	str	r3, [r7, #12]
    }
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <vTaskRemoveFromUnorderedEventList+0x54>
    ( void ) uxListRemove( pxEventListItem );
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7fe fb31 	bl	8009160 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fb2c 	bl	8009160 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f003 fc34 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab14:	2201      	movs	r2, #1
 800ab16:	409a      	lsls	r2, r3
 800ab18:	4b11      	ldr	r3, [pc, #68]	@ (800ab60 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	4a10      	ldr	r2, [pc, #64]	@ (800ab60 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ab64 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800ab30:	441a      	add	r2, r3
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	3304      	adds	r3, #4
 800ab36:	4619      	mov	r1, r3
 800ab38:	4610      	mov	r0, r2
 800ab3a:	f7fe fab4 	bl	80090a6 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab42:	4b09      	ldr	r3, [pc, #36]	@ (800ab68 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d902      	bls.n	800ab52 <vTaskRemoveFromUnorderedEventList+0xb2>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vTaskRemoveFromUnorderedEventList+0xcc>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
    }
}
 800ab52:	bf00      	nop
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20001924 	.word	0x20001924
 800ab60:	20001904 	.word	0x20001904
 800ab64:	20001828 	.word	0x20001828
 800ab68:	20001824 	.word	0x20001824
 800ab6c:	20001910 	.word	0x20001910

0800ab70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab78:	4b06      	ldr	r3, [pc, #24]	@ (800ab94 <vTaskInternalSetTimeOutState+0x24>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ab80:	4b05      	ldr	r3, [pc, #20]	@ (800ab98 <vTaskInternalSetTimeOutState+0x28>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	605a      	str	r2, [r3, #4]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	20001914 	.word	0x20001914
 800ab98:	20001900 	.word	0x20001900

0800ab9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10b      	bne.n	800abc4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	613b      	str	r3, [r7, #16]
    }
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	e7fd      	b.n	800abc0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10b      	bne.n	800abe2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	60fb      	str	r3, [r7, #12]
    }
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	e7fd      	b.n	800abde <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800abe2:	f001 fb43 	bl	800c26c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800abe6:	4b1f      	ldr	r3, [pc, #124]	@ (800ac64 <xTaskCheckForTimeOut+0xc8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abfe:	d102      	bne.n	800ac06 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	e026      	b.n	800ac54 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	4b17      	ldr	r3, [pc, #92]	@ (800ac68 <xTaskCheckForTimeOut+0xcc>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d00a      	beq.n	800ac28 <xTaskCheckForTimeOut+0x8c>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d305      	bcc.n	800ac28 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	e015      	b.n	800ac54 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d20b      	bcs.n	800ac4a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	1ad2      	subs	r2, r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ff96 	bl	800ab70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61fb      	str	r3, [r7, #28]
 800ac48:	e004      	b.n	800ac54 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ac54:	f001 fb3c 	bl	800c2d0 <vPortExitCritical>

    return xReturn;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20001900 	.word	0x20001900
 800ac68:	20001914 	.word	0x20001914

0800ac6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ac70:	4b03      	ldr	r3, [pc, #12]	@ (800ac80 <vTaskMissedYield+0x14>)
 800ac72:	2201      	movs	r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
}
 800ac76:	bf00      	nop
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20001910 	.word	0x20001910

0800ac84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800ac8c:	f000 f852 	bl	800ad34 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac90:	4b06      	ldr	r3, [pc, #24]	@ (800acac <prvIdleTask+0x28>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d9f9      	bls.n	800ac8c <prvIdleTask+0x8>
                {
                    taskYIELD();
 800ac98:	4b05      	ldr	r3, [pc, #20]	@ (800acb0 <prvIdleTask+0x2c>)
 800ac9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aca8:	e7f0      	b.n	800ac8c <prvIdleTask+0x8>
 800acaa:	bf00      	nop
 800acac:	20001828 	.word	0x20001828
 800acb0:	e000ed04 	.word	0xe000ed04

0800acb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acba:	2300      	movs	r3, #0
 800acbc:	607b      	str	r3, [r7, #4]
 800acbe:	e00c      	b.n	800acda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	4613      	mov	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4a12      	ldr	r2, [pc, #72]	@ (800ad14 <prvInitialiseTaskLists+0x60>)
 800accc:	4413      	add	r3, r2
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe f9bc 	bl	800904c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3301      	adds	r3, #1
 800acd8:	607b      	str	r3, [r7, #4]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d9ef      	bls.n	800acc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ace0:	480d      	ldr	r0, [pc, #52]	@ (800ad18 <prvInitialiseTaskLists+0x64>)
 800ace2:	f7fe f9b3 	bl	800904c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ace6:	480d      	ldr	r0, [pc, #52]	@ (800ad1c <prvInitialiseTaskLists+0x68>)
 800ace8:	f7fe f9b0 	bl	800904c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800acec:	480c      	ldr	r0, [pc, #48]	@ (800ad20 <prvInitialiseTaskLists+0x6c>)
 800acee:	f7fe f9ad 	bl	800904c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800acf2:	480c      	ldr	r0, [pc, #48]	@ (800ad24 <prvInitialiseTaskLists+0x70>)
 800acf4:	f7fe f9aa 	bl	800904c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800acf8:	480b      	ldr	r0, [pc, #44]	@ (800ad28 <prvInitialiseTaskLists+0x74>)
 800acfa:	f7fe f9a7 	bl	800904c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800acfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ad2c <prvInitialiseTaskLists+0x78>)
 800ad00:	4a05      	ldr	r2, [pc, #20]	@ (800ad18 <prvInitialiseTaskLists+0x64>)
 800ad02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad04:	4b0a      	ldr	r3, [pc, #40]	@ (800ad30 <prvInitialiseTaskLists+0x7c>)
 800ad06:	4a05      	ldr	r2, [pc, #20]	@ (800ad1c <prvInitialiseTaskLists+0x68>)
 800ad08:	601a      	str	r2, [r3, #0]
}
 800ad0a:	bf00      	nop
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20001828 	.word	0x20001828
 800ad18:	2000188c 	.word	0x2000188c
 800ad1c:	200018a0 	.word	0x200018a0
 800ad20:	200018bc 	.word	0x200018bc
 800ad24:	200018d0 	.word	0x200018d0
 800ad28:	200018e8 	.word	0x200018e8
 800ad2c:	200018b4 	.word	0x200018b4
 800ad30:	200018b8 	.word	0x200018b8

0800ad34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad3a:	e019      	b.n	800ad70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800ad3c:	f001 fa96 	bl	800c26c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad40:	4b10      	ldr	r3, [pc, #64]	@ (800ad84 <prvCheckTasksWaitingTermination+0x50>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fa07 	bl	8009160 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <prvCheckTasksWaitingTermination+0x54>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4a0b      	ldr	r2, [pc, #44]	@ (800ad88 <prvCheckTasksWaitingTermination+0x54>)
 800ad5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ad5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad8c <prvCheckTasksWaitingTermination+0x58>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	4a0a      	ldr	r2, [pc, #40]	@ (800ad8c <prvCheckTasksWaitingTermination+0x58>)
 800ad64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ad66:	f001 fab3 	bl	800c2d0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f810 	bl	800ad90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad70:	4b06      	ldr	r3, [pc, #24]	@ (800ad8c <prvCheckTasksWaitingTermination+0x58>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1e1      	bne.n	800ad3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200018d0 	.word	0x200018d0
 800ad88:	200018fc 	.word	0x200018fc
 800ad8c:	200018e4 	.word	0x200018e4

0800ad90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f001 fc79 	bl	800c694 <vPortFree>
                vPortFree( pxTCB );
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fc76 	bl	800c694 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ade0 <prvResetNextTaskUnblockTime+0x30>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d104      	bne.n	800adc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800adbe:	4b09      	ldr	r3, [pc, #36]	@ (800ade4 <prvResetNextTaskUnblockTime+0x34>)
 800adc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800adc6:	e005      	b.n	800add4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800adc8:	4b05      	ldr	r3, [pc, #20]	@ (800ade0 <prvResetNextTaskUnblockTime+0x30>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a04      	ldr	r2, [pc, #16]	@ (800ade4 <prvResetNextTaskUnblockTime+0x34>)
 800add2:	6013      	str	r3, [r2, #0]
}
 800add4:	bf00      	nop
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	200018b4 	.word	0x200018b4
 800ade4:	2000191c 	.word	0x2000191c

0800ade8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800adee:	4b0b      	ldr	r3, [pc, #44]	@ (800ae1c <xTaskGetSchedulerState+0x34>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800adf6:	2301      	movs	r3, #1
 800adf8:	607b      	str	r3, [r7, #4]
 800adfa:	e008      	b.n	800ae0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adfc:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <xTaskGetSchedulerState+0x38>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800ae04:	2302      	movs	r3, #2
 800ae06:	607b      	str	r3, [r7, #4]
 800ae08:	e001      	b.n	800ae0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800ae0e:	687b      	ldr	r3, [r7, #4]
    }
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	20001908 	.word	0x20001908
 800ae20:	20001924 	.word	0x20001924

0800ae24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d063      	beq.n	800af02 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3e:	4b33      	ldr	r3, [pc, #204]	@ (800af0c <xTaskPriorityInherit+0xe8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d253      	bcs.n	800aef0 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	db06      	blt.n	800ae5e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae50:	4b2e      	ldr	r3, [pc, #184]	@ (800af0c <xTaskPriorityInherit+0xe8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae56:	f1c3 0205 	rsb	r2, r3, #5
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	6959      	ldr	r1, [r3, #20]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae66:	4613      	mov	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4a28      	ldr	r2, [pc, #160]	@ (800af10 <xTaskPriorityInherit+0xec>)
 800ae70:	4413      	add	r3, r2
 800ae72:	4299      	cmp	r1, r3
 800ae74:	d12f      	bne.n	800aed6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe f970 	bl	8009160 <uxListRemove>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10a      	bne.n	800ae9c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae90:	43da      	mvns	r2, r3
 800ae92:	4b20      	ldr	r3, [pc, #128]	@ (800af14 <xTaskPriorityInherit+0xf0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4013      	ands	r3, r2
 800ae98:	4a1e      	ldr	r2, [pc, #120]	@ (800af14 <xTaskPriorityInherit+0xf0>)
 800ae9a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae9c:	4b1b      	ldr	r3, [pc, #108]	@ (800af0c <xTaskPriorityInherit+0xe8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	2201      	movs	r2, #1
 800aeac:	409a      	lsls	r2, r3
 800aeae:	4b19      	ldr	r3, [pc, #100]	@ (800af14 <xTaskPriorityInherit+0xf0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	4a17      	ldr	r2, [pc, #92]	@ (800af14 <xTaskPriorityInherit+0xf0>)
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4a12      	ldr	r2, [pc, #72]	@ (800af10 <xTaskPriorityInherit+0xec>)
 800aec6:	441a      	add	r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7fe f8e9 	bl	80090a6 <vListInsertEnd>
 800aed4:	e004      	b.n	800aee0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <xTaskPriorityInherit+0xe8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4619      	mov	r1, r3
 800aee4:	2049      	movs	r0, #73	@ 0x49
 800aee6:	f002 fc19 	bl	800d71c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800aeea:	2301      	movs	r3, #1
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	e008      	b.n	800af02 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <xTaskPriorityInherit+0xe8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d201      	bcs.n	800af02 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800aefe:	2301      	movs	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800af02:	68fb      	ldr	r3, [r7, #12]
    }
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20001824 	.word	0x20001824
 800af10:	20001828 	.word	0x20001828
 800af14:	20001904 	.word	0x20001904

0800af18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800af24:	2300      	movs	r3, #0
 800af26:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d06a      	beq.n	800b004 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800af2e:	4b38      	ldr	r3, [pc, #224]	@ (800b010 <xTaskPriorityDisinherit+0xf8>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	429a      	cmp	r2, r3
 800af36:	d00b      	beq.n	800af50 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60fb      	str	r3, [r7, #12]
    }
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	e7fd      	b.n	800af4c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10b      	bne.n	800af70 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60bb      	str	r3, [r7, #8]
    }
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af82:	429a      	cmp	r2, r3
 800af84:	d03e      	beq.n	800b004 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d13a      	bne.n	800b004 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	3304      	adds	r3, #4
 800af92:	4618      	mov	r0, r3
 800af94:	f7fe f8e4 	bl	8009160 <uxListRemove>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10a      	bne.n	800afb4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa2:	2201      	movs	r2, #1
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	43da      	mvns	r2, r3
 800afaa:	4b1a      	ldr	r3, [pc, #104]	@ (800b014 <xTaskPriorityDisinherit+0xfc>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4013      	ands	r3, r2
 800afb0:	4a18      	ldr	r2, [pc, #96]	@ (800b014 <xTaskPriorityDisinherit+0xfc>)
 800afb2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4619      	mov	r1, r3
 800afb8:	204a      	movs	r0, #74	@ 0x4a
 800afba:	f002 fbaf 	bl	800d71c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	f1c3 0205 	rsb	r2, r3, #5
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd6:	2201      	movs	r2, #1
 800afd8:	409a      	lsls	r2, r3
 800afda:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <xTaskPriorityDisinherit+0xfc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4313      	orrs	r3, r2
 800afe0:	4a0c      	ldr	r2, [pc, #48]	@ (800b014 <xTaskPriorityDisinherit+0xfc>)
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4a09      	ldr	r2, [pc, #36]	@ (800b018 <xTaskPriorityDisinherit+0x100>)
 800aff2:	441a      	add	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	3304      	adds	r3, #4
 800aff8:	4619      	mov	r1, r3
 800affa:	4610      	mov	r0, r2
 800affc:	f7fe f853 	bl	80090a6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b000:	2301      	movs	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b004:	697b      	ldr	r3, [r7, #20]
    }
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20001824 	.word	0x20001824
 800b014:	20001904 	.word	0x20001904
 800b018:	20001828 	.word	0x20001828

0800b01c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b02a:	2301      	movs	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f000 8083 	beq.w	800b13c <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10b      	bne.n	800b056 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	60fb      	str	r3, [r7, #12]
    }
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	e7fd      	b.n	800b052 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d902      	bls.n	800b066 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	61fb      	str	r3, [r7, #28]
 800b064:	e002      	b.n	800b06c <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b06a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	429a      	cmp	r2, r3
 800b074:	d062      	beq.n	800b13c <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d15d      	bne.n	800b13c <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b080:	4b30      	ldr	r3, [pc, #192]	@ (800b144 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	429a      	cmp	r2, r3
 800b088:	d10b      	bne.n	800b0a2 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	60bb      	str	r3, [r7, #8]
    }
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	204a      	movs	r0, #74	@ 0x4a
 800b0a8:	f002 fb38 	bl	800d71c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	db04      	blt.n	800b0ca <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f1c3 0205 	rsb	r2, r3, #5
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	6959      	ldr	r1, [r3, #20]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4a1b      	ldr	r2, [pc, #108]	@ (800b148 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b0da:	4413      	add	r3, r2
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	d12d      	bne.n	800b13c <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe f83b 	bl	8009160 <uxListRemove>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	43da      	mvns	r2, r3
 800b0fc:	4b13      	ldr	r3, [pc, #76]	@ (800b14c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4013      	ands	r3, r2
 800b102:	4a12      	ldr	r2, [pc, #72]	@ (800b14c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b104:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	4618      	mov	r0, r3
 800b10a:	f003 f935 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b112:	2201      	movs	r2, #1
 800b114:	409a      	lsls	r2, r3
 800b116:	4b0d      	ldr	r3, [pc, #52]	@ (800b14c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	4a0b      	ldr	r2, [pc, #44]	@ (800b14c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4a06      	ldr	r2, [pc, #24]	@ (800b148 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b12e:	441a      	add	r2, r3
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	3304      	adds	r3, #4
 800b134:	4619      	mov	r1, r3
 800b136:	4610      	mov	r0, r2
 800b138:	f7fd ffb5 	bl	80090a6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b13c:	bf00      	nop
 800b13e:	3720      	adds	r7, #32
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	20001824 	.word	0x20001824
 800b148:	20001828 	.word	0x20001828
 800b14c:	20001904 	.word	0x20001904

0800b150 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b156:	4b09      	ldr	r3, [pc, #36]	@ (800b17c <uxTaskResetEventItemValue+0x2c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15e:	4b07      	ldr	r3, [pc, #28]	@ (800b17c <uxTaskResetEventItemValue+0x2c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b164:	4b05      	ldr	r3, [pc, #20]	@ (800b17c <uxTaskResetEventItemValue+0x2c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f1c2 0205 	rsb	r2, r2, #5
 800b16c:	619a      	str	r2, [r3, #24]

    return uxReturn;
 800b16e:	687b      	ldr	r3, [r7, #4]
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	20001824 	.word	0x20001824

0800b180 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b184:	4b07      	ldr	r3, [pc, #28]	@ (800b1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d004      	beq.n	800b196 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b18c:	4b05      	ldr	r3, [pc, #20]	@ (800b1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b192:	3201      	adds	r2, #1
 800b194:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800b196:	4b03      	ldr	r3, [pc, #12]	@ (800b1a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b198:	681b      	ldr	r3, [r3, #0]
    }
 800b19a:	4618      	mov	r0, r3
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	20001824 	.word	0x20001824

0800b1a8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	613b      	str	r3, [r7, #16]
    }
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	e7fd      	b.n	800b1d0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800b1d4:	f001 f84a 	bl	800c26c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b1d8:	4b36      	ldr	r3, [pc, #216]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	3354      	adds	r3, #84	@ 0x54
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d022      	beq.n	800b230 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800b1ea:	4b32      	ldr	r3, [pc, #200]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	3214      	adds	r2, #20
 800b1f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	43d2      	mvns	r2, r2
 800b1fa:	4011      	ands	r1, r2
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	3214      	adds	r2, #20
 800b200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b204:	4b2b      	ldr	r3, [pc, #172]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	3354      	adds	r3, #84	@ 0x54
 800b20e:	2201      	movs	r2, #1
 800b210:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b218:	2101      	movs	r1, #1
 800b21a:	6a38      	ldr	r0, [r7, #32]
 800b21c:	f000 fa5e 	bl	800b6dc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b220:	4b25      	ldr	r3, [pc, #148]	@ (800b2b8 <xTaskGenericNotifyWait+0x110>)
 800b222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b230:	f001 f84e 	bl	800c2d0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b234:	f001 f81a 	bl	800c26c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	4613      	mov	r3, r2
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	2040      	movs	r0, #64	@ 0x40
 800b246:	f002 fb75 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d007      	beq.n	800b260 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b250:	4b18      	ldr	r3, [pc, #96]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	3214      	adds	r2, #20
 800b258:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b260:	4b14      	ldr	r3, [pc, #80]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	3354      	adds	r3, #84	@ 0x54
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d002      	beq.n	800b278 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800b272:	2300      	movs	r3, #0
 800b274:	617b      	str	r3, [r7, #20]
 800b276:	e00e      	b.n	800b296 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800b278:	4b0e      	ldr	r3, [pc, #56]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	3214      	adds	r2, #20
 800b280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	43d2      	mvns	r2, r2
 800b288:	4011      	ands	r1, r2
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	3214      	adds	r2, #20
 800b28e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800b292:	2301      	movs	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b296:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <xTaskGenericNotifyWait+0x10c>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4413      	add	r3, r2
 800b29e:	3354      	adds	r3, #84	@ 0x54
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b2a4:	f001 f814 	bl	800c2d0 <vPortExitCritical>

        return xReturn;
 800b2a8:	697b      	ldr	r3, [r7, #20]
    }
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20001824 	.word	0x20001824
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08e      	sub	sp, #56	@ 0x38
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <xTaskGenericNotify+0x30>
        __asm volatile
 800b2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	623b      	str	r3, [r7, #32]
    }
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	e7fd      	b.n	800b2e8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10b      	bne.n	800b30a <xTaskGenericNotify+0x4e>
        __asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	61fb      	str	r3, [r7, #28]
    }
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	e7fd      	b.n	800b306 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800b30e:	f000 ffad 	bl	800c26c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800b312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	3214      	adds	r2, #20
 800b31e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4413      	add	r3, r2
 800b32c:	3354      	adds	r3, #84	@ 0x54
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4413      	add	r3, r2
 800b33a:	3354      	adds	r3, #84	@ 0x54
 800b33c:	2202      	movs	r2, #2
 800b33e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	2b04      	cmp	r3, #4
 800b344:	d83b      	bhi.n	800b3be <xTaskGenericNotify+0x102>
 800b346:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <xTaskGenericNotify+0x90>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b3df 	.word	0x0800b3df
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b37d 	.word	0x0800b37d
 800b358:	0800b395 	.word	0x0800b395
 800b35c:	0800b3a3 	.word	0x0800b3a3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	3214      	adds	r2, #20
 800b366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	ea42 0103 	orr.w	r1, r2, r3
 800b370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	3214      	adds	r2, #20
 800b376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b37a:	e033      	b.n	800b3e4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	3214      	adds	r2, #20
 800b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	3214      	adds	r2, #20
 800b38e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b392:	e027      	b.n	800b3e4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	3214      	adds	r2, #20
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b3a0:	e020      	b.n	800b3e4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d006      	beq.n	800b3b8 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	3214      	adds	r2, #20
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b3b6:	e015      	b.n	800b3e4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800b3bc:	e012      	b.n	800b3e4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b3be:	4b35      	ldr	r3, [pc, #212]	@ (800b494 <xTaskGenericNotify+0x1d8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00d      	beq.n	800b3e2 <xTaskGenericNotify+0x126>
        __asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	61bb      	str	r3, [r7, #24]
    }
 800b3d8:	bf00      	nop
 800b3da:	bf00      	nop
 800b3dc:	e7fd      	b.n	800b3da <xTaskGenericNotify+0x11e>
                    break;
 800b3de:	bf00      	nop
 800b3e0:	e000      	b.n	800b3e4 <xTaskGenericNotify+0x128>

                    break;
 800b3e2:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f003 f868 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	78fa      	ldrb	r2, [r7, #3]
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	203e      	movs	r0, #62	@ 0x3e
 800b3fa:	f002 fa9b 	bl	800d934 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b402:	2b01      	cmp	r3, #1
 800b404:	d13e      	bne.n	800b484 <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	3304      	adds	r3, #4
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fd fea8 	bl	8009160 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	4618      	mov	r0, r3
 800b414:	f002 ffb0 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41c:	2201      	movs	r2, #1
 800b41e:	409a      	lsls	r2, r3
 800b420:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <xTaskGenericNotify+0x1dc>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4313      	orrs	r3, r2
 800b426:	4a1c      	ldr	r2, [pc, #112]	@ (800b498 <xTaskGenericNotify+0x1dc>)
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a19      	ldr	r2, [pc, #100]	@ (800b49c <xTaskGenericNotify+0x1e0>)
 800b438:	441a      	add	r2, r3
 800b43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fd fe30 	bl	80090a6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00b      	beq.n	800b466 <xTaskGenericNotify+0x1aa>
        __asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
    }
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a0 <xTaskGenericNotify+0x1e4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b470:	429a      	cmp	r2, r3
 800b472:	d907      	bls.n	800b484 <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800b474:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <xTaskGenericNotify+0x1e8>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b484:	f000 ff24 	bl	800c2d0 <vPortExitCritical>

        return xReturn;
 800b488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b48a:	4618      	mov	r0, r3
 800b48c:	3730      	adds	r7, #48	@ 0x30
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20001900 	.word	0x20001900
 800b498:	20001904 	.word	0x20001904
 800b49c:	20001828 	.word	0x20001828
 800b4a0:	20001824 	.word	0x20001824
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b092      	sub	sp, #72	@ 0x48
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10b      	bne.n	800b4d8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00b      	beq.n	800b4f6 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f6:	f000 ffa9 	bl	800c44c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800b4fe:	f3ef 8211 	mrs	r2, BASEPRI
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	627a      	str	r2, [r7, #36]	@ 0x24
 800b514:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800b516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b518:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800b51a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d006      	beq.n	800b52e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	3214      	adds	r2, #20
 800b526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b52a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b52c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b52e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4413      	add	r3, r2
 800b534:	3354      	adds	r3, #84	@ 0x54
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b53c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	4413      	add	r3, r2
 800b542:	3354      	adds	r3, #84	@ 0x54
 800b544:	2202      	movs	r2, #2
 800b546:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d83b      	bhi.n	800b5c6 <xTaskGenericNotifyFromISR+0x11e>
 800b54e:	a201      	add	r2, pc, #4	@ (adr r2, 800b554 <xTaskGenericNotifyFromISR+0xac>)
 800b550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b554:	0800b5e7 	.word	0x0800b5e7
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b585 	.word	0x0800b585
 800b560:	0800b59d 	.word	0x0800b59d
 800b564:	0800b5ab 	.word	0x0800b5ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	3214      	adds	r2, #20
 800b56e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	ea42 0103 	orr.w	r1, r2, r3
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	3214      	adds	r2, #20
 800b57e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b582:	e033      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	3214      	adds	r2, #20
 800b58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58e:	1c59      	adds	r1, r3, #1
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	3214      	adds	r2, #20
 800b596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b59a:	e027      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	3214      	adds	r2, #20
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b5a8:	e020      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b5aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d006      	beq.n	800b5c0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	3214      	adds	r2, #20
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b5be:	e015      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800b5c4:	e012      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c0 <xTaskGenericNotifyFromISR+0x218>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	61fb      	str	r3, [r7, #28]
    }
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800b5e6:	bf00      	nop
 800b5e8:	e000      	b.n	800b5ec <xTaskGenericNotifyFromISR+0x144>
                    break;
 800b5ea:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800b5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 ff64 	bl	800e4bc <SEGGER_SYSVIEW_ShrinkId>
 800b5f4:	78f9      	ldrb	r1, [r7, #3]
 800b5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5fa:	9201      	str	r2, [sp, #4]
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	460b      	mov	r3, r1
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	4601      	mov	r1, r0
 800b604:	203f      	movs	r0, #63	@ 0x3f
 800b606:	f002 fa27 	bl	800da58 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b60a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d14a      	bne.n	800b6a8 <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00b      	beq.n	800b632 <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	61bb      	str	r3, [r7, #24]
    }
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	e7fd      	b.n	800b62e <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b632:	4b24      	ldr	r3, [pc, #144]	@ (800b6c4 <xTaskGenericNotifyFromISR+0x21c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d120      	bne.n	800b67c <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	3304      	adds	r3, #4
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fd fd8e 	bl	8009160 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800b644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b646:	4618      	mov	r0, r3
 800b648:	f002 fe96 	bl	800e378 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b650:	2201      	movs	r2, #1
 800b652:	409a      	lsls	r2, r3
 800b654:	4b1c      	ldr	r3, [pc, #112]	@ (800b6c8 <xTaskGenericNotifyFromISR+0x220>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4313      	orrs	r3, r2
 800b65a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6c8 <xTaskGenericNotifyFromISR+0x220>)
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4a18      	ldr	r2, [pc, #96]	@ (800b6cc <xTaskGenericNotifyFromISR+0x224>)
 800b66c:	441a      	add	r2, r3
 800b66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fd fd16 	bl	80090a6 <vListInsertEnd>
 800b67a:	e005      	b.n	800b688 <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67e:	3318      	adds	r3, #24
 800b680:	4619      	mov	r1, r3
 800b682:	4813      	ldr	r0, [pc, #76]	@ (800b6d0 <xTaskGenericNotifyFromISR+0x228>)
 800b684:	f7fd fd0f 	bl	80090a6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68c:	4b11      	ldr	r3, [pc, #68]	@ (800b6d4 <xTaskGenericNotifyFromISR+0x22c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	429a      	cmp	r2, r3
 800b694:	d908      	bls.n	800b6a8 <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800b696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800b69c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69e:	2201      	movs	r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800b6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d8 <xTaskGenericNotifyFromISR+0x230>)
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6aa:	617b      	str	r3, [r7, #20]
        __asm volatile
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f383 8811 	msr	BASEPRI, r3
    }
 800b6b2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800b6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3740      	adds	r7, #64	@ 0x40
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20001900 	.word	0x20001900
 800b6c4:	20001924 	.word	0x20001924
 800b6c8:	20001904 	.word	0x20001904
 800b6cc:	20001828 	.word	0x20001828
 800b6d0:	200018bc 	.word	0x200018bc
 800b6d4:	20001824 	.word	0x20001824
 800b6d8:	20001910 	.word	0x20001910

0800b6dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b6e6:	4b32      	ldr	r3, [pc, #200]	@ (800b7b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ec:	4b31      	ldr	r3, [pc, #196]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fd fd34 	bl	8009160 <uxListRemove>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	2201      	movs	r2, #1
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	43da      	mvns	r2, r3
 800b70c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4013      	ands	r3, r2
 800b712:	4a29      	ldr	r2, [pc, #164]	@ (800b7b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800b714:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b71c:	d110      	bne.n	800b740 <prvAddCurrentTaskToDelayedList+0x64>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00d      	beq.n	800b740 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800b724:	4b23      	ldr	r3, [pc, #140]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	211b      	movs	r1, #27
 800b72a:	4618      	mov	r0, r3
 800b72c:	f002 fe66 	bl	800e3fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b730:	4b20      	ldr	r3, [pc, #128]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4820      	ldr	r0, [pc, #128]	@ (800b7bc <prvAddCurrentTaskToDelayedList+0xe0>)
 800b73a:	f7fd fcb4 	bl	80090a6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b73e:	e032      	b.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4413      	add	r3, r2
 800b746:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b748:	4b1a      	ldr	r3, [pc, #104]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	429a      	cmp	r2, r3
 800b756:	d20f      	bcs.n	800b778 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b758:	4b16      	ldr	r3, [pc, #88]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2104      	movs	r1, #4
 800b75e:	4618      	mov	r0, r3
 800b760:	f002 fe4c 	bl	800e3fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b764:	4b16      	ldr	r3, [pc, #88]	@ (800b7c0 <prvAddCurrentTaskToDelayedList+0xe4>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7fd fcbc 	bl	80090ee <vListInsert>
}
 800b776:	e016      	b.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800b778:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2104      	movs	r1, #4
 800b77e:	4618      	mov	r0, r3
 800b780:	f002 fe3c 	bl	800e3fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b784:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fd fcac 	bl	80090ee <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b796:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <prvAddCurrentTaskToDelayedList+0xec>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d202      	bcs.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800b7a0:	4a09      	ldr	r2, [pc, #36]	@ (800b7c8 <prvAddCurrentTaskToDelayedList+0xec>)
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6013      	str	r3, [r2, #0]
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20001900 	.word	0x20001900
 800b7b4:	20001824 	.word	0x20001824
 800b7b8:	20001904 	.word	0x20001904
 800b7bc:	200018e8 	.word	0x200018e8
 800b7c0:	200018b8 	.word	0x200018b8
 800b7c4:	200018b4 	.word	0x200018b4
 800b7c8:	2000191c 	.word	0x2000191c

0800b7cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b7d6:	f000 fb3f 	bl	800be58 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b7da:	4b12      	ldr	r3, [pc, #72]	@ (800b824 <xTimerCreateTimerTask+0x58>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00b      	beq.n	800b7fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b7e2:	4b11      	ldr	r3, [pc, #68]	@ (800b828 <xTimerCreateTimerTask+0x5c>)
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b7f0:	490e      	ldr	r1, [pc, #56]	@ (800b82c <xTimerCreateTimerTask+0x60>)
 800b7f2:	480f      	ldr	r0, [pc, #60]	@ (800b830 <xTimerCreateTimerTask+0x64>)
 800b7f4:	f7fe fc98 	bl	800a128 <xTaskCreate>
 800b7f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10b      	bne.n	800b818 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	603b      	str	r3, [r7, #0]
    }
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	e7fd      	b.n	800b814 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800b818:	687b      	ldr	r3, [r7, #4]
    }
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001958 	.word	0x20001958
 800b828:	2000195c 	.word	0x2000195c
 800b82c:	0801298c 	.word	0x0801298c
 800b830:	0800ba29 	.word	0x0800ba29

0800b834 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af02      	add	r7, sp, #8
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b842:	202c      	movs	r0, #44	@ 0x2c
 800b844:	f000 fe44 	bl	800c4d0 <pvPortMalloc>
 800b848:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00d      	beq.n	800b86c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 f805 	bl	800b876 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b86c:	697b      	ldr	r3, [r7, #20]
        }
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b876:	b580      	push	{r7, lr}
 800b878:	b086      	sub	sp, #24
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
 800b882:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10b      	bne.n	800b8a2 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	617b      	str	r3, [r7, #20]
    }
 800b89c:	bf00      	nop
 800b89e:	bf00      	nop
 800b8a0:	e7fd      	b.n	800b89e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01e      	beq.n	800b8e6 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b8a8:	f000 fad6 	bl	800be58 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c0:	6a3a      	ldr	r2, [r7, #32]
 800b8c2:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fd fbdf 	bl	800908c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d008      	beq.n	800b8e6 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8da:	f043 0304 	orr.w	r3, r3, #4
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b8e6:	bf00      	nop
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08a      	sub	sp, #40	@ 0x28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10b      	bne.n	800b920 <xTimerGenericCommand+0x30>
        __asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	623b      	str	r3, [r7, #32]
    }
 800b91a:	bf00      	nop
 800b91c:	bf00      	nop
 800b91e:	e7fd      	b.n	800b91c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b920:	4b19      	ldr	r3, [pc, #100]	@ (800b988 <xTimerGenericCommand+0x98>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d02a      	beq.n	800b97e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b05      	cmp	r3, #5
 800b938:	dc18      	bgt.n	800b96c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b93a:	f7ff fa55 	bl	800ade8 <xTaskGetSchedulerState>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b02      	cmp	r3, #2
 800b942:	d109      	bne.n	800b958 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b944:	4b10      	ldr	r3, [pc, #64]	@ (800b988 <xTimerGenericCommand+0x98>)
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	f107 0114 	add.w	r1, r7, #20
 800b94c:	2300      	movs	r3, #0
 800b94e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b950:	f7fd fd26 	bl	80093a0 <xQueueGenericSend>
 800b954:	6278      	str	r0, [r7, #36]	@ 0x24
 800b956:	e012      	b.n	800b97e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b958:	4b0b      	ldr	r3, [pc, #44]	@ (800b988 <xTimerGenericCommand+0x98>)
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	f107 0114 	add.w	r1, r7, #20
 800b960:	2300      	movs	r3, #0
 800b962:	2200      	movs	r2, #0
 800b964:	f7fd fd1c 	bl	80093a0 <xQueueGenericSend>
 800b968:	6278      	str	r0, [r7, #36]	@ 0x24
 800b96a:	e008      	b.n	800b97e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <xTimerGenericCommand+0x98>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	f107 0114 	add.w	r1, r7, #20
 800b974:	2300      	movs	r3, #0
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	f7fd fe3c 	bl	80095f4 <xQueueGenericSendFromISR>
 800b97c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800b980:	4618      	mov	r0, r3
 800b982:	3728      	adds	r7, #40	@ 0x28
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20001958 	.word	0x20001958

0800b98c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af02      	add	r7, sp, #8
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b996:	4b23      	ldr	r3, [pc, #140]	@ (800ba24 <prvProcessExpiredTimer+0x98>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fd fbdb 	bl	8009160 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d023      	beq.n	800ba00 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	699a      	ldr	r2, [r3, #24]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	18d1      	adds	r1, r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	6978      	ldr	r0, [r7, #20]
 800b9c6:	f000 f8d5 	bl	800bb74 <prvInsertTimerInActiveList>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d020      	beq.n	800ba12 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	6978      	ldr	r0, [r7, #20]
 800b9dc:	f7ff ff88 	bl	800b8f0 <xTimerGenericCommand>
 800b9e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d114      	bne.n	800ba12 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	60fb      	str	r3, [r7, #12]
    }
 800b9fa:	bf00      	nop
 800b9fc:	bf00      	nop
 800b9fe:	e7fd      	b.n	800b9fc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba06:	f023 0301 	bic.w	r3, r3, #1
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	4798      	blx	r3
    }
 800ba1a:	bf00      	nop
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20001950 	.word	0x20001950

0800ba28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba30:	f107 0308 	add.w	r3, r7, #8
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 f859 	bl	800baec <prvGetNextExpireTime>
 800ba3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f805 	bl	800ba50 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ba46:	f000 f8d7 	bl	800bbf8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba4a:	bf00      	nop
 800ba4c:	e7f0      	b.n	800ba30 <prvTimerTask+0x8>
	...

0800ba50 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ba5a:	f7fe fd2b 	bl	800a4b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f866 	bl	800bb34 <prvSampleTimeNow>
 800ba68:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d130      	bne.n	800bad2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <prvProcessTimerOrBlockTask+0x3c>
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d806      	bhi.n	800ba8c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ba7e:	f7fe fd27 	bl	800a4d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff81 	bl	800b98c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ba8a:	e024      	b.n	800bad6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d008      	beq.n	800baa4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba92:	4b13      	ldr	r3, [pc, #76]	@ (800bae0 <prvProcessTimerOrBlockTask+0x90>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <prvProcessTimerOrBlockTask+0x50>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e000      	b.n	800baa2 <prvProcessTimerOrBlockTask+0x52>
 800baa0:	2300      	movs	r3, #0
 800baa2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800baa4:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <prvProcessTimerOrBlockTask+0x94>)
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	4619      	mov	r1, r3
 800bab2:	f7fe fb05 	bl	800a0c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800bab6:	f7fe fd0b 	bl	800a4d0 <xTaskResumeAll>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10a      	bne.n	800bad6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800bac0:	4b09      	ldr	r3, [pc, #36]	@ (800bae8 <prvProcessTimerOrBlockTask+0x98>)
 800bac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
    }
 800bad0:	e001      	b.n	800bad6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800bad2:	f7fe fcfd 	bl	800a4d0 <xTaskResumeAll>
    }
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20001954 	.word	0x20001954
 800bae4:	20001958 	.word	0x20001958
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800baf4:	4b0e      	ldr	r3, [pc, #56]	@ (800bb30 <prvGetNextExpireTime+0x44>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <prvGetNextExpireTime+0x16>
 800bafe:	2201      	movs	r2, #1
 800bb00:	e000      	b.n	800bb04 <prvGetNextExpireTime+0x18>
 800bb02:	2200      	movs	r2, #0
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d105      	bne.n	800bb1c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb10:	4b07      	ldr	r3, [pc, #28]	@ (800bb30 <prvGetNextExpireTime+0x44>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e001      	b.n	800bb20 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800bb20:	68fb      	ldr	r3, [r7, #12]
    }
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20001950 	.word	0x20001950

0800bb34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800bb3c:	f7fe fd6a 	bl	800a614 <xTaskGetTickCount>
 800bb40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800bb42:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <prvSampleTimeNow+0x3c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d205      	bcs.n	800bb58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800bb4c:	f000 f91e 	bl	800bd8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e002      	b.n	800bb5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800bb5e:	4a04      	ldr	r2, [pc, #16]	@ (800bb70 <prvSampleTimeNow+0x3c>)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800bb64:	68fb      	ldr	r3, [r7, #12]
    }
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20001960 	.word	0x20001960

0800bb74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d812      	bhi.n	800bbc0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d302      	bcc.n	800bbae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e01b      	b.n	800bbe6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbae:	4b10      	ldr	r3, [pc, #64]	@ (800bbf0 <prvInsertTimerInActiveList+0x7c>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7fd fa98 	bl	80090ee <vListInsert>
 800bbbe:	e012      	b.n	800bbe6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d206      	bcs.n	800bbd6 <prvInsertTimerInActiveList+0x62>
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d302      	bcc.n	800bbd6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	e007      	b.n	800bbe6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbd6:	4b07      	ldr	r3, [pc, #28]	@ (800bbf4 <prvInsertTimerInActiveList+0x80>)
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	f7fd fa84 	bl	80090ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 800bbe6:	697b      	ldr	r3, [r7, #20]
    }
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20001954 	.word	0x20001954
 800bbf4:	20001950 	.word	0x20001950

0800bbf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08c      	sub	sp, #48	@ 0x30
 800bbfc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbfe:	e0b2      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f2c0 80af 	blt.w	800bd66 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc16:	3304      	adds	r3, #4
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fd faa1 	bl	8009160 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc1e:	1d3b      	adds	r3, r7, #4
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff ff87 	bl	800bb34 <prvSampleTimeNow>
 800bc26:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	f200 8098 	bhi.w	800bd60 <prvProcessReceivedCommands+0x168>
 800bc30:	a201      	add	r2, pc, #4	@ (adr r2, 800bc38 <prvProcessReceivedCommands+0x40>)
 800bc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc36:	bf00      	nop
 800bc38:	0800bc61 	.word	0x0800bc61
 800bc3c:	0800bc61 	.word	0x0800bc61
 800bc40:	0800bc61 	.word	0x0800bc61
 800bc44:	0800bcd7 	.word	0x0800bcd7
 800bc48:	0800bceb 	.word	0x0800bceb
 800bc4c:	0800bd37 	.word	0x0800bd37
 800bc50:	0800bc61 	.word	0x0800bc61
 800bc54:	0800bc61 	.word	0x0800bc61
 800bc58:	0800bcd7 	.word	0x0800bcd7
 800bc5c:	0800bceb 	.word	0x0800bceb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc66:	f043 0301 	orr.w	r3, r3, #1
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	18d1      	adds	r1, r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a3a      	ldr	r2, [r7, #32]
 800bc7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc80:	f7ff ff78 	bl	800bb74 <prvInsertTimerInActiveList>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d06c      	beq.n	800bd64 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc90:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d061      	beq.n	800bd64 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	441a      	add	r2, r3
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2300      	movs	r3, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcb2:	f7ff fe1d 	bl	800b8f0 <xTimerGenericCommand>
 800bcb6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d152      	bne.n	800bd64 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	61bb      	str	r3, [r7, #24]
    }
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcdc:	f023 0301 	bic.w	r3, r3, #1
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800bce8:	e03d      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcf0:	f043 0301 	orr.w	r3, r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd00:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	617b      	str	r3, [r7, #20]
    }
 800bd1c:	bf00      	nop
 800bd1e:	bf00      	nop
 800bd20:	e7fd      	b.n	800bd1e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	18d1      	adds	r1, r2, r3
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	6a3a      	ldr	r2, [r7, #32]
 800bd2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd30:	f7ff ff20 	bl	800bb74 <prvInsertTimerInActiveList>
                        break;
 800bd34:	e017      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd3c:	f003 0302 	and.w	r3, r3, #2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800bd44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd46:	f000 fca5 	bl	800c694 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800bd4a:	e00c      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd52:	f023 0301 	bic.w	r3, r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800bd5e:	e002      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <prvProcessReceivedCommands+0x16e>
                        break;
 800bd64:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd66:	4b08      	ldr	r3, [pc, #32]	@ (800bd88 <prvProcessReceivedCommands+0x190>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f107 0108 	add.w	r1, r7, #8
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fd fd01 	bl	8009778 <xQueueReceive>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f47f af41 	bne.w	800bc00 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800bd7e:	bf00      	nop
 800bd80:	bf00      	nop
 800bd82:	3728      	adds	r7, #40	@ 0x28
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20001958 	.word	0x20001958

0800bd8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd92:	e049      	b.n	800be28 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd94:	4b2e      	ldr	r3, [pc, #184]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd9e:	4b2c      	ldr	r3, [pc, #176]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fd f9d7 	bl	8009160 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d02f      	beq.n	800be28 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4413      	add	r3, r2
 800bdd0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d90e      	bls.n	800bdf8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bde6:	4b1a      	ldr	r3, [pc, #104]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3304      	adds	r3, #4
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	f7fd f97c 	bl	80090ee <vListInsert>
 800bdf6:	e017      	b.n	800be28 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	2100      	movs	r1, #0
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fd74 	bl	800b8f0 <xTimerGenericCommand>
 800be08:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10b      	bne.n	800be28 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	603b      	str	r3, [r7, #0]
    }
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	e7fd      	b.n	800be24 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be28:	4b09      	ldr	r3, [pc, #36]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1b0      	bne.n	800bd94 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800be32:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800be38:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <prvSwitchTimerLists+0xc8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a04      	ldr	r2, [pc, #16]	@ (800be50 <prvSwitchTimerLists+0xc4>)
 800be3e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800be40:	4a04      	ldr	r2, [pc, #16]	@ (800be54 <prvSwitchTimerLists+0xc8>)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	6013      	str	r3, [r2, #0]
    }
 800be46:	bf00      	nop
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20001950 	.word	0x20001950
 800be54:	20001954 	.word	0x20001954

0800be58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800be5c:	f000 fa06 	bl	800c26c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800be60:	4b12      	ldr	r3, [pc, #72]	@ (800beac <prvCheckForValidListAndQueue+0x54>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d11d      	bne.n	800bea4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800be68:	4811      	ldr	r0, [pc, #68]	@ (800beb0 <prvCheckForValidListAndQueue+0x58>)
 800be6a:	f7fd f8ef 	bl	800904c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800be6e:	4811      	ldr	r0, [pc, #68]	@ (800beb4 <prvCheckForValidListAndQueue+0x5c>)
 800be70:	f7fd f8ec 	bl	800904c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800be74:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <prvCheckForValidListAndQueue+0x60>)
 800be76:	4a0e      	ldr	r2, [pc, #56]	@ (800beb0 <prvCheckForValidListAndQueue+0x58>)
 800be78:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800be7a:	4b10      	ldr	r3, [pc, #64]	@ (800bebc <prvCheckForValidListAndQueue+0x64>)
 800be7c:	4a0d      	ldr	r2, [pc, #52]	@ (800beb4 <prvCheckForValidListAndQueue+0x5c>)
 800be7e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800be80:	2200      	movs	r2, #0
 800be82:	210c      	movs	r1, #12
 800be84:	200a      	movs	r0, #10
 800be86:	f7fd f9ff 	bl	8009288 <xQueueGenericCreate>
 800be8a:	4603      	mov	r3, r0
 800be8c:	4a07      	ldr	r2, [pc, #28]	@ (800beac <prvCheckForValidListAndQueue+0x54>)
 800be8e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800be90:	4b06      	ldr	r3, [pc, #24]	@ (800beac <prvCheckForValidListAndQueue+0x54>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be98:	4b04      	ldr	r3, [pc, #16]	@ (800beac <prvCheckForValidListAndQueue+0x54>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4908      	ldr	r1, [pc, #32]	@ (800bec0 <prvCheckForValidListAndQueue+0x68>)
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe f8dc 	bl	800a05c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bea4:	f000 fa14 	bl	800c2d0 <vPortExitCritical>
    }
 800bea8:	bf00      	nop
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20001958 	.word	0x20001958
 800beb0:	20001928 	.word	0x20001928
 800beb4:	2000193c 	.word	0x2000193c
 800beb8:	20001950 	.word	0x20001950
 800bebc:	20001954 	.word	0x20001954
 800bec0:	08012994 	.word	0x08012994

0800bec4 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <pvTimerGetTimerID+0x2a>
        __asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60fb      	str	r3, [r7, #12]
    }
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800beee:	f000 f9bd 	bl	800c26c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800bef8:	f000 f9ea 	bl	800c2d0 <vPortExitCritical>

        return pvReturn;
 800befc:	693b      	ldr	r3, [r7, #16]
    }
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3b04      	subs	r3, #4
 800bf18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bf20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3b04      	subs	r3, #4
 800bf26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f023 0201 	bic.w	r2, r3, #1
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3b04      	subs	r3, #4
 800bf36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800bf38:	4a0c      	ldr	r2, [pc, #48]	@ (800bf6c <pxPortInitialiseStack+0x64>)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3b14      	subs	r3, #20
 800bf42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3b04      	subs	r3, #4
 800bf4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f06f 0202 	mvn.w	r2, #2
 800bf56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3b20      	subs	r3, #32
 800bf5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	0800bf71 	.word	0x0800bf71

0800bf70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800bf7a:	4b13      	ldr	r3, [pc, #76]	@ (800bfc8 <prvTaskExitError+0x58>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf82:	d00b      	beq.n	800bf9c <prvTaskExitError+0x2c>
        __asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	60fb      	str	r3, [r7, #12]
    }
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	e7fd      	b.n	800bf98 <prvTaskExitError+0x28>
        __asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	60bb      	str	r3, [r7, #8]
    }
 800bfae:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800bfb0:	bf00      	nop
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0fc      	beq.n	800bfb2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800bfb8:	bf00      	nop
 800bfba:	bf00      	nop
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	200000d8 	.word	0x200000d8
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800bfd0:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <pxCurrentTCBConst2>)
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	6808      	ldr	r0, [r1, #0]
 800bfd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f380 8809 	msr	PSP, r0
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8811 	msr	BASEPRI, r0
 800bfea:	4770      	bx	lr
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst2>:
 800bff0:	20001824 	.word	0x20001824
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800bff8:	4808      	ldr	r0, [pc, #32]	@ (800c01c <prvPortStartFirstTask+0x24>)
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	6800      	ldr	r0, [r0, #0]
 800bffe:	f380 8808 	msr	MSP, r0
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8814 	msr	CONTROL, r0
 800c00a:	b662      	cpsie	i
 800c00c:	b661      	cpsie	f
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	df00      	svc	0
 800c018:	bf00      	nop
 800c01a:	0000      	.short	0x0000
 800c01c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop

0800c024 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c02a:	4b47      	ldr	r3, [pc, #284]	@ (800c148 <xPortStartScheduler+0x124>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a47      	ldr	r2, [pc, #284]	@ (800c14c <xPortStartScheduler+0x128>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d10b      	bne.n	800c04c <xPortStartScheduler+0x28>
        __asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	613b      	str	r3, [r7, #16]
    }
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c04c:	4b3e      	ldr	r3, [pc, #248]	@ (800c148 <xPortStartScheduler+0x124>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a3f      	ldr	r2, [pc, #252]	@ (800c150 <xPortStartScheduler+0x12c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d10b      	bne.n	800c06e <xPortStartScheduler+0x4a>
        __asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	60fb      	str	r3, [r7, #12]
    }
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	e7fd      	b.n	800c06a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c06e:	4b39      	ldr	r3, [pc, #228]	@ (800c154 <xPortStartScheduler+0x130>)
 800c070:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	22ff      	movs	r2, #255	@ 0xff
 800c07e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c090:	b2da      	uxtb	r2, r3
 800c092:	4b31      	ldr	r3, [pc, #196]	@ (800c158 <xPortStartScheduler+0x134>)
 800c094:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c096:	4b31      	ldr	r3, [pc, #196]	@ (800c15c <xPortStartScheduler+0x138>)
 800c098:	2207      	movs	r2, #7
 800c09a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c09c:	e009      	b.n	800c0b2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800c09e:	4b2f      	ldr	r3, [pc, #188]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	4a2d      	ldr	r2, [pc, #180]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0ba:	2b80      	cmp	r3, #128	@ 0x80
 800c0bc:	d0ef      	beq.n	800c09e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0be:	4b27      	ldr	r3, [pc, #156]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f1c3 0307 	rsb	r3, r3, #7
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	d00b      	beq.n	800c0e2 <xPortStartScheduler+0xbe>
        __asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	60bb      	str	r3, [r7, #8]
    }
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	021b      	lsls	r3, r3, #8
 800c0e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0ea:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ec:	4b1b      	ldr	r3, [pc, #108]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0f4:	4a19      	ldr	r2, [pc, #100]	@ (800c15c <xPortStartScheduler+0x138>)
 800c0f6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800c100:	4b17      	ldr	r3, [pc, #92]	@ (800c160 <xPortStartScheduler+0x13c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a16      	ldr	r2, [pc, #88]	@ (800c160 <xPortStartScheduler+0x13c>)
 800c106:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c10a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800c10c:	4b14      	ldr	r3, [pc, #80]	@ (800c160 <xPortStartScheduler+0x13c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a13      	ldr	r2, [pc, #76]	@ (800c160 <xPortStartScheduler+0x13c>)
 800c112:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c116:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800c118:	f000 f968 	bl	800c3ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800c11c:	4b11      	ldr	r3, [pc, #68]	@ (800c164 <xPortStartScheduler+0x140>)
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800c122:	f000 f987 	bl	800c434 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c126:	4b10      	ldr	r3, [pc, #64]	@ (800c168 <xPortStartScheduler+0x144>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a0f      	ldr	r2, [pc, #60]	@ (800c168 <xPortStartScheduler+0x144>)
 800c12c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c130:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800c132:	f7ff ff61 	bl	800bff8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800c136:	f7fe fb4d 	bl	800a7d4 <vTaskSwitchContext>
    prvTaskExitError();
 800c13a:	f7ff ff19 	bl	800bf70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed00 	.word	0xe000ed00
 800c14c:	410fc271 	.word	0x410fc271
 800c150:	410fc270 	.word	0x410fc270
 800c154:	e000e400 	.word	0xe000e400
 800c158:	20001964 	.word	0x20001964
 800c15c:	20001968 	.word	0x20001968
 800c160:	e000ed20 	.word	0xe000ed20
 800c164:	200000d8 	.word	0x200000d8
 800c168:	e000ef34 	.word	0xe000ef34

0800c16c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c172:	4b38      	ldr	r3, [pc, #224]	@ (800c254 <vInitPrioGroupValue+0xe8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a38      	ldr	r2, [pc, #224]	@ (800c258 <vInitPrioGroupValue+0xec>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d10b      	bne.n	800c194 <vInitPrioGroupValue+0x28>
        __asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	613b      	str	r3, [r7, #16]
    }
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c194:	4b2f      	ldr	r3, [pc, #188]	@ (800c254 <vInitPrioGroupValue+0xe8>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a30      	ldr	r2, [pc, #192]	@ (800c25c <vInitPrioGroupValue+0xf0>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d10b      	bne.n	800c1b6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
    }
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1b6:	4b2a      	ldr	r3, [pc, #168]	@ (800c260 <vInitPrioGroupValue+0xf4>)
 800c1b8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	22ff      	movs	r2, #255	@ 0xff
 800c1c6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	4b22      	ldr	r3, [pc, #136]	@ (800c264 <vInitPrioGroupValue+0xf8>)
 800c1dc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1de:	4b22      	ldr	r3, [pc, #136]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c1e0:	2207      	movs	r2, #7
 800c1e2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1e4:	e009      	b.n	800c1fa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800c1e6:	4b20      	ldr	r3, [pc, #128]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	4a1e      	ldr	r2, [pc, #120]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c1ee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1fa:	78fb      	ldrb	r3, [r7, #3]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c202:	2b80      	cmp	r3, #128	@ 0x80
 800c204:	d0ef      	beq.n	800c1e6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c206:	4b18      	ldr	r3, [pc, #96]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f1c3 0307 	rsb	r3, r3, #7
 800c20e:	2b04      	cmp	r3, #4
 800c210:	d00b      	beq.n	800c22a <vInitPrioGroupValue+0xbe>
        __asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60bb      	str	r3, [r7, #8]
    }
 800c224:	bf00      	nop
 800c226:	bf00      	nop
 800c228:	e7fd      	b.n	800c226 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c22a:	4b0f      	ldr	r3, [pc, #60]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	021b      	lsls	r3, r3, #8
 800c230:	4a0d      	ldr	r2, [pc, #52]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c232:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c234:	4b0c      	ldr	r3, [pc, #48]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c23c:	4a0a      	ldr	r2, [pc, #40]	@ (800c268 <vInitPrioGroupValue+0xfc>)
 800c23e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	b2da      	uxtb	r2, r3
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800c248:	bf00      	nop
 800c24a:	371c      	adds	r7, #28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	e000ed00 	.word	0xe000ed00
 800c258:	410fc271 	.word	0x410fc271
 800c25c:	410fc270 	.word	0x410fc270
 800c260:	e000e400 	.word	0xe000e400
 800c264:	20001964 	.word	0x20001964
 800c268:	20001968 	.word	0x20001968

0800c26c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
        __asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	607b      	str	r3, [r7, #4]
    }
 800c284:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800c286:	4b10      	ldr	r3, [pc, #64]	@ (800c2c8 <vPortEnterCritical+0x5c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3301      	adds	r3, #1
 800c28c:	4a0e      	ldr	r2, [pc, #56]	@ (800c2c8 <vPortEnterCritical+0x5c>)
 800c28e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800c290:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c8 <vPortEnterCritical+0x5c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d110      	bne.n	800c2ba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c298:	4b0c      	ldr	r3, [pc, #48]	@ (800c2cc <vPortEnterCritical+0x60>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <vPortEnterCritical+0x4e>
        __asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	603b      	str	r3, [r7, #0]
    }
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <vPortEnterCritical+0x4a>
    }
}
 800c2ba:	bf00      	nop
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	200000d8 	.word	0x200000d8
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800c2d6:	4b12      	ldr	r3, [pc, #72]	@ (800c320 <vPortExitCritical+0x50>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10b      	bne.n	800c2f6 <vPortExitCritical+0x26>
        __asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	607b      	str	r3, [r7, #4]
    }
 800c2f0:	bf00      	nop
 800c2f2:	bf00      	nop
 800c2f4:	e7fd      	b.n	800c2f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c320 <vPortExitCritical+0x50>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	4a08      	ldr	r2, [pc, #32]	@ (800c320 <vPortExitCritical+0x50>)
 800c2fe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800c300:	4b07      	ldr	r3, [pc, #28]	@ (800c320 <vPortExitCritical+0x50>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <vPortExitCritical+0x44>
 800c308:	2300      	movs	r3, #0
 800c30a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	f383 8811 	msr	BASEPRI, r3
    }
 800c312:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	200000d8 	.word	0x200000d8
	...

0800c330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800c330:	f3ef 8009 	mrs	r0, PSP
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4b15      	ldr	r3, [pc, #84]	@ (800c390 <pxCurrentTCBConst>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f01e 0f10 	tst.w	lr, #16
 800c340:	bf08      	it	eq
 800c342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	6010      	str	r0, [r2, #0]
 800c34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c354:	f380 8811 	msr	BASEPRI, r0
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f7fe fa38 	bl	800a7d4 <vTaskSwitchContext>
 800c364:	f04f 0000 	mov.w	r0, #0
 800c368:	f380 8811 	msr	BASEPRI, r0
 800c36c:	bc09      	pop	{r0, r3}
 800c36e:	6819      	ldr	r1, [r3, #0]
 800c370:	6808      	ldr	r0, [r1, #0]
 800c372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c376:	f01e 0f10 	tst.w	lr, #16
 800c37a:	bf08      	it	eq
 800c37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c380:	f380 8809 	msr	PSP, r0
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w

0800c390 <pxCurrentTCBConst>:
 800c390:	20001824 	.word	0x20001824
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop

0800c398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
        __asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	607b      	str	r3, [r7, #4]
    }
 800c3b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800c3b2:	f001 fec7 	bl	800e144 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c3b6:	f7fe f94f 	bl	800a658 <xTaskIncrementTick>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800c3c0:	f001 ff1e 	bl	800e200 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3c4:	4b08      	ldr	r3, [pc, #32]	@ (800c3e8 <SysTick_Handler+0x50>)
 800c3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	e001      	b.n	800c3d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800c3ce:	f001 fefb 	bl	800e1c8 <SEGGER_SYSVIEW_RecordExitISR>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	f383 8811 	msr	BASEPRI, r3
    }
 800c3dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800c3de:	bf00      	nop
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	e000ed04 	.word	0xe000ed04

0800c3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c424 <vPortSetupTimerInterrupt+0x38>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c428 <vPortSetupTimerInterrupt+0x3c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a0a      	ldr	r2, [pc, #40]	@ (800c42c <vPortSetupTimerInterrupt+0x40>)
 800c402:	fba2 2303 	umull	r2, r3, r2, r3
 800c406:	099b      	lsrs	r3, r3, #6
 800c408:	4a09      	ldr	r2, [pc, #36]	@ (800c430 <vPortSetupTimerInterrupt+0x44>)
 800c40a:	3b01      	subs	r3, #1
 800c40c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c40e:	4b04      	ldr	r3, [pc, #16]	@ (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c410:	2207      	movs	r2, #7
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	e000e010 	.word	0xe000e010
 800c424:	e000e018 	.word	0xe000e018
 800c428:	200000c8 	.word	0x200000c8
 800c42c:	10624dd3 	.word	0x10624dd3
 800c430:	e000e014 	.word	0xe000e014

0800c434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800c434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c444 <vPortEnableVFP+0x10>
 800c438:	6801      	ldr	r1, [r0, #0]
 800c43a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c43e:	6001      	str	r1, [r0, #0]
 800c440:	4770      	bx	lr
 800c442:	0000      	.short	0x0000
 800c444:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop

0800c44c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800c452:	f3ef 8305 	mrs	r3, IPSR
 800c456:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2b0f      	cmp	r3, #15
 800c45c:	d915      	bls.n	800c48a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c45e:	4a18      	ldr	r2, [pc, #96]	@ (800c4c0 <vPortValidateInterruptPriority+0x74>)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c468:	4b16      	ldr	r3, [pc, #88]	@ (800c4c4 <vPortValidateInterruptPriority+0x78>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	7afa      	ldrb	r2, [r7, #11]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d20b      	bcs.n	800c48a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	607b      	str	r3, [r7, #4]
    }
 800c484:	bf00      	nop
 800c486:	bf00      	nop
 800c488:	e7fd      	b.n	800c486 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c48a:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c8 <vPortValidateInterruptPriority+0x7c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c492:	4b0e      	ldr	r3, [pc, #56]	@ (800c4cc <vPortValidateInterruptPriority+0x80>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d90b      	bls.n	800c4b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	603b      	str	r3, [r7, #0]
    }
 800c4ac:	bf00      	nop
 800c4ae:	bf00      	nop
 800c4b0:	e7fd      	b.n	800c4ae <vPortValidateInterruptPriority+0x62>
    }
 800c4b2:	bf00      	nop
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e000e3f0 	.word	0xe000e3f0
 800c4c4:	20001964 	.word	0x20001964
 800c4c8:	e000ed0c 	.word	0xe000ed0c
 800c4cc:	20001968 	.word	0x20001968

0800c4d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	@ 0x28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800c4dc:	f7fd ffea 	bl	800a4b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800c4e0:	4b66      	ldr	r3, [pc, #408]	@ (800c67c <pvPortMalloc+0x1ac>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800c4e8:	f000 f938 	bl	800c75c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4ec:	4b64      	ldr	r3, [pc, #400]	@ (800c680 <pvPortMalloc+0x1b0>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 80a9 	bne.w	800c64c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d02e      	beq.n	800c55e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800c500:	2208      	movs	r2, #8
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d228      	bcs.n	800c55e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800c50c:	2208      	movs	r2, #8
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4413      	add	r3, r2
 800c512:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d022      	beq.n	800c564 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f023 0307 	bic.w	r3, r3, #7
 800c524:	3308      	adds	r3, #8
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d215      	bcs.n	800c558 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f023 0307 	bic.w	r3, r3, #7
 800c532:	3308      	adds	r3, #8
 800c534:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d011      	beq.n	800c564 <pvPortMalloc+0x94>
        __asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	617b      	str	r3, [r7, #20]
    }
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c55c:	e002      	b.n	800c564 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	607b      	str	r3, [r7, #4]
 800c562:	e000      	b.n	800c566 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c564:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d06f      	beq.n	800c64c <pvPortMalloc+0x17c>
 800c56c:	4b45      	ldr	r3, [pc, #276]	@ (800c684 <pvPortMalloc+0x1b4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d86a      	bhi.n	800c64c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800c576:	4b44      	ldr	r3, [pc, #272]	@ (800c688 <pvPortMalloc+0x1b8>)
 800c578:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800c57a:	4b43      	ldr	r3, [pc, #268]	@ (800c688 <pvPortMalloc+0x1b8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c580:	e004      	b.n	800c58c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c584:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	429a      	cmp	r2, r3
 800c594:	d903      	bls.n	800c59e <pvPortMalloc+0xce>
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1f1      	bne.n	800c582 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800c59e:	4b37      	ldr	r3, [pc, #220]	@ (800c67c <pvPortMalloc+0x1ac>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d051      	beq.n	800c64c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5a8:	6a3b      	ldr	r3, [r7, #32]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	4413      	add	r3, r2
 800c5b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	1ad2      	subs	r2, r2, r3
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d920      	bls.n	800c60c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00b      	beq.n	800c5f4 <pvPortMalloc+0x124>
        __asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	613b      	str	r3, [r7, #16]
    }
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	1ad2      	subs	r2, r2, r3
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c606:	69b8      	ldr	r0, [r7, #24]
 800c608:	f000 f90a 	bl	800c820 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c60c:	4b1d      	ldr	r3, [pc, #116]	@ (800c684 <pvPortMalloc+0x1b4>)
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	4a1b      	ldr	r2, [pc, #108]	@ (800c684 <pvPortMalloc+0x1b4>)
 800c618:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c61a:	4b1a      	ldr	r3, [pc, #104]	@ (800c684 <pvPortMalloc+0x1b4>)
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b1b      	ldr	r3, [pc, #108]	@ (800c68c <pvPortMalloc+0x1bc>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d203      	bcs.n	800c62e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c626:	4b17      	ldr	r3, [pc, #92]	@ (800c684 <pvPortMalloc+0x1b4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a18      	ldr	r2, [pc, #96]	@ (800c68c <pvPortMalloc+0x1bc>)
 800c62c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	4b13      	ldr	r3, [pc, #76]	@ (800c680 <pvPortMalloc+0x1b0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	431a      	orrs	r2, r3
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800c642:	4b13      	ldr	r3, [pc, #76]	@ (800c690 <pvPortMalloc+0x1c0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3301      	adds	r3, #1
 800c648:	4a11      	ldr	r2, [pc, #68]	@ (800c690 <pvPortMalloc+0x1c0>)
 800c64a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c64c:	f7fd ff40 	bl	800a4d0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <pvPortMalloc+0x1a2>
        __asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	60fb      	str	r3, [r7, #12]
    }
 800c66c:	bf00      	nop
 800c66e:	bf00      	nop
 800c670:	e7fd      	b.n	800c66e <pvPortMalloc+0x19e>
    return pvReturn;
 800c672:	69fb      	ldr	r3, [r7, #28]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3728      	adds	r7, #40	@ 0x28
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	2001a974 	.word	0x2001a974
 800c680:	2001a988 	.word	0x2001a988
 800c684:	2001a978 	.word	0x2001a978
 800c688:	2001a96c 	.word	0x2001a96c
 800c68c:	2001a97c 	.word	0x2001a97c
 800c690:	2001a980 	.word	0x2001a980

0800c694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d04f      	beq.n	800c746 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800c6a6:	2308      	movs	r3, #8
 800c6a8:	425b      	negs	r3, r3
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	4b25      	ldr	r3, [pc, #148]	@ (800c750 <vPortFree+0xbc>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4013      	ands	r3, r2
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10b      	bne.n	800c6da <vPortFree+0x46>
        __asm volatile
 800c6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	60fb      	str	r3, [r7, #12]
    }
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop
 800c6d8:	e7fd      	b.n	800c6d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <vPortFree+0x66>
        __asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	60bb      	str	r3, [r7, #8]
    }
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	4b14      	ldr	r3, [pc, #80]	@ (800c750 <vPortFree+0xbc>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4013      	ands	r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d01e      	beq.n	800c746 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d11a      	bne.n	800c746 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	4b0e      	ldr	r3, [pc, #56]	@ (800c750 <vPortFree+0xbc>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	43db      	mvns	r3, r3
 800c71a:	401a      	ands	r2, r3
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800c720:	f7fd fec8 	bl	800a4b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b0a      	ldr	r3, [pc, #40]	@ (800c754 <vPortFree+0xc0>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4413      	add	r3, r2
 800c72e:	4a09      	ldr	r2, [pc, #36]	@ (800c754 <vPortFree+0xc0>)
 800c730:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c732:	6938      	ldr	r0, [r7, #16]
 800c734:	f000 f874 	bl	800c820 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800c738:	4b07      	ldr	r3, [pc, #28]	@ (800c758 <vPortFree+0xc4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3301      	adds	r3, #1
 800c73e:	4a06      	ldr	r2, [pc, #24]	@ (800c758 <vPortFree+0xc4>)
 800c740:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800c742:	f7fd fec5 	bl	800a4d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c746:	bf00      	nop
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	2001a988 	.word	0x2001a988
 800c754:	2001a978 	.word	0x2001a978
 800c758:	2001a984 	.word	0x2001a984

0800c75c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c762:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800c766:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800c768:	4b27      	ldr	r3, [pc, #156]	@ (800c808 <prvHeapInit+0xac>)
 800c76a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00c      	beq.n	800c790 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3307      	adds	r3, #7
 800c77a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	4a1f      	ldr	r2, [pc, #124]	@ (800c808 <prvHeapInit+0xac>)
 800c78c:	4413      	add	r3, r2
 800c78e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c794:	4a1d      	ldr	r2, [pc, #116]	@ (800c80c <prvHeapInit+0xb0>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800c79a:	4b1c      	ldr	r3, [pc, #112]	@ (800c80c <prvHeapInit+0xb0>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	1a9b      	subs	r3, r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f023 0307 	bic.w	r3, r3, #7
 800c7b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4a15      	ldr	r2, [pc, #84]	@ (800c810 <prvHeapInit+0xb4>)
 800c7bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c7be:	4b14      	ldr	r3, [pc, #80]	@ (800c810 <prvHeapInit+0xb4>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c7c6:	4b12      	ldr	r3, [pc, #72]	@ (800c810 <prvHeapInit+0xb4>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	1ad2      	subs	r2, r2, r3
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c810 <prvHeapInit+0xb4>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4a0a      	ldr	r2, [pc, #40]	@ (800c814 <prvHeapInit+0xb8>)
 800c7ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	4a09      	ldr	r2, [pc, #36]	@ (800c818 <prvHeapInit+0xbc>)
 800c7f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7f4:	4b09      	ldr	r3, [pc, #36]	@ (800c81c <prvHeapInit+0xc0>)
 800c7f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c7fa:	601a      	str	r2, [r3, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	2000196c 	.word	0x2000196c
 800c80c:	2001a96c 	.word	0x2001a96c
 800c810:	2001a974 	.word	0x2001a974
 800c814:	2001a97c 	.word	0x2001a97c
 800c818:	2001a978 	.word	0x2001a978
 800c81c:	2001a988 	.word	0x2001a988

0800c820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c828:	4b28      	ldr	r3, [pc, #160]	@ (800c8cc <prvInsertBlockIntoFreeList+0xac>)
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	e002      	b.n	800c834 <prvInsertBlockIntoFreeList+0x14>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d8f7      	bhi.n	800c82e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	4413      	add	r3, r2
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d108      	bne.n	800c862 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	441a      	add	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	441a      	add	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	429a      	cmp	r2, r3
 800c874:	d118      	bne.n	800c8a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b15      	ldr	r3, [pc, #84]	@ (800c8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d00d      	beq.n	800c89e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685a      	ldr	r2, [r3, #4]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	441a      	add	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	e008      	b.n	800c8b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c89e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	e003      	b.n	800c8b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d002      	beq.n	800c8be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c8be:	bf00      	nop
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	2001a96c 	.word	0x2001a96c
 800c8d0:	2001a974 	.word	0x2001a974

0800c8d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c8d8:	4803      	ldr	r0, [pc, #12]	@ (800c8e8 <_cbSendSystemDesc+0x14>)
 800c8da:	f001 fbdd 	bl	800e098 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800c8de:	4803      	ldr	r0, [pc, #12]	@ (800c8ec <_cbSendSystemDesc+0x18>)
 800c8e0:	f001 fbda 	bl	800e098 <SEGGER_SYSVIEW_SendSysDesc>
}
 800c8e4:	bf00      	nop
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	0801299c 	.word	0x0801299c
 800c8ec:	080129dc 	.word	0x080129dc

0800c8f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800c8f4:	4b06      	ldr	r3, [pc, #24]	@ (800c910 <SEGGER_SYSVIEW_Conf+0x20>)
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	4b05      	ldr	r3, [pc, #20]	@ (800c910 <SEGGER_SYSVIEW_Conf+0x20>)
 800c8fa:	6819      	ldr	r1, [r3, #0]
 800c8fc:	4b05      	ldr	r3, [pc, #20]	@ (800c914 <SEGGER_SYSVIEW_Conf+0x24>)
 800c8fe:	4a06      	ldr	r2, [pc, #24]	@ (800c918 <SEGGER_SYSVIEW_Conf+0x28>)
 800c900:	f000 fe9a 	bl	800d638 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c904:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800c908:	f000 feda 	bl	800d6c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c90c:	bf00      	nop
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200000c8 	.word	0x200000c8
 800c914:	0800c8d5 	.word	0x0800c8d5
 800c918:	08012a78 	.word	0x08012a78

0800c91c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c91e:	b085      	sub	sp, #20
 800c920:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	e033      	b.n	800c990 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c928:	491e      	ldr	r1, [pc, #120]	@ (800c9a4 <_cbSendTaskList+0x88>)
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	440b      	add	r3, r1
 800c936:	6818      	ldr	r0, [r3, #0]
 800c938:	491a      	ldr	r1, [pc, #104]	@ (800c9a4 <_cbSendTaskList+0x88>)
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	4613      	mov	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	440b      	add	r3, r1
 800c946:	3304      	adds	r3, #4
 800c948:	6819      	ldr	r1, [r3, #0]
 800c94a:	4c16      	ldr	r4, [pc, #88]	@ (800c9a4 <_cbSendTaskList+0x88>)
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4423      	add	r3, r4
 800c958:	3308      	adds	r3, #8
 800c95a:	681c      	ldr	r4, [r3, #0]
 800c95c:	4d11      	ldr	r5, [pc, #68]	@ (800c9a4 <_cbSendTaskList+0x88>)
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	4613      	mov	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	442b      	add	r3, r5
 800c96a:	330c      	adds	r3, #12
 800c96c:	681d      	ldr	r5, [r3, #0]
 800c96e:	4e0d      	ldr	r6, [pc, #52]	@ (800c9a4 <_cbSendTaskList+0x88>)
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4433      	add	r3, r6
 800c97c:	3310      	adds	r3, #16
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	462b      	mov	r3, r5
 800c984:	4622      	mov	r2, r4
 800c986:	f000 f8bd 	bl	800cb04 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	3301      	adds	r3, #1
 800c98e:	607b      	str	r3, [r7, #4]
 800c990:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <_cbSendTaskList+0x8c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	429a      	cmp	r2, r3
 800c998:	d3c6      	bcc.n	800c928 <_cbSendTaskList+0xc>
  }
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a4:	2001a98c 	.word	0x2001a98c
 800c9a8:	2001aa2c 	.word	0x2001aa2c

0800c9ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c9ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c9b4:	f7fd fe3e 	bl	800a634 <xTaskGetTickCountFromISR>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	469a      	mov	sl, r3
 800c9be:	4693      	mov	fp, r2
 800c9c0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c9c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	f04f 0a00 	mov.w	sl, #0
 800c9d0:	f04f 0b00 	mov.w	fp, #0
 800c9d4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c9d8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c9dc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	1a14      	subs	r4, r2, r0
 800c9e6:	eb63 0501 	sbc.w	r5, r3, r1
 800c9ea:	f04f 0200 	mov.w	r2, #0
 800c9ee:	f04f 0300 	mov.w	r3, #0
 800c9f2:	00ab      	lsls	r3, r5, #2
 800c9f4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c9f8:	00a2      	lsls	r2, r4, #2
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	461d      	mov	r5, r3
 800c9fe:	eb14 0800 	adds.w	r8, r4, r0
 800ca02:	eb45 0901 	adc.w	r9, r5, r1
 800ca06:	f04f 0200 	mov.w	r2, #0
 800ca0a:	f04f 0300 	mov.w	r3, #0
 800ca0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca1a:	4690      	mov	r8, r2
 800ca1c:	4699      	mov	r9, r3
 800ca1e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800ca22:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800ca26:	4610      	mov	r0, r2
 800ca28:	4619      	mov	r1, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800ca34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800ca42:	2205      	movs	r2, #5
 800ca44:	492b      	ldr	r1, [pc, #172]	@ (800caf4 <SYSVIEW_AddTask+0xc0>)
 800ca46:	68b8      	ldr	r0, [r7, #8]
 800ca48:	f002 fe27 	bl	800f69a <memcmp>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d04b      	beq.n	800caea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800ca52:	4b29      	ldr	r3, [pc, #164]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b07      	cmp	r3, #7
 800ca58:	d903      	bls.n	800ca62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800ca5a:	4828      	ldr	r0, [pc, #160]	@ (800cafc <SYSVIEW_AddTask+0xc8>)
 800ca5c:	f001 fe24 	bl	800e6a8 <SEGGER_SYSVIEW_Warn>
    return;
 800ca60:	e044      	b.n	800caec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800ca62:	4b25      	ldr	r3, [pc, #148]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	4926      	ldr	r1, [pc, #152]	@ (800cb00 <SYSVIEW_AddTask+0xcc>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	440b      	add	r3, r1
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800ca76:	4b20      	ldr	r3, [pc, #128]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4921      	ldr	r1, [pc, #132]	@ (800cb00 <SYSVIEW_AddTask+0xcc>)
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	440b      	add	r3, r1
 800ca86:	3304      	adds	r3, #4
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800ca8c:	4b1a      	ldr	r3, [pc, #104]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	491b      	ldr	r1, [pc, #108]	@ (800cb00 <SYSVIEW_AddTask+0xcc>)
 800ca92:	4613      	mov	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	440b      	add	r3, r1
 800ca9c:	3308      	adds	r3, #8
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800caa2:	4b15      	ldr	r3, [pc, #84]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4916      	ldr	r1, [pc, #88]	@ (800cb00 <SYSVIEW_AddTask+0xcc>)
 800caa8:	4613      	mov	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	440b      	add	r3, r1
 800cab2:	330c      	adds	r3, #12
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800cab8:	4b0f      	ldr	r3, [pc, #60]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	4910      	ldr	r1, [pc, #64]	@ (800cb00 <SYSVIEW_AddTask+0xcc>)
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	440b      	add	r3, r1
 800cac8:	3310      	adds	r3, #16
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800cace:	4b0a      	ldr	r3, [pc, #40]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	4a08      	ldr	r2, [pc, #32]	@ (800caf8 <SYSVIEW_AddTask+0xc4>)
 800cad6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	68b9      	ldr	r1, [r7, #8]
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 f80e 	bl	800cb04 <SYSVIEW_SendTaskInfo>
 800cae8:	e000      	b.n	800caec <SYSVIEW_AddTask+0xb8>
    return;
 800caea:	bf00      	nop

}
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	080129ec 	.word	0x080129ec
 800caf8:	2001aa2c 	.word	0x2001aa2c
 800cafc:	080129f4 	.word	0x080129f4
 800cb00:	2001a98c 	.word	0x2001a98c

0800cb04 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08a      	sub	sp, #40	@ 0x28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	2214      	movs	r2, #20
 800cb18:	2100      	movs	r1, #0
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f002 fdcd 	bl	800f6ba <memset>
  TaskInfo.TaskID     = TaskID;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800cb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800cb34:	f107 0314 	add.w	r3, r7, #20
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f001 f9b5 	bl	800dea8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800cb3e:	bf00      	nop
 800cb40:	3728      	adds	r7, #40	@ 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800cb4e:	4b26      	ldr	r3, [pc, #152]	@ (800cbe8 <_DoInit+0xa0>)
 800cb50:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800cb52:	22a8      	movs	r2, #168	@ 0xa8
 800cb54:	2100      	movs	r1, #0
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f002 fdaf 	bl	800f6ba <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2203      	movs	r2, #3
 800cb60:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2203      	movs	r2, #3
 800cb66:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	4a20      	ldr	r2, [pc, #128]	@ (800cbec <_DoInit+0xa4>)
 800cb6c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	4a1f      	ldr	r2, [pc, #124]	@ (800cbf0 <_DoInit+0xa8>)
 800cb72:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cb7a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2200      	movs	r2, #0
 800cb86:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	4a16      	ldr	r2, [pc, #88]	@ (800cbec <_DoInit+0xa4>)
 800cb92:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	4a17      	ldr	r2, [pc, #92]	@ (800cbf4 <_DoInit+0xac>)
 800cb98:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2200      	movs	r2, #0
 800cba4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800cbb2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	607b      	str	r3, [r7, #4]
 800cbba:	e00c      	b.n	800cbd6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f1c3 030f 	rsb	r3, r3, #15
 800cbc2:	4a0d      	ldr	r2, [pc, #52]	@ (800cbf8 <_DoInit+0xb0>)
 800cbc4:	5cd1      	ldrb	r1, [r2, r3]
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4413      	add	r3, r2
 800cbcc:	460a      	mov	r2, r1
 800cbce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b0f      	cmp	r3, #15
 800cbda:	d9ef      	bls.n	800cbbc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800cbdc:	f3bf 8f5f 	dmb	sy
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	2001aa30 	.word	0x2001aa30
 800cbec:	08012a44 	.word	0x08012a44
 800cbf0:	2001aad8 	.word	0x2001aad8
 800cbf4:	2001aed8 	.word	0x2001aed8
 800cbf8:	08012a80 	.word	0x08012a80

0800cbfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	@ 0x28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d905      	bls.n	800cc2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	3b01      	subs	r3, #1
 800cc28:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc2a:	e007      	b.n	800cc3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	689a      	ldr	r2, [r3, #8]
 800cc30:	69b9      	ldr	r1, [r7, #24]
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	1acb      	subs	r3, r1, r3
 800cc36:	4413      	add	r3, r2
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	689a      	ldr	r2, [r3, #8]
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc46:	4293      	cmp	r3, r2
 800cc48:	bf28      	it	cs
 800cc4a:	4613      	movcs	r3, r2
 800cc4c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800cc4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4293      	cmp	r3, r2
 800cc54:	bf28      	it	cs
 800cc56:	4613      	movcs	r3, r2
 800cc58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	4413      	add	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800cc64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	6978      	ldr	r0, [r7, #20]
 800cc6a:	f002 fda2 	bl	800f7b2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800cc6e:	6a3a      	ldr	r2, [r7, #32]
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	4413      	add	r3, r2
 800cc74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	4413      	add	r3, r2
 800cc7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800cc86:	69fa      	ldr	r2, [r7, #28]
 800cc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8a:	4413      	add	r3, r2
 800cc8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d101      	bne.n	800cc9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800cc9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	69fa      	ldr	r2, [r7, #28]
 800cca4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1b2      	bne.n	800cc12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800ccac:	6a3b      	ldr	r3, [r7, #32]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3728      	adds	r7, #40	@ 0x28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b088      	sub	sp, #32
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	689a      	ldr	r2, [r3, #8]
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800ccd2:	69ba      	ldr	r2, [r7, #24]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d911      	bls.n	800ccfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	4413      	add	r3, r2
 800cce2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	6938      	ldr	r0, [r7, #16]
 800ccea:	f002 fd62 	bl	800f7b2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ccee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800ccf2:	69fa      	ldr	r2, [r7, #28]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	441a      	add	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800ccfc:	e01f      	b.n	800cd3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	4413      	add	r3, r2
 800cd0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	6938      	ldr	r0, [r7, #16]
 800cd12:	f002 fd4e 	bl	800f7b2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	4413      	add	r3, r2
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6938      	ldr	r0, [r7, #16]
 800cd30:	f002 fd3f 	bl	800f7b2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800cd34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	60da      	str	r2, [r3, #12]
}
 800cd3e:	bf00      	nop
 800cd40:	3720      	adds	r7, #32
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800cd46:	b480      	push	{r7}
 800cd48:	b087      	sub	sp, #28
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d808      	bhi.n	800cd74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	e004      	b.n	800cd7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	371c      	adds	r7, #28
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08c      	sub	sp, #48	@ 0x30
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800cd98:	4b3e      	ldr	r3, [pc, #248]	@ (800ce94 <SEGGER_RTT_ReadNoLock+0x108>)
 800cd9a:	623b      	str	r3, [r7, #32]
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b53      	cmp	r3, #83	@ 0x53
 800cda4:	d001      	beq.n	800cdaa <SEGGER_RTT_ReadNoLock+0x1e>
 800cda6:	f7ff fecf 	bl	800cb48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	4613      	mov	r3, r2
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	4413      	add	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	3360      	adds	r3, #96	@ 0x60
 800cdb6:	4a37      	ldr	r2, [pc, #220]	@ (800ce94 <SEGGER_RTT_ReadNoLock+0x108>)
 800cdb8:	4413      	add	r3, r2
 800cdba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800cdd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d92b      	bls.n	800ce30 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4293      	cmp	r3, r2
 800cde8:	bf28      	it	cs
 800cdea:	4613      	movcs	r3, r2
 800cdec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	4413      	add	r3, r2
 800cdf6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	6939      	ldr	r1, [r7, #16]
 800cdfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdfe:	f002 fcd8 	bl	800f7b2 <memcpy>
    NumBytesRead += NumBytesRem;
 800ce02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	4413      	add	r3, r2
 800ce08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800ce0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	4413      	add	r3, r2
 800ce10:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800ce1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	4413      	add	r3, r2
 800ce20:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d101      	bne.n	800ce30 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	bf28      	it	cs
 800ce40:	4613      	movcs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d019      	beq.n	800ce7e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	4413      	add	r3, r2
 800ce52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	6939      	ldr	r1, [r7, #16]
 800ce58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce5a:	f002 fcaa 	bl	800f7b2 <memcpy>
    NumBytesRead += NumBytesRem;
 800ce5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800ce66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800ce76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800ce7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800ce8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3730      	adds	r7, #48	@ 0x30
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	2001aa30 	.word	0x2001aa30

0800ce98 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b088      	sub	sp, #32
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	4613      	mov	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	4a1f      	ldr	r2, [pc, #124]	@ (800cf34 <SEGGER_RTT_WriteNoLock+0x9c>)
 800ceb6:	4413      	add	r3, r2
 800ceb8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d029      	beq.n	800cf16 <SEGGER_RTT_WriteNoLock+0x7e>
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d82e      	bhi.n	800cf24 <SEGGER_RTT_WriteNoLock+0x8c>
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d002      	beq.n	800ced0 <SEGGER_RTT_WriteNoLock+0x38>
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d013      	beq.n	800cef6 <SEGGER_RTT_WriteNoLock+0x5e>
 800cece:	e029      	b.n	800cf24 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800ced0:	6978      	ldr	r0, [r7, #20]
 800ced2:	f7ff ff38 	bl	800cd46 <_GetAvailWriteSpace>
 800ced6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d202      	bcs.n	800cee6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800cee4:	e021      	b.n	800cf2a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	69b9      	ldr	r1, [r7, #24]
 800ceee:	6978      	ldr	r0, [r7, #20]
 800cef0:	f7ff fee1 	bl	800ccb6 <_WriteNoCheck>
    break;
 800cef4:	e019      	b.n	800cf2a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800cef6:	6978      	ldr	r0, [r7, #20]
 800cef8:	f7ff ff25 	bl	800cd46 <_GetAvailWriteSpace>
 800cefc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	4293      	cmp	r3, r2
 800cf04:	bf28      	it	cs
 800cf06:	4613      	movcs	r3, r2
 800cf08:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	69b9      	ldr	r1, [r7, #24]
 800cf0e:	6978      	ldr	r0, [r7, #20]
 800cf10:	f7ff fed1 	bl	800ccb6 <_WriteNoCheck>
    break;
 800cf14:	e009      	b.n	800cf2a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	69b9      	ldr	r1, [r7, #24]
 800cf1a:	6978      	ldr	r0, [r7, #20]
 800cf1c:	f7ff fe6e 	bl	800cbfc <_WriteBlocking>
 800cf20:	61f8      	str	r0, [r7, #28]
    break;
 800cf22:	e002      	b.n	800cf2a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61fb      	str	r3, [r7, #28]
    break;
 800cf28:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	2001aa30 	.word	0x2001aa30

0800cf38 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800cf44:	4b0e      	ldr	r3, [pc, #56]	@ (800cf80 <SEGGER_RTT_Write+0x48>)
 800cf46:	61fb      	str	r3, [r7, #28]
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	2b53      	cmp	r3, #83	@ 0x53
 800cf50:	d001      	beq.n	800cf56 <SEGGER_RTT_Write+0x1e>
 800cf52:	f7ff fdf9 	bl	800cb48 <_DoInit>
  SEGGER_RTT_LOCK();
 800cf56:	f3ef 8311 	mrs	r3, BASEPRI
 800cf5a:	f04f 0120 	mov.w	r1, #32
 800cf5e:	f381 8811 	msr	BASEPRI, r1
 800cf62:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	68b9      	ldr	r1, [r7, #8]
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f7ff ff95 	bl	800ce98 <SEGGER_RTT_WriteNoLock>
 800cf6e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800cf76:	697b      	ldr	r3, [r7, #20]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2001aa30 	.word	0x2001aa30

0800cf84 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800cf92:	4b3d      	ldr	r3, [pc, #244]	@ (800d088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800cf94:	61bb      	str	r3, [r7, #24]
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b53      	cmp	r3, #83	@ 0x53
 800cf9e:	d001      	beq.n	800cfa4 <SEGGER_RTT_AllocUpBuffer+0x20>
 800cfa0:	f7ff fdd2 	bl	800cb48 <_DoInit>
  SEGGER_RTT_LOCK();
 800cfa4:	f3ef 8311 	mrs	r3, BASEPRI
 800cfa8:	f04f 0120 	mov.w	r1, #32
 800cfac:	f381 8811 	msr	BASEPRI, r1
 800cfb0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800cfb2:	4b35      	ldr	r3, [pc, #212]	@ (800d088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800cfb4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800cfba:	6939      	ldr	r1, [r7, #16]
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	3304      	adds	r3, #4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d008      	beq.n	800cfe4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	69fa      	ldr	r2, [r7, #28]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	dbeb      	blt.n	800cfba <SEGGER_RTT_AllocUpBuffer+0x36>
 800cfe2:	e000      	b.n	800cfe6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800cfe4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	da3f      	bge.n	800d070 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800cff0:	6939      	ldr	r1, [r7, #16]
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800d004:	6939      	ldr	r1, [r7, #16]
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	4613      	mov	r3, r2
 800d00c:	005b      	lsls	r3, r3, #1
 800d00e:	4413      	add	r3, r2
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	440b      	add	r3, r1
 800d014:	3304      	adds	r3, #4
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800d01a:	6939      	ldr	r1, [r7, #16]
 800d01c:	69fa      	ldr	r2, [r7, #28]
 800d01e:	4613      	mov	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	4413      	add	r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	440b      	add	r3, r1
 800d028:	3320      	adds	r3, #32
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800d02e:	6939      	ldr	r1, [r7, #16]
 800d030:	69fa      	ldr	r2, [r7, #28]
 800d032:	4613      	mov	r3, r2
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	4413      	add	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	440b      	add	r3, r1
 800d03c:	3328      	adds	r3, #40	@ 0x28
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800d042:	6939      	ldr	r1, [r7, #16]
 800d044:	69fa      	ldr	r2, [r7, #28]
 800d046:	4613      	mov	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	3324      	adds	r3, #36	@ 0x24
 800d052:	2200      	movs	r2, #0
 800d054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800d056:	6939      	ldr	r1, [r7, #16]
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	4613      	mov	r3, r2
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	440b      	add	r3, r1
 800d064:	332c      	adds	r3, #44	@ 0x2c
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800d06a:	f3bf 8f5f 	dmb	sy
 800d06e:	e002      	b.n	800d076 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800d070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d074:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800d07c:	69fb      	ldr	r3, [r7, #28]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	2001aa30 	.word	0x2001aa30

0800d08c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	@ 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800d09a:	4b21      	ldr	r3, [pc, #132]	@ (800d120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800d09c:	623b      	str	r3, [r7, #32]
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b53      	cmp	r3, #83	@ 0x53
 800d0a6:	d001      	beq.n	800d0ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 800d0a8:	f7ff fd4e 	bl	800cb48 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800d0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800d120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800d0ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d82c      	bhi.n	800d110 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800d0b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ba:	f04f 0120 	mov.w	r1, #32
 800d0be:	f381 8811 	msr	BASEPRI, r1
 800d0c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	4413      	add	r3, r2
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	3360      	adds	r3, #96	@ 0x60
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00e      	beq.n	800d0fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800d100:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d10e:	e002      	b.n	800d116 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800d110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d114:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3728      	adds	r7, #40	@ 0x28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	2001aa30 	.word	0x2001aa30

0800d124 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800d124:	b480      	push	{r7}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	60fa      	str	r2, [r7, #12]
 800d13a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b80      	cmp	r3, #128	@ 0x80
 800d140:	d90a      	bls.n	800d158 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800d142:	2380      	movs	r3, #128	@ 0x80
 800d144:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800d146:	e007      	b.n	800d158 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	1c53      	adds	r3, r2, #1
 800d14c:	60bb      	str	r3, [r7, #8]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	1c59      	adds	r1, r3, #1
 800d152:	60f9      	str	r1, [r7, #12]
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	1e5a      	subs	r2, r3, #1
 800d15c:	607a      	str	r2, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <_EncodeStr+0x46>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1ee      	bne.n	800d148 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	b2da      	uxtb	r2, r3
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800d176:	68fb      	ldr	r3, [r7, #12]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	371c      	adds	r7, #28
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3307      	adds	r3, #7
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d1a2:	4b34      	ldr	r3, [pc, #208]	@ (800d274 <_HandleIncomingPacket+0xd8>)
 800d1a4:	7e1b      	ldrb	r3, [r3, #24]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	1cfb      	adds	r3, r7, #3
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f7ff fded 	bl	800cd8c <SEGGER_RTT_ReadNoLock>
 800d1b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d057      	beq.n	800d26a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	2b80      	cmp	r3, #128	@ 0x80
 800d1be:	d031      	beq.n	800d224 <_HandleIncomingPacket+0x88>
 800d1c0:	2b80      	cmp	r3, #128	@ 0x80
 800d1c2:	dc40      	bgt.n	800d246 <_HandleIncomingPacket+0xaa>
 800d1c4:	2b07      	cmp	r3, #7
 800d1c6:	dc15      	bgt.n	800d1f4 <_HandleIncomingPacket+0x58>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	dd3c      	ble.n	800d246 <_HandleIncomingPacket+0xaa>
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	2b06      	cmp	r3, #6
 800d1d0:	d839      	bhi.n	800d246 <_HandleIncomingPacket+0xaa>
 800d1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d8 <_HandleIncomingPacket+0x3c>)
 800d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d8:	0800d1fb 	.word	0x0800d1fb
 800d1dc:	0800d201 	.word	0x0800d201
 800d1e0:	0800d207 	.word	0x0800d207
 800d1e4:	0800d20d 	.word	0x0800d20d
 800d1e8:	0800d213 	.word	0x0800d213
 800d1ec:	0800d219 	.word	0x0800d219
 800d1f0:	0800d21f 	.word	0x0800d21f
 800d1f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1f6:	d033      	beq.n	800d260 <_HandleIncomingPacket+0xc4>
 800d1f8:	e025      	b.n	800d246 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800d1fa:	f000 fcdb 	bl	800dbb4 <SEGGER_SYSVIEW_Start>
      break;
 800d1fe:	e034      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800d200:	f000 fd92 	bl	800dd28 <SEGGER_SYSVIEW_Stop>
      break;
 800d204:	e031      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800d206:	f000 ff6b 	bl	800e0e0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800d20a:	e02e      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800d20c:	f000 ff30 	bl	800e070 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800d210:	e02b      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800d212:	f000 fdaf 	bl	800dd74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800d216:	e028      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800d218:	f001 fa08 	bl	800e62c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800d21c:	e025      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800d21e:	f001 f9e7 	bl	800e5f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800d222:	e022      	b.n	800d26a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d224:	4b13      	ldr	r3, [pc, #76]	@ (800d274 <_HandleIncomingPacket+0xd8>)
 800d226:	7e1b      	ldrb	r3, [r3, #24]
 800d228:	4618      	mov	r0, r3
 800d22a:	1cfb      	adds	r3, r7, #3
 800d22c:	2201      	movs	r2, #1
 800d22e:	4619      	mov	r1, r3
 800d230:	f7ff fdac 	bl	800cd8c <SEGGER_RTT_ReadNoLock>
 800d234:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d013      	beq.n	800d264 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	4618      	mov	r0, r3
 800d240:	f001 f94c 	bl	800e4dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800d244:	e00e      	b.n	800d264 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800d246:	78fb      	ldrb	r3, [r7, #3]
 800d248:	b25b      	sxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da0c      	bge.n	800d268 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d24e:	4b09      	ldr	r3, [pc, #36]	@ (800d274 <_HandleIncomingPacket+0xd8>)
 800d250:	7e1b      	ldrb	r3, [r3, #24]
 800d252:	4618      	mov	r0, r3
 800d254:	1cfb      	adds	r3, r7, #3
 800d256:	2201      	movs	r2, #1
 800d258:	4619      	mov	r1, r3
 800d25a:	f7ff fd97 	bl	800cd8c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800d25e:	e003      	b.n	800d268 <_HandleIncomingPacket+0xcc>
      break;
 800d260:	bf00      	nop
 800d262:	e002      	b.n	800d26a <_HandleIncomingPacket+0xce>
      break;
 800d264:	bf00      	nop
 800d266:	e000      	b.n	800d26a <_HandleIncomingPacket+0xce>
      break;
 800d268:	bf00      	nop
    }
  }
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2001bef0 	.word	0x2001bef0

0800d278 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08c      	sub	sp, #48	@ 0x30
 800d27c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800d27e:	2301      	movs	r3, #1
 800d280:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800d282:	1d3b      	adds	r3, r7, #4
 800d284:	3301      	adds	r3, #1
 800d286:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d28c:	4b31      	ldr	r3, [pc, #196]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d292:	e00b      	b.n	800d2ac <_TrySendOverflowPacket+0x34>
 800d294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d296:	b2da      	uxtb	r2, r3
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29a:	1c59      	adds	r1, r3, #1
 800d29c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d29e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
 800d2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a8:	09db      	lsrs	r3, r3, #7
 800d2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2b0:	d8f0      	bhi.n	800d294 <_TrySendOverflowPacket+0x1c>
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d2b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2ba:	b2d2      	uxtb	r2, r2
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d2c2:	4b25      	ldr	r3, [pc, #148]	@ (800d358 <_TrySendOverflowPacket+0xe0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d2c8:	4b22      	ldr	r3, [pc, #136]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	69ba      	ldr	r2, [r7, #24]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	623b      	str	r3, [r7, #32]
 800d2da:	e00b      	b.n	800d2f4 <_TrySendOverflowPacket+0x7c>
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	1c59      	adds	r1, r3, #1
 800d2e4:	6279      	str	r1, [r7, #36]	@ 0x24
 800d2e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d2ea:	b2d2      	uxtb	r2, r2
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	09db      	lsrs	r3, r3, #7
 800d2f2:	623b      	str	r3, [r7, #32]
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2f8:	d8f0      	bhi.n	800d2dc <_TrySendOverflowPacket+0x64>
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800d300:	6a3a      	ldr	r2, [r7, #32]
 800d302:	b2d2      	uxtb	r2, r2
 800d304:	701a      	strb	r2, [r3, #0]
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d30c:	785b      	ldrb	r3, [r3, #1]
 800d30e:	4618      	mov	r0, r3
 800d310:	1d3b      	adds	r3, r7, #4
 800d312:	69fa      	ldr	r2, [r7, #28]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	461a      	mov	r2, r3
 800d318:	1d3b      	adds	r3, r7, #4
 800d31a:	4619      	mov	r1, r3
 800d31c:	f7f2 ff58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800d320:	4603      	mov	r3, r0
 800d322:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d009      	beq.n	800d33e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d32a:	4a0a      	ldr	r2, [pc, #40]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800d330:	4b08      	ldr	r3, [pc, #32]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	3b01      	subs	r3, #1
 800d336:	b2da      	uxtb	r2, r3
 800d338:	4b06      	ldr	r3, [pc, #24]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d33a:	701a      	strb	r2, [r3, #0]
 800d33c:	e004      	b.n	800d348 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800d33e:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	3301      	adds	r3, #1
 800d344:	4a03      	ldr	r2, [pc, #12]	@ (800d354 <_TrySendOverflowPacket+0xdc>)
 800d346:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800d348:	693b      	ldr	r3, [r7, #16]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3730      	adds	r7, #48	@ 0x30
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	2001bef0 	.word	0x2001bef0
 800d358:	e0001004 	.word	0xe0001004

0800d35c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08a      	sub	sp, #40	@ 0x28
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800d368:	4b98      	ldr	r3, [pc, #608]	@ (800d5cc <_SendPacket+0x270>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d010      	beq.n	800d392 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800d370:	4b96      	ldr	r3, [pc, #600]	@ (800d5cc <_SendPacket+0x270>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 812d 	beq.w	800d5d4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800d37a:	4b94      	ldr	r3, [pc, #592]	@ (800d5cc <_SendPacket+0x270>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d109      	bne.n	800d396 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800d382:	f7ff ff79 	bl	800d278 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800d386:	4b91      	ldr	r3, [pc, #580]	@ (800d5cc <_SendPacket+0x270>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	f040 8124 	bne.w	800d5d8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800d390:	e001      	b.n	800d396 <_SendPacket+0x3a>
    goto Send;
 800d392:	bf00      	nop
 800d394:	e000      	b.n	800d398 <_SendPacket+0x3c>
Send:
 800d396:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b1f      	cmp	r3, #31
 800d39c:	d809      	bhi.n	800d3b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800d39e:	4b8b      	ldr	r3, [pc, #556]	@ (800d5cc <_SendPacket+0x270>)
 800d3a0:	69da      	ldr	r2, [r3, #28]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 8115 	bne.w	800d5dc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b17      	cmp	r3, #23
 800d3b6:	d807      	bhi.n	800d3c8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	e0c4      	b.n	800d552 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3d4:	d912      	bls.n	800d3fc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	09da      	lsrs	r2, r3, #7
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	b2d2      	uxtb	r2, r2
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	3a01      	subs	r2, #1
 800d3ee:	60fa      	str	r2, [r7, #12]
 800d3f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e006      	b.n	800d40a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	b2da      	uxtb	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d40e:	d807      	bhi.n	800d420 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3b01      	subs	r3, #1
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	e098      	b.n	800d552 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d426:	d212      	bcs.n	800d44e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	09da      	lsrs	r2, r3, #7
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3b01      	subs	r3, #1
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	3a01      	subs	r2, #1
 800d440:	60fa      	str	r2, [r7, #12]
 800d442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d446:	b2da      	uxtb	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	701a      	strb	r2, [r3, #0]
 800d44c:	e081      	b.n	800d552 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d454:	d21d      	bcs.n	800d492 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	0b9a      	lsrs	r2, r3, #14
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	60fb      	str	r3, [r7, #12]
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	09db      	lsrs	r3, r3, #7
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	3a01      	subs	r2, #1
 800d470:	60fa      	str	r2, [r7, #12]
 800d472:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d476:	b2da      	uxtb	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	3a01      	subs	r2, #1
 800d484:	60fa      	str	r2, [r7, #12]
 800d486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e05f      	b.n	800d552 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d498:	d228      	bcs.n	800d4ec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	0d5a      	lsrs	r2, r3, #21
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	b2d2      	uxtb	r2, r2
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	0b9b      	lsrs	r3, r3, #14
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	60fa      	str	r2, [r7, #12]
 800d4b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	09db      	lsrs	r3, r3, #7
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	3a01      	subs	r2, #1
 800d4ca:	60fa      	str	r2, [r7, #12]
 800d4cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	3a01      	subs	r2, #1
 800d4de:	60fa      	str	r2, [r7, #12]
 800d4e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	e032      	b.n	800d552 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	0f1a      	lsrs	r2, r3, #28
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	b2d2      	uxtb	r2, r2
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	0d5b      	lsrs	r3, r3, #21
 800d500:	b2db      	uxtb	r3, r3
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	3a01      	subs	r2, #1
 800d506:	60fa      	str	r2, [r7, #12]
 800d508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	0b9b      	lsrs	r3, r3, #14
 800d516:	b2db      	uxtb	r3, r3
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	3a01      	subs	r2, #1
 800d51c:	60fa      	str	r2, [r7, #12]
 800d51e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d522:	b2da      	uxtb	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	09db      	lsrs	r3, r3, #7
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	3a01      	subs	r2, #1
 800d532:	60fa      	str	r2, [r7, #12]
 800d534:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	b2db      	uxtb	r3, r3
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	3a01      	subs	r2, #1
 800d546:	60fa      	str	r2, [r7, #12]
 800d548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d552:	4b1f      	ldr	r3, [pc, #124]	@ (800d5d0 <_SendPacket+0x274>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d558:	4b1c      	ldr	r3, [pc, #112]	@ (800d5cc <_SendPacket+0x270>)
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	627b      	str	r3, [r7, #36]	@ 0x24
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	623b      	str	r3, [r7, #32]
 800d56a:	e00b      	b.n	800d584 <_SendPacket+0x228>
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	1c59      	adds	r1, r3, #1
 800d574:	6279      	str	r1, [r7, #36]	@ 0x24
 800d576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d57a:	b2d2      	uxtb	r2, r2
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	09db      	lsrs	r3, r3, #7
 800d582:	623b      	str	r3, [r7, #32]
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	2b7f      	cmp	r3, #127	@ 0x7f
 800d588:	d8f0      	bhi.n	800d56c <_SendPacket+0x210>
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	1c5a      	adds	r2, r3, #1
 800d58e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d590:	6a3a      	ldr	r2, [r7, #32]
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d598:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800d59a:	4b0c      	ldr	r3, [pc, #48]	@ (800d5cc <_SendPacket+0x270>)
 800d59c:	785b      	ldrb	r3, [r3, #1]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	68f9      	ldr	r1, [r7, #12]
 800d5aa:	f7f2 fe11 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800d5ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d5b6:	4a05      	ldr	r2, [pc, #20]	@ (800d5cc <_SendPacket+0x270>)
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	60d3      	str	r3, [r2, #12]
 800d5bc:	e00f      	b.n	800d5de <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800d5be:	4b03      	ldr	r3, [pc, #12]	@ (800d5cc <_SendPacket+0x270>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	4b01      	ldr	r3, [pc, #4]	@ (800d5cc <_SendPacket+0x270>)
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	e008      	b.n	800d5de <_SendPacket+0x282>
 800d5cc:	2001bef0 	.word	0x2001bef0
 800d5d0:	e0001004 	.word	0xe0001004
    goto SendDone;
 800d5d4:	bf00      	nop
 800d5d6:	e002      	b.n	800d5de <_SendPacket+0x282>
      goto SendDone;
 800d5d8:	bf00      	nop
 800d5da:	e000      	b.n	800d5de <_SendPacket+0x282>
      goto SendDone;
 800d5dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800d5de:	4b14      	ldr	r3, [pc, #80]	@ (800d630 <_SendPacket+0x2d4>)
 800d5e0:	7e1b      	ldrb	r3, [r3, #24]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4a13      	ldr	r2, [pc, #76]	@ (800d634 <_SendPacket+0x2d8>)
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	440b      	add	r3, r1
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	336c      	adds	r3, #108	@ 0x6c
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <_SendPacket+0x2d4>)
 800d5f6:	7e1b      	ldrb	r3, [r3, #24]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	490e      	ldr	r1, [pc, #56]	@ (800d634 <_SendPacket+0x2d8>)
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	4403      	add	r3, r0
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	440b      	add	r3, r1
 800d606:	3370      	adds	r3, #112	@ 0x70
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d00b      	beq.n	800d626 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800d60e:	4b08      	ldr	r3, [pc, #32]	@ (800d630 <_SendPacket+0x2d4>)
 800d610:	789b      	ldrb	r3, [r3, #2]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d107      	bne.n	800d626 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800d616:	4b06      	ldr	r3, [pc, #24]	@ (800d630 <_SendPacket+0x2d4>)
 800d618:	2201      	movs	r2, #1
 800d61a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800d61c:	f7ff fdbe 	bl	800d19c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800d620:	4b03      	ldr	r3, [pc, #12]	@ (800d630 <_SendPacket+0x2d4>)
 800d622:	2200      	movs	r2, #0
 800d624:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800d626:	bf00      	nop
 800d628:	3728      	adds	r7, #40	@ 0x28
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	2001bef0 	.word	0x2001bef0
 800d634:	2001aa30 	.word	0x2001aa30

0800d638 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af02      	add	r7, sp, #8
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800d646:	2300      	movs	r3, #0
 800d648:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d64c:	4917      	ldr	r1, [pc, #92]	@ (800d6ac <SEGGER_SYSVIEW_Init+0x74>)
 800d64e:	4818      	ldr	r0, [pc, #96]	@ (800d6b0 <SEGGER_SYSVIEW_Init+0x78>)
 800d650:	f7ff fc98 	bl	800cf84 <SEGGER_RTT_AllocUpBuffer>
 800d654:	4603      	mov	r3, r0
 800d656:	b2da      	uxtb	r2, r3
 800d658:	4b16      	ldr	r3, [pc, #88]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d65a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800d65c:	4b15      	ldr	r3, [pc, #84]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d65e:	785a      	ldrb	r2, [r3, #1]
 800d660:	4b14      	ldr	r3, [pc, #80]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d662:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800d664:	4b13      	ldr	r3, [pc, #76]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d666:	7e1b      	ldrb	r3, [r3, #24]
 800d668:	4618      	mov	r0, r3
 800d66a:	2300      	movs	r3, #0
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	2308      	movs	r3, #8
 800d670:	4a11      	ldr	r2, [pc, #68]	@ (800d6b8 <SEGGER_SYSVIEW_Init+0x80>)
 800d672:	490f      	ldr	r1, [pc, #60]	@ (800d6b0 <SEGGER_SYSVIEW_Init+0x78>)
 800d674:	f7ff fd0a 	bl	800d08c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800d678:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d67e:	4b0f      	ldr	r3, [pc, #60]	@ (800d6bc <SEGGER_SYSVIEW_Init+0x84>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a0c      	ldr	r2, [pc, #48]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d684:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800d686:	4a0b      	ldr	r2, [pc, #44]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800d68c:	4a09      	ldr	r2, [pc, #36]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800d692:	4a08      	ldr	r2, [pc, #32]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800d698:	4a06      	ldr	r2, [pc, #24]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800d69e:	4b05      	ldr	r3, [pc, #20]	@ (800d6b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	2001aee8 	.word	0x2001aee8
 800d6b0:	08012a58 	.word	0x08012a58
 800d6b4:	2001bef0 	.word	0x2001bef0
 800d6b8:	2001bee8 	.word	0x2001bee8
 800d6bc:	e0001004 	.word	0xe0001004

0800d6c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800d6c8:	4a04      	ldr	r2, [pc, #16]	@ (800d6dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6113      	str	r3, [r2, #16]
}
 800d6ce:	bf00      	nop
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	2001bef0 	.word	0x2001bef0

0800d6e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d6e8:	f3ef 8311 	mrs	r3, BASEPRI
 800d6ec:	f04f 0120 	mov.w	r1, #32
 800d6f0:	f381 8811 	msr	BASEPRI, r1
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	4808      	ldr	r0, [pc, #32]	@ (800d718 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800d6f8:	f7ff fd44 	bl	800d184 <_PreparePacket>
 800d6fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	68b8      	ldr	r0, [r7, #8]
 800d704:	f7ff fe2a 	bl	800d35c <_SendPacket>
  RECORD_END();
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f383 8811 	msr	BASEPRI, r3
}
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	2001bf20 	.word	0x2001bf20

0800d71c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d726:	f3ef 8311 	mrs	r3, BASEPRI
 800d72a:	f04f 0120 	mov.w	r1, #32
 800d72e:	f381 8811 	msr	BASEPRI, r1
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	4816      	ldr	r0, [pc, #88]	@ (800d790 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800d736:	f7ff fd25 	bl	800d184 <_PreparePacket>
 800d73a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	61fb      	str	r3, [r7, #28]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	61bb      	str	r3, [r7, #24]
 800d748:	e00b      	b.n	800d762 <SEGGER_SYSVIEW_RecordU32+0x46>
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	1c59      	adds	r1, r3, #1
 800d752:	61f9      	str	r1, [r7, #28]
 800d754:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d758:	b2d2      	uxtb	r2, r2
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	09db      	lsrs	r3, r3, #7
 800d760:	61bb      	str	r3, [r7, #24]
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	2b7f      	cmp	r3, #127	@ 0x7f
 800d766:	d8f0      	bhi.n	800d74a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	61fa      	str	r2, [r7, #28]
 800d76e:	69ba      	ldr	r2, [r7, #24]
 800d770:	b2d2      	uxtb	r2, r2
 800d772:	701a      	strb	r2, [r3, #0]
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	68f9      	ldr	r1, [r7, #12]
 800d77c:	6938      	ldr	r0, [r7, #16]
 800d77e:	f7ff fded 	bl	800d35c <_SendPacket>
  RECORD_END();
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f383 8811 	msr	BASEPRI, r3
}
 800d788:	bf00      	nop
 800d78a:	3720      	adds	r7, #32
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	2001bf20 	.word	0x2001bf20

0800d794 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800d794:	b580      	push	{r7, lr}
 800d796:	b08c      	sub	sp, #48	@ 0x30
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d7a0:	f3ef 8311 	mrs	r3, BASEPRI
 800d7a4:	f04f 0120 	mov.w	r1, #32
 800d7a8:	f381 8811 	msr	BASEPRI, r1
 800d7ac:	61fb      	str	r3, [r7, #28]
 800d7ae:	4825      	ldr	r0, [pc, #148]	@ (800d844 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800d7b0:	f7ff fce8 	bl	800d184 <_PreparePacket>
 800d7b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7c2:	e00b      	b.n	800d7dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ca:	1c59      	adds	r1, r3, #1
 800d7cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d7ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d7d2:	b2d2      	uxtb	r2, r2
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	09db      	lsrs	r3, r3, #7
 800d7da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7de:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7e0:	d8f0      	bhi.n	800d7c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800d7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	623b      	str	r3, [r7, #32]
 800d7fa:	e00b      	b.n	800d814 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	1c59      	adds	r1, r3, #1
 800d804:	6279      	str	r1, [r7, #36]	@ 0x24
 800d806:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	09db      	lsrs	r3, r3, #7
 800d812:	623b      	str	r3, [r7, #32]
 800d814:	6a3b      	ldr	r3, [r7, #32]
 800d816:	2b7f      	cmp	r3, #127	@ 0x7f
 800d818:	d8f0      	bhi.n	800d7fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d820:	6a3a      	ldr	r2, [r7, #32]
 800d822:	b2d2      	uxtb	r2, r2
 800d824:	701a      	strb	r2, [r3, #0]
 800d826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d828:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	6979      	ldr	r1, [r7, #20]
 800d82e:	69b8      	ldr	r0, [r7, #24]
 800d830:	f7ff fd94 	bl	800d35c <_SendPacket>
  RECORD_END();
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	f383 8811 	msr	BASEPRI, r3
}
 800d83a:	bf00      	nop
 800d83c:	3730      	adds	r7, #48	@ 0x30
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	2001bf20 	.word	0x2001bf20

0800d848 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08e      	sub	sp, #56	@ 0x38
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800d856:	f3ef 8311 	mrs	r3, BASEPRI
 800d85a:	f04f 0120 	mov.w	r1, #32
 800d85e:	f381 8811 	msr	BASEPRI, r1
 800d862:	61fb      	str	r3, [r7, #28]
 800d864:	4832      	ldr	r0, [pc, #200]	@ (800d930 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800d866:	f7ff fc8d 	bl	800d184 <_PreparePacket>
 800d86a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	637b      	str	r3, [r7, #52]	@ 0x34
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	633b      	str	r3, [r7, #48]	@ 0x30
 800d878:	e00b      	b.n	800d892 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800d87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d880:	1c59      	adds	r1, r3, #1
 800d882:	6379      	str	r1, [r7, #52]	@ 0x34
 800d884:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	701a      	strb	r2, [r3, #0]
 800d88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88e:	09db      	lsrs	r3, r3, #7
 800d890:	633b      	str	r3, [r7, #48]	@ 0x30
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	2b7f      	cmp	r3, #127	@ 0x7f
 800d896:	d8f0      	bhi.n	800d87a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800d898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d89e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a0:	b2d2      	uxtb	r2, r2
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8b0:	e00b      	b.n	800d8ca <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b8:	1c59      	adds	r1, r3, #1
 800d8ba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d8bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8c0:	b2d2      	uxtb	r2, r2
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c6:	09db      	lsrs	r3, r3, #7
 800d8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8ce:	d8f0      	bhi.n	800d8b2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800d8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8d8:	b2d2      	uxtb	r2, r2
 800d8da:	701a      	strb	r2, [r3, #0]
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	623b      	str	r3, [r7, #32]
 800d8e8:	e00b      	b.n	800d902 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f0:	1c59      	adds	r1, r3, #1
 800d8f2:	6279      	str	r1, [r7, #36]	@ 0x24
 800d8f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	701a      	strb	r2, [r3, #0]
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	09db      	lsrs	r3, r3, #7
 800d900:	623b      	str	r3, [r7, #32]
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	2b7f      	cmp	r3, #127	@ 0x7f
 800d906:	d8f0      	bhi.n	800d8ea <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800d908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d90e:	6a3a      	ldr	r2, [r7, #32]
 800d910:	b2d2      	uxtb	r2, r2
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d916:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	6979      	ldr	r1, [r7, #20]
 800d91c:	69b8      	ldr	r0, [r7, #24]
 800d91e:	f7ff fd1d 	bl	800d35c <_SendPacket>
  RECORD_END();
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	f383 8811 	msr	BASEPRI, r3
}
 800d928:	bf00      	nop
 800d92a:	3738      	adds	r7, #56	@ 0x38
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	2001bf20 	.word	0x2001bf20

0800d934 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800d934:	b580      	push	{r7, lr}
 800d936:	b090      	sub	sp, #64	@ 0x40
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d942:	f3ef 8311 	mrs	r3, BASEPRI
 800d946:	f04f 0120 	mov.w	r1, #32
 800d94a:	f381 8811 	msr	BASEPRI, r1
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	4840      	ldr	r0, [pc, #256]	@ (800da54 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800d952:	f7ff fc17 	bl	800d184 <_PreparePacket>
 800d956:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d964:	e00b      	b.n	800d97e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800d966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96c:	1c59      	adds	r1, r3, #1
 800d96e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d970:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d974:	b2d2      	uxtb	r2, r2
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97a:	09db      	lsrs	r3, r3, #7
 800d97c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d980:	2b7f      	cmp	r3, #127	@ 0x7f
 800d982:	d8f0      	bhi.n	800d966 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800d984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d98a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d98c:	b2d2      	uxtb	r2, r2
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d992:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	637b      	str	r3, [r7, #52]	@ 0x34
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d99c:	e00b      	b.n	800d9b6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800d99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a4:	1c59      	adds	r1, r3, #1
 800d9a6:	6379      	str	r1, [r7, #52]	@ 0x34
 800d9a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d9ac:	b2d2      	uxtb	r2, r2
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b2:	09db      	lsrs	r3, r3, #7
 800d9b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9ba:	d8f0      	bhi.n	800d99e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800d9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9c4:	b2d2      	uxtb	r2, r2
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9d4:	e00b      	b.n	800d9ee <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9dc:	1c59      	adds	r1, r3, #1
 800d9de:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d9e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d9e4:	b2d2      	uxtb	r2, r2
 800d9e6:	701a      	strb	r2, [r3, #0]
 800d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ea:	09db      	lsrs	r3, r3, #7
 800d9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9f2:	d8f0      	bhi.n	800d9d6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d9fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9fc:	b2d2      	uxtb	r2, r2
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	627b      	str	r3, [r7, #36]	@ 0x24
 800da08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da0a:	623b      	str	r3, [r7, #32]
 800da0c:	e00b      	b.n	800da26 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	b2da      	uxtb	r2, r3
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	1c59      	adds	r1, r3, #1
 800da16:	6279      	str	r1, [r7, #36]	@ 0x24
 800da18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800da1c:	b2d2      	uxtb	r2, r2
 800da1e:	701a      	strb	r2, [r3, #0]
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	09db      	lsrs	r3, r3, #7
 800da24:	623b      	str	r3, [r7, #32]
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	2b7f      	cmp	r3, #127	@ 0x7f
 800da2a:	d8f0      	bhi.n	800da0e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800da2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	627a      	str	r2, [r7, #36]	@ 0x24
 800da32:	6a3a      	ldr	r2, [r7, #32]
 800da34:	b2d2      	uxtb	r2, r2
 800da36:	701a      	strb	r2, [r3, #0]
 800da38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	6979      	ldr	r1, [r7, #20]
 800da40:	69b8      	ldr	r0, [r7, #24]
 800da42:	f7ff fc8b 	bl	800d35c <_SendPacket>
  RECORD_END();
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	f383 8811 	msr	BASEPRI, r3
}
 800da4c:	bf00      	nop
 800da4e:	3740      	adds	r7, #64	@ 0x40
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	2001bf20 	.word	0x2001bf20

0800da58 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800da58:	b580      	push	{r7, lr}
 800da5a:	b092      	sub	sp, #72	@ 0x48
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800da66:	f3ef 8311 	mrs	r3, BASEPRI
 800da6a:	f04f 0120 	mov.w	r1, #32
 800da6e:	f381 8811 	msr	BASEPRI, r1
 800da72:	61fb      	str	r3, [r7, #28]
 800da74:	484e      	ldr	r0, [pc, #312]	@ (800dbb0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800da76:	f7ff fb85 	bl	800d184 <_PreparePacket>
 800da7a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	647b      	str	r3, [r7, #68]	@ 0x44
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	643b      	str	r3, [r7, #64]	@ 0x40
 800da88:	e00b      	b.n	800daa2 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800da8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da90:	1c59      	adds	r1, r3, #1
 800da92:	6479      	str	r1, [r7, #68]	@ 0x44
 800da94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800da98:	b2d2      	uxtb	r2, r2
 800da9a:	701a      	strb	r2, [r3, #0]
 800da9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da9e:	09db      	lsrs	r3, r3, #7
 800daa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800daa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daa4:	2b7f      	cmp	r3, #127	@ 0x7f
 800daa6:	d8f0      	bhi.n	800da8a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800daa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	647a      	str	r2, [r7, #68]	@ 0x44
 800daae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dab0:	b2d2      	uxtb	r2, r2
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dac0:	e00b      	b.n	800dada <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dac8:	1c59      	adds	r1, r3, #1
 800daca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800dacc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dad0:	b2d2      	uxtb	r2, r2
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad6:	09db      	lsrs	r3, r3, #7
 800dad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dadc:	2b7f      	cmp	r3, #127	@ 0x7f
 800dade:	d8f0      	bhi.n	800dac2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800dae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800dae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dae8:	b2d2      	uxtb	r2, r2
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800daf8:	e00b      	b.n	800db12 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db00:	1c59      	adds	r1, r3, #1
 800db02:	6379      	str	r1, [r7, #52]	@ 0x34
 800db04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db08:	b2d2      	uxtb	r2, r2
 800db0a:	701a      	strb	r2, [r3, #0]
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	09db      	lsrs	r3, r3, #7
 800db10:	633b      	str	r3, [r7, #48]	@ 0x30
 800db12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db14:	2b7f      	cmp	r3, #127	@ 0x7f
 800db16:	d8f0      	bhi.n	800dafa <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800db18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	637a      	str	r2, [r7, #52]	@ 0x34
 800db1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db20:	b2d2      	uxtb	r2, r2
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db30:	e00b      	b.n	800db4a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800db32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db34:	b2da      	uxtb	r2, r3
 800db36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db38:	1c59      	adds	r1, r3, #1
 800db3a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800db3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db40:	b2d2      	uxtb	r2, r2
 800db42:	701a      	strb	r2, [r3, #0]
 800db44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db46:	09db      	lsrs	r3, r3, #7
 800db48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4c:	2b7f      	cmp	r3, #127	@ 0x7f
 800db4e:	d8f0      	bhi.n	800db32 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800db50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db58:	b2d2      	uxtb	r2, r2
 800db5a:	701a      	strb	r2, [r3, #0]
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
 800db64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db66:	623b      	str	r3, [r7, #32]
 800db68:	e00b      	b.n	800db82 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db70:	1c59      	adds	r1, r3, #1
 800db72:	6279      	str	r1, [r7, #36]	@ 0x24
 800db74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db78:	b2d2      	uxtb	r2, r2
 800db7a:	701a      	strb	r2, [r3, #0]
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	09db      	lsrs	r3, r3, #7
 800db80:	623b      	str	r3, [r7, #32]
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	2b7f      	cmp	r3, #127	@ 0x7f
 800db86:	d8f0      	bhi.n	800db6a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800db88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8a:	1c5a      	adds	r2, r3, #1
 800db8c:	627a      	str	r2, [r7, #36]	@ 0x24
 800db8e:	6a3a      	ldr	r2, [r7, #32]
 800db90:	b2d2      	uxtb	r2, r2
 800db92:	701a      	strb	r2, [r3, #0]
 800db94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	6979      	ldr	r1, [r7, #20]
 800db9c:	69b8      	ldr	r0, [r7, #24]
 800db9e:	f7ff fbdd 	bl	800d35c <_SendPacket>
  RECORD_END();
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	f383 8811 	msr	BASEPRI, r3
}
 800dba8:	bf00      	nop
 800dbaa:	3748      	adds	r7, #72	@ 0x48
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	2001bf20 	.word	0x2001bf20

0800dbb4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08c      	sub	sp, #48	@ 0x30
 800dbb8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800dbba:	4b58      	ldr	r3, [pc, #352]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800dbc0:	f3ef 8311 	mrs	r3, BASEPRI
 800dbc4:	f04f 0120 	mov.w	r1, #32
 800dbc8:	f381 8811 	msr	BASEPRI, r1
 800dbcc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800dbce:	4b53      	ldr	r3, [pc, #332]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dbd0:	785b      	ldrb	r3, [r3, #1]
 800dbd2:	220a      	movs	r2, #10
 800dbd4:	4952      	ldr	r1, [pc, #328]	@ (800dd20 <SEGGER_SYSVIEW_Start+0x16c>)
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7f2 fafa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800dbe2:	200a      	movs	r0, #10
 800dbe4:	f7ff fd7c 	bl	800d6e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800dbe8:	f3ef 8311 	mrs	r3, BASEPRI
 800dbec:	f04f 0120 	mov.w	r1, #32
 800dbf0:	f381 8811 	msr	BASEPRI, r1
 800dbf4:	60bb      	str	r3, [r7, #8]
 800dbf6:	484b      	ldr	r0, [pc, #300]	@ (800dd24 <SEGGER_SYSVIEW_Start+0x170>)
 800dbf8:	f7ff fac4 	bl	800d184 <_PreparePacket>
 800dbfc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc06:	4b45      	ldr	r3, [pc, #276]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc0c:	e00b      	b.n	800dc26 <SEGGER_SYSVIEW_Start+0x72>
 800dc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	1c59      	adds	r1, r3, #1
 800dc16:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800dc18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc1c:	b2d2      	uxtb	r2, r2
 800dc1e:	701a      	strb	r2, [r3, #0]
 800dc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc22:	09db      	lsrs	r3, r3, #7
 800dc24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc28:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc2a:	d8f0      	bhi.n	800dc0e <SEGGER_SYSVIEW_Start+0x5a>
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	1c5a      	adds	r2, r3, #1
 800dc30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc34:	b2d2      	uxtb	r2, r2
 800dc36:	701a      	strb	r2, [r3, #0]
 800dc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc40:	4b36      	ldr	r3, [pc, #216]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	623b      	str	r3, [r7, #32]
 800dc46:	e00b      	b.n	800dc60 <SEGGER_SYSVIEW_Start+0xac>
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4e:	1c59      	adds	r1, r3, #1
 800dc50:	6279      	str	r1, [r7, #36]	@ 0x24
 800dc52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc56:	b2d2      	uxtb	r2, r2
 800dc58:	701a      	strb	r2, [r3, #0]
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	09db      	lsrs	r3, r3, #7
 800dc5e:	623b      	str	r3, [r7, #32]
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc64:	d8f0      	bhi.n	800dc48 <SEGGER_SYSVIEW_Start+0x94>
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	627a      	str	r2, [r7, #36]	@ 0x24
 800dc6c:	6a3a      	ldr	r2, [r7, #32]
 800dc6e:	b2d2      	uxtb	r2, r2
 800dc70:	701a      	strb	r2, [r3, #0]
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	61fb      	str	r3, [r7, #28]
 800dc7a:	4b28      	ldr	r3, [pc, #160]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	61bb      	str	r3, [r7, #24]
 800dc80:	e00b      	b.n	800dc9a <SEGGER_SYSVIEW_Start+0xe6>
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	1c59      	adds	r1, r3, #1
 800dc8a:	61f9      	str	r1, [r7, #28]
 800dc8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	09db      	lsrs	r3, r3, #7
 800dc98:	61bb      	str	r3, [r7, #24]
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc9e:	d8f0      	bhi.n	800dc82 <SEGGER_SYSVIEW_Start+0xce>
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	61fa      	str	r2, [r7, #28]
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	617b      	str	r3, [r7, #20]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	e00b      	b.n	800dcd2 <SEGGER_SYSVIEW_Start+0x11e>
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	1c59      	adds	r1, r3, #1
 800dcc2:	6179      	str	r1, [r7, #20]
 800dcc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dcc8:	b2d2      	uxtb	r2, r2
 800dcca:	701a      	strb	r2, [r3, #0]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	09db      	lsrs	r3, r3, #7
 800dcd0:	613b      	str	r3, [r7, #16]
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcd6:	d8f0      	bhi.n	800dcba <SEGGER_SYSVIEW_Start+0x106>
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	617a      	str	r2, [r7, #20]
 800dcde:	693a      	ldr	r2, [r7, #16]
 800dce0:	b2d2      	uxtb	r2, r2
 800dce2:	701a      	strb	r2, [r3, #0]
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800dce8:	2218      	movs	r2, #24
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fb35 	bl	800d35c <_SendPacket>
      RECORD_END();
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800dcf8:	4b08      	ldr	r3, [pc, #32]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dcfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800dd00:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <SEGGER_SYSVIEW_Start+0x168>)
 800dd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800dd06:	f000 f9eb 	bl	800e0e0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800dd0a:	f000 f9b1 	bl	800e070 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800dd0e:	f000 fc8d 	bl	800e62c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800dd12:	bf00      	nop
 800dd14:	3730      	adds	r7, #48	@ 0x30
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	2001bef0 	.word	0x2001bef0
 800dd20:	08012a94 	.word	0x08012a94
 800dd24:	2001bf20 	.word	0x2001bf20

0800dd28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800dd2e:	f3ef 8311 	mrs	r3, BASEPRI
 800dd32:	f04f 0120 	mov.w	r1, #32
 800dd36:	f381 8811 	msr	BASEPRI, r1
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	480b      	ldr	r0, [pc, #44]	@ (800dd6c <SEGGER_SYSVIEW_Stop+0x44>)
 800dd3e:	f7ff fa21 	bl	800d184 <_PreparePacket>
 800dd42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800dd44:	4b0a      	ldr	r3, [pc, #40]	@ (800dd70 <SEGGER_SYSVIEW_Stop+0x48>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d007      	beq.n	800dd5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800dd4c:	220b      	movs	r2, #11
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	6838      	ldr	r0, [r7, #0]
 800dd52:	f7ff fb03 	bl	800d35c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800dd56:	4b06      	ldr	r3, [pc, #24]	@ (800dd70 <SEGGER_SYSVIEW_Stop+0x48>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f383 8811 	msr	BASEPRI, r3
}
 800dd62:	bf00      	nop
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	2001bf20 	.word	0x2001bf20
 800dd70:	2001bef0 	.word	0x2001bef0

0800dd74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08c      	sub	sp, #48	@ 0x30
 800dd78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800dd7a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd7e:	f04f 0120 	mov.w	r1, #32
 800dd82:	f381 8811 	msr	BASEPRI, r1
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	4845      	ldr	r0, [pc, #276]	@ (800dea0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800dd8a:	f7ff f9fb 	bl	800d184 <_PreparePacket>
 800dd8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd98:	4b42      	ldr	r3, [pc, #264]	@ (800dea4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd9e:	e00b      	b.n	800ddb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800dda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	1c59      	adds	r1, r3, #1
 800dda8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ddaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ddae:	b2d2      	uxtb	r2, r2
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb4:	09db      	lsrs	r3, r3, #7
 800ddb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddba:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddbc:	d8f0      	bhi.n	800dda0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ddbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ddc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddc6:	b2d2      	uxtb	r2, r2
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddd2:	4b34      	ldr	r3, [pc, #208]	@ (800dea4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	623b      	str	r3, [r7, #32]
 800ddd8:	e00b      	b.n	800ddf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde0:	1c59      	adds	r1, r3, #1
 800dde2:	6279      	str	r1, [r7, #36]	@ 0x24
 800dde4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dde8:	b2d2      	uxtb	r2, r2
 800ddea:	701a      	strb	r2, [r3, #0]
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	09db      	lsrs	r3, r3, #7
 800ddf0:	623b      	str	r3, [r7, #32]
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddf6:	d8f0      	bhi.n	800ddda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddfe:	6a3a      	ldr	r2, [r7, #32]
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	61fb      	str	r3, [r7, #28]
 800de0c:	4b25      	ldr	r3, [pc, #148]	@ (800dea4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	61bb      	str	r3, [r7, #24]
 800de12:	e00b      	b.n	800de2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	b2da      	uxtb	r2, r3
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	1c59      	adds	r1, r3, #1
 800de1c:	61f9      	str	r1, [r7, #28]
 800de1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800de22:	b2d2      	uxtb	r2, r2
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	09db      	lsrs	r3, r3, #7
 800de2a:	61bb      	str	r3, [r7, #24]
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800de30:	d8f0      	bhi.n	800de14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	61fa      	str	r2, [r7, #28]
 800de38:	69ba      	ldr	r2, [r7, #24]
 800de3a:	b2d2      	uxtb	r2, r2
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	2300      	movs	r3, #0
 800de48:	613b      	str	r3, [r7, #16]
 800de4a:	e00b      	b.n	800de64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	1c59      	adds	r1, r3, #1
 800de54:	6179      	str	r1, [r7, #20]
 800de56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800de5a:	b2d2      	uxtb	r2, r2
 800de5c:	701a      	strb	r2, [r3, #0]
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	09db      	lsrs	r3, r3, #7
 800de62:	613b      	str	r3, [r7, #16]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2b7f      	cmp	r3, #127	@ 0x7f
 800de68:	d8f0      	bhi.n	800de4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	1c5a      	adds	r2, r3, #1
 800de6e:	617a      	str	r2, [r7, #20]
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	b2d2      	uxtb	r2, r2
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800de7a:	2218      	movs	r2, #24
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	68b8      	ldr	r0, [r7, #8]
 800de80:	f7ff fa6c 	bl	800d35c <_SendPacket>
  RECORD_END();
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800de8a:	4b06      	ldr	r3, [pc, #24]	@ (800dea4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800de8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800de92:	4b04      	ldr	r3, [pc, #16]	@ (800dea4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800de94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de96:	4798      	blx	r3
  }
}
 800de98:	bf00      	nop
 800de9a:	3730      	adds	r7, #48	@ 0x30
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	2001bf20 	.word	0x2001bf20
 800dea4:	2001bef0 	.word	0x2001bef0

0800dea8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b092      	sub	sp, #72	@ 0x48
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800deb0:	f3ef 8311 	mrs	r3, BASEPRI
 800deb4:	f04f 0120 	mov.w	r1, #32
 800deb8:	f381 8811 	msr	BASEPRI, r1
 800debc:	617b      	str	r3, [r7, #20]
 800debe:	486a      	ldr	r0, [pc, #424]	@ (800e068 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800dec0:	f7ff f960 	bl	800d184 <_PreparePacket>
 800dec4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4b66      	ldr	r3, [pc, #408]	@ (800e06c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	643b      	str	r3, [r7, #64]	@ 0x40
 800deda:	e00b      	b.n	800def4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800dedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dee2:	1c59      	adds	r1, r3, #1
 800dee4:	6479      	str	r1, [r7, #68]	@ 0x44
 800dee6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800deea:	b2d2      	uxtb	r2, r2
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800def0:	09db      	lsrs	r3, r3, #7
 800def2:	643b      	str	r3, [r7, #64]	@ 0x40
 800def4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800def6:	2b7f      	cmp	r3, #127	@ 0x7f
 800def8:	d8f0      	bhi.n	800dedc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800defa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	647a      	str	r2, [r7, #68]	@ 0x44
 800df00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df02:	b2d2      	uxtb	r2, r2
 800df04:	701a      	strb	r2, [r3, #0]
 800df06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df14:	e00b      	b.n	800df2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800df16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df1c:	1c59      	adds	r1, r3, #1
 800df1e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800df20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800df24:	b2d2      	uxtb	r2, r2
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2a:	09db      	lsrs	r3, r3, #7
 800df2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df30:	2b7f      	cmp	r3, #127	@ 0x7f
 800df32:	d8f0      	bhi.n	800df16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800df34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800df3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df3c:	b2d2      	uxtb	r2, r2
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	2220      	movs	r2, #32
 800df4a:	4619      	mov	r1, r3
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f7ff f8e9 	bl	800d124 <_EncodeStr>
 800df52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800df54:	2209      	movs	r2, #9
 800df56:	68f9      	ldr	r1, [r7, #12]
 800df58:	6938      	ldr	r0, [r7, #16]
 800df5a:	f7ff f9ff 	bl	800d35c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	637b      	str	r3, [r7, #52]	@ 0x34
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	4b40      	ldr	r3, [pc, #256]	@ (800e06c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	633b      	str	r3, [r7, #48]	@ 0x30
 800df72:	e00b      	b.n	800df8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800df74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df76:	b2da      	uxtb	r2, r3
 800df78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df7a:	1c59      	adds	r1, r3, #1
 800df7c:	6379      	str	r1, [r7, #52]	@ 0x34
 800df7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800df82:	b2d2      	uxtb	r2, r2
 800df84:	701a      	strb	r2, [r3, #0]
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	09db      	lsrs	r3, r3, #7
 800df8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8e:	2b7f      	cmp	r3, #127	@ 0x7f
 800df90:	d8f0      	bhi.n	800df74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800df92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	637a      	str	r2, [r7, #52]	@ 0x34
 800df98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df9a:	b2d2      	uxtb	r2, r2
 800df9c:	701a      	strb	r2, [r3, #0]
 800df9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfac:	e00b      	b.n	800dfc6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800dfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb4:	1c59      	adds	r1, r3, #1
 800dfb6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800dfb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	701a      	strb	r2, [r3, #0]
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	09db      	lsrs	r3, r3, #7
 800dfc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfca:	d8f0      	bhi.n	800dfae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800dfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfd4:	b2d2      	uxtb	r2, r2
 800dfd6:	701a      	strb	r2, [r3, #0]
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	623b      	str	r3, [r7, #32]
 800dfe6:	e00b      	b.n	800e000 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfee:	1c59      	adds	r1, r3, #1
 800dff0:	6279      	str	r1, [r7, #36]	@ 0x24
 800dff2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	09db      	lsrs	r3, r3, #7
 800dffe:	623b      	str	r3, [r7, #32]
 800e000:	6a3b      	ldr	r3, [r7, #32]
 800e002:	2b7f      	cmp	r3, #127	@ 0x7f
 800e004:	d8f0      	bhi.n	800dfe8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	1c5a      	adds	r2, r3, #1
 800e00a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e00c:	6a3a      	ldr	r2, [r7, #32]
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	701a      	strb	r2, [r3, #0]
 800e012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e014:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	2300      	movs	r3, #0
 800e01c:	61bb      	str	r3, [r7, #24]
 800e01e:	e00b      	b.n	800e038 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	b2da      	uxtb	r2, r3
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	1c59      	adds	r1, r3, #1
 800e028:	61f9      	str	r1, [r7, #28]
 800e02a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e02e:	b2d2      	uxtb	r2, r2
 800e030:	701a      	strb	r2, [r3, #0]
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	09db      	lsrs	r3, r3, #7
 800e036:	61bb      	str	r3, [r7, #24]
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e03c:	d8f0      	bhi.n	800e020 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	1c5a      	adds	r2, r3, #1
 800e042:	61fa      	str	r2, [r7, #28]
 800e044:	69ba      	ldr	r2, [r7, #24]
 800e046:	b2d2      	uxtb	r2, r2
 800e048:	701a      	strb	r2, [r3, #0]
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800e04e:	2215      	movs	r2, #21
 800e050:	68f9      	ldr	r1, [r7, #12]
 800e052:	6938      	ldr	r0, [r7, #16]
 800e054:	f7ff f982 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f383 8811 	msr	BASEPRI, r3
}
 800e05e:	bf00      	nop
 800e060:	3748      	adds	r7, #72	@ 0x48
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	2001bf20 	.word	0x2001bf20
 800e06c:	2001bef0 	.word	0x2001bef0

0800e070 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800e070:	b580      	push	{r7, lr}
 800e072:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800e074:	4b07      	ldr	r3, [pc, #28]	@ (800e094 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d008      	beq.n	800e08e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800e07c:	4b05      	ldr	r3, [pc, #20]	@ (800e094 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800e07e:	6a1b      	ldr	r3, [r3, #32]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800e086:	4b03      	ldr	r3, [pc, #12]	@ (800e094 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4798      	blx	r3
  }
}
 800e08e:	bf00      	nop
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	2001bef0 	.word	0x2001bef0

0800e098 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e0a0:	f3ef 8311 	mrs	r3, BASEPRI
 800e0a4:	f04f 0120 	mov.w	r1, #32
 800e0a8:	f381 8811 	msr	BASEPRI, r1
 800e0ac:	617b      	str	r3, [r7, #20]
 800e0ae:	480b      	ldr	r0, [pc, #44]	@ (800e0dc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800e0b0:	f7ff f868 	bl	800d184 <_PreparePacket>
 800e0b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e0b6:	2280      	movs	r2, #128	@ 0x80
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	6938      	ldr	r0, [r7, #16]
 800e0bc:	f7ff f832 	bl	800d124 <_EncodeStr>
 800e0c0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800e0c2:	220e      	movs	r2, #14
 800e0c4:	68f9      	ldr	r1, [r7, #12]
 800e0c6:	6938      	ldr	r0, [r7, #16]
 800e0c8:	f7ff f948 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f383 8811 	msr	BASEPRI, r3
}
 800e0d2:	bf00      	nop
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	2001bf20 	.word	0x2001bf20

0800e0e0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800e0e6:	4b15      	ldr	r3, [pc, #84]	@ (800e13c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01a      	beq.n	800e124 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800e0ee:	4b13      	ldr	r3, [pc, #76]	@ (800e13c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d015      	beq.n	800e124 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800e0f8:	4b10      	ldr	r3, [pc, #64]	@ (800e13c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800e0fa:	6a1b      	ldr	r3, [r3, #32]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4798      	blx	r3
 800e100:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800e104:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800e106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	f04f 0300 	mov.w	r3, #0
 800e112:	000a      	movs	r2, r1
 800e114:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800e116:	4613      	mov	r3, r2
 800e118:	461a      	mov	r2, r3
 800e11a:	4621      	mov	r1, r4
 800e11c:	200d      	movs	r0, #13
 800e11e:	f7ff fb39 	bl	800d794 <SEGGER_SYSVIEW_RecordU32x2>
 800e122:	e006      	b.n	800e132 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800e124:	4b06      	ldr	r3, [pc, #24]	@ (800e140 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4619      	mov	r1, r3
 800e12a:	200c      	movs	r0, #12
 800e12c:	f7ff faf6 	bl	800d71c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800e130:	bf00      	nop
 800e132:	bf00      	nop
 800e134:	370c      	adds	r7, #12
 800e136:	46bd      	mov	sp, r7
 800e138:	bd90      	pop	{r4, r7, pc}
 800e13a:	bf00      	nop
 800e13c:	2001bef0 	.word	0x2001bef0
 800e140:	e0001004 	.word	0xe0001004

0800e144 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e14a:	f3ef 8311 	mrs	r3, BASEPRI
 800e14e:	f04f 0120 	mov.w	r1, #32
 800e152:	f381 8811 	msr	BASEPRI, r1
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	4819      	ldr	r0, [pc, #100]	@ (800e1c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800e15a:	f7ff f813 	bl	800d184 <_PreparePacket>
 800e15e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800e164:	4b17      	ldr	r3, [pc, #92]	@ (800e1c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e16c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	617b      	str	r3, [r7, #20]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	613b      	str	r3, [r7, #16]
 800e176:	e00b      	b.n	800e190 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	1c59      	adds	r1, r3, #1
 800e180:	6179      	str	r1, [r7, #20]
 800e182:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e186:	b2d2      	uxtb	r2, r2
 800e188:	701a      	strb	r2, [r3, #0]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	09db      	lsrs	r3, r3, #7
 800e18e:	613b      	str	r3, [r7, #16]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	2b7f      	cmp	r3, #127	@ 0x7f
 800e194:	d8f0      	bhi.n	800e178 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	617a      	str	r2, [r7, #20]
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	b2d2      	uxtb	r2, r2
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	68b8      	ldr	r0, [r7, #8]
 800e1ac:	f7ff f8d6 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f383 8811 	msr	BASEPRI, r3
}
 800e1b6:	bf00      	nop
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	2001bf20 	.word	0x2001bf20
 800e1c4:	e000ed04 	.word	0xe000ed04

0800e1c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e1ce:	f3ef 8311 	mrs	r3, BASEPRI
 800e1d2:	f04f 0120 	mov.w	r1, #32
 800e1d6:	f381 8811 	msr	BASEPRI, r1
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	4807      	ldr	r0, [pc, #28]	@ (800e1fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800e1de:	f7fe ffd1 	bl	800d184 <_PreparePacket>
 800e1e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6838      	ldr	r0, [r7, #0]
 800e1ea:	f7ff f8b7 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f383 8811 	msr	BASEPRI, r3
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	2001bf20 	.word	0x2001bf20

0800e200 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e206:	f3ef 8311 	mrs	r3, BASEPRI
 800e20a:	f04f 0120 	mov.w	r1, #32
 800e20e:	f381 8811 	msr	BASEPRI, r1
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	4807      	ldr	r0, [pc, #28]	@ (800e234 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800e216:	f7fe ffb5 	bl	800d184 <_PreparePacket>
 800e21a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800e21c:	2212      	movs	r2, #18
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6838      	ldr	r0, [r7, #0]
 800e222:	f7ff f89b 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f383 8811 	msr	BASEPRI, r3
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2001bf20 	.word	0x2001bf20

0800e238 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e23e:	f3ef 8311 	mrs	r3, BASEPRI
 800e242:	f04f 0120 	mov.w	r1, #32
 800e246:	f381 8811 	msr	BASEPRI, r1
 800e24a:	607b      	str	r3, [r7, #4]
 800e24c:	4807      	ldr	r0, [pc, #28]	@ (800e26c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800e24e:	f7fe ff99 	bl	800d184 <_PreparePacket>
 800e252:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800e254:	2211      	movs	r2, #17
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	6838      	ldr	r0, [r7, #0]
 800e25a:	f7ff f87f 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f383 8811 	msr	BASEPRI, r3
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	2001bf20 	.word	0x2001bf20

0800e270 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e278:	f3ef 8311 	mrs	r3, BASEPRI
 800e27c:	f04f 0120 	mov.w	r1, #32
 800e280:	f381 8811 	msr	BASEPRI, r1
 800e284:	617b      	str	r3, [r7, #20]
 800e286:	4819      	ldr	r0, [pc, #100]	@ (800e2ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800e288:	f7fe ff7c 	bl	800d184 <_PreparePacket>
 800e28c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e292:	4b17      	ldr	r3, [pc, #92]	@ (800e2f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	61fb      	str	r3, [r7, #28]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	61bb      	str	r3, [r7, #24]
 800e2a4:	e00b      	b.n	800e2be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	1c59      	adds	r1, r3, #1
 800e2ae:	61f9      	str	r1, [r7, #28]
 800e2b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e2b4:	b2d2      	uxtb	r2, r2
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	09db      	lsrs	r3, r3, #7
 800e2bc:	61bb      	str	r3, [r7, #24]
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2c2:	d8f0      	bhi.n	800e2a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	61fa      	str	r2, [r7, #28]
 800e2ca:	69ba      	ldr	r2, [r7, #24]
 800e2cc:	b2d2      	uxtb	r2, r2
 800e2ce:	701a      	strb	r2, [r3, #0]
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800e2d4:	2208      	movs	r2, #8
 800e2d6:	68f9      	ldr	r1, [r7, #12]
 800e2d8:	6938      	ldr	r0, [r7, #16]
 800e2da:	f7ff f83f 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	f383 8811 	msr	BASEPRI, r3
}
 800e2e4:	bf00      	nop
 800e2e6:	3720      	adds	r7, #32
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	2001bf20 	.word	0x2001bf20
 800e2f0:	2001bef0 	.word	0x2001bef0

0800e2f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e2fc:	f3ef 8311 	mrs	r3, BASEPRI
 800e300:	f04f 0120 	mov.w	r1, #32
 800e304:	f381 8811 	msr	BASEPRI, r1
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	4819      	ldr	r0, [pc, #100]	@ (800e370 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800e30c:	f7fe ff3a 	bl	800d184 <_PreparePacket>
 800e310:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e316:	4b17      	ldr	r3, [pc, #92]	@ (800e374 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	61bb      	str	r3, [r7, #24]
 800e328:	e00b      	b.n	800e342 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	1c59      	adds	r1, r3, #1
 800e332:	61f9      	str	r1, [r7, #28]
 800e334:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e338:	b2d2      	uxtb	r2, r2
 800e33a:	701a      	strb	r2, [r3, #0]
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	09db      	lsrs	r3, r3, #7
 800e340:	61bb      	str	r3, [r7, #24]
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	2b7f      	cmp	r3, #127	@ 0x7f
 800e346:	d8f0      	bhi.n	800e32a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	61fa      	str	r2, [r7, #28]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	b2d2      	uxtb	r2, r2
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800e358:	2204      	movs	r2, #4
 800e35a:	68f9      	ldr	r1, [r7, #12]
 800e35c:	6938      	ldr	r0, [r7, #16]
 800e35e:	f7fe fffd 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	f383 8811 	msr	BASEPRI, r3
}
 800e368:	bf00      	nop
 800e36a:	3720      	adds	r7, #32
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	2001bf20 	.word	0x2001bf20
 800e374:	2001bef0 	.word	0x2001bef0

0800e378 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e380:	f3ef 8311 	mrs	r3, BASEPRI
 800e384:	f04f 0120 	mov.w	r1, #32
 800e388:	f381 8811 	msr	BASEPRI, r1
 800e38c:	617b      	str	r3, [r7, #20]
 800e38e:	4819      	ldr	r0, [pc, #100]	@ (800e3f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800e390:	f7fe fef8 	bl	800d184 <_PreparePacket>
 800e394:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e39a:	4b17      	ldr	r3, [pc, #92]	@ (800e3f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	61fb      	str	r3, [r7, #28]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	61bb      	str	r3, [r7, #24]
 800e3ac:	e00b      	b.n	800e3c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	1c59      	adds	r1, r3, #1
 800e3b6:	61f9      	str	r1, [r7, #28]
 800e3b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e3bc:	b2d2      	uxtb	r2, r2
 800e3be:	701a      	strb	r2, [r3, #0]
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	09db      	lsrs	r3, r3, #7
 800e3c4:	61bb      	str	r3, [r7, #24]
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3ca:	d8f0      	bhi.n	800e3ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	61fa      	str	r2, [r7, #28]
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	b2d2      	uxtb	r2, r2
 800e3d6:	701a      	strb	r2, [r3, #0]
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800e3dc:	2206      	movs	r2, #6
 800e3de:	68f9      	ldr	r1, [r7, #12]
 800e3e0:	6938      	ldr	r0, [r7, #16]
 800e3e2:	f7fe ffbb 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f383 8811 	msr	BASEPRI, r3
}
 800e3ec:	bf00      	nop
 800e3ee:	3720      	adds	r7, #32
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	2001bf20 	.word	0x2001bf20
 800e3f8:	2001bef0 	.word	0x2001bef0

0800e3fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	@ 0x28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e406:	f3ef 8311 	mrs	r3, BASEPRI
 800e40a:	f04f 0120 	mov.w	r1, #32
 800e40e:	f381 8811 	msr	BASEPRI, r1
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	4827      	ldr	r0, [pc, #156]	@ (800e4b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800e416:	f7fe feb5 	bl	800d184 <_PreparePacket>
 800e41a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e420:	4b25      	ldr	r3, [pc, #148]	@ (800e4b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	623b      	str	r3, [r7, #32]
 800e432:	e00b      	b.n	800e44c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	b2da      	uxtb	r2, r3
 800e438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43a:	1c59      	adds	r1, r3, #1
 800e43c:	6279      	str	r1, [r7, #36]	@ 0x24
 800e43e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e442:	b2d2      	uxtb	r2, r2
 800e444:	701a      	strb	r2, [r3, #0]
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	09db      	lsrs	r3, r3, #7
 800e44a:	623b      	str	r3, [r7, #32]
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e450:	d8f0      	bhi.n	800e434 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800e452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	627a      	str	r2, [r7, #36]	@ 0x24
 800e458:	6a3a      	ldr	r2, [r7, #32]
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	701a      	strb	r2, [r3, #0]
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	61fb      	str	r3, [r7, #28]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	61bb      	str	r3, [r7, #24]
 800e46a:	e00b      	b.n	800e484 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	1c59      	adds	r1, r3, #1
 800e474:	61f9      	str	r1, [r7, #28]
 800e476:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e47a:	b2d2      	uxtb	r2, r2
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	09db      	lsrs	r3, r3, #7
 800e482:	61bb      	str	r3, [r7, #24]
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	2b7f      	cmp	r3, #127	@ 0x7f
 800e488:	d8f0      	bhi.n	800e46c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	61fa      	str	r2, [r7, #28]
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800e49a:	2207      	movs	r2, #7
 800e49c:	68f9      	ldr	r1, [r7, #12]
 800e49e:	6938      	ldr	r0, [r7, #16]
 800e4a0:	f7fe ff5c 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	f383 8811 	msr	BASEPRI, r3
}
 800e4aa:	bf00      	nop
 800e4ac:	3728      	adds	r7, #40	@ 0x28
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	2001bf20 	.word	0x2001bf20
 800e4b8:	2001bef0 	.word	0x2001bef0

0800e4bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800e4c4:	4b04      	ldr	r3, [pc, #16]	@ (800e4d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	1ad3      	subs	r3, r2, r3
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr
 800e4d8:	2001bef0 	.word	0x2001bef0

0800e4dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08c      	sub	sp, #48	@ 0x30
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800e4e6:	4b40      	ldr	r3, [pc, #256]	@ (800e5e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d077      	beq.n	800e5de <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800e4ee:	4b3e      	ldr	r3, [pc, #248]	@ (800e5e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4f8:	e008      	b.n	800e50c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800e4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	2b00      	cmp	r3, #0
 800e504:	d007      	beq.n	800e516 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800e506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e508:	3301      	adds	r3, #1
 800e50a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e510:	429a      	cmp	r2, r3
 800e512:	d3f2      	bcc.n	800e4fa <SEGGER_SYSVIEW_SendModule+0x1e>
 800e514:	e000      	b.n	800e518 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800e516:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800e518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d055      	beq.n	800e5ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e51e:	f3ef 8311 	mrs	r3, BASEPRI
 800e522:	f04f 0120 	mov.w	r1, #32
 800e526:	f381 8811 	msr	BASEPRI, r1
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	482f      	ldr	r0, [pc, #188]	@ (800e5ec <SEGGER_SYSVIEW_SendModule+0x110>)
 800e52e:	f7fe fe29 	bl	800d184 <_PreparePacket>
 800e532:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e53c:	79fb      	ldrb	r3, [r7, #7]
 800e53e:	623b      	str	r3, [r7, #32]
 800e540:	e00b      	b.n	800e55a <SEGGER_SYSVIEW_SendModule+0x7e>
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	b2da      	uxtb	r2, r3
 800e546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e548:	1c59      	adds	r1, r3, #1
 800e54a:	6279      	str	r1, [r7, #36]	@ 0x24
 800e54c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e550:	b2d2      	uxtb	r2, r2
 800e552:	701a      	strb	r2, [r3, #0]
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	09db      	lsrs	r3, r3, #7
 800e558:	623b      	str	r3, [r7, #32]
 800e55a:	6a3b      	ldr	r3, [r7, #32]
 800e55c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e55e:	d8f0      	bhi.n	800e542 <SEGGER_SYSVIEW_SendModule+0x66>
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	627a      	str	r2, [r7, #36]	@ 0x24
 800e566:	6a3a      	ldr	r2, [r7, #32]
 800e568:	b2d2      	uxtb	r2, r2
 800e56a:	701a      	strb	r2, [r3, #0]
 800e56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	61fb      	str	r3, [r7, #28]
 800e574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	61bb      	str	r3, [r7, #24]
 800e57a:	e00b      	b.n	800e594 <SEGGER_SYSVIEW_SendModule+0xb8>
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	1c59      	adds	r1, r3, #1
 800e584:	61f9      	str	r1, [r7, #28]
 800e586:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e58a:	b2d2      	uxtb	r2, r2
 800e58c:	701a      	strb	r2, [r3, #0]
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	09db      	lsrs	r3, r3, #7
 800e592:	61bb      	str	r3, [r7, #24]
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	2b7f      	cmp	r3, #127	@ 0x7f
 800e598:	d8f0      	bhi.n	800e57c <SEGGER_SYSVIEW_SendModule+0xa0>
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	61fa      	str	r2, [r7, #28]
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2280      	movs	r2, #128	@ 0x80
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f7fe fdb6 	bl	800d124 <_EncodeStr>
 800e5b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800e5ba:	2216      	movs	r2, #22
 800e5bc:	68f9      	ldr	r1, [r7, #12]
 800e5be:	6938      	ldr	r0, [r7, #16]
 800e5c0:	f7fe fecc 	bl	800d35c <_SendPacket>
      RECORD_END();
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800e5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d006      	beq.n	800e5de <SEGGER_SYSVIEW_SendModule+0x102>
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800e5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	4798      	blx	r3
    }
  }
}
 800e5de:	bf00      	nop
 800e5e0:	3730      	adds	r7, #48	@ 0x30
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	2001bf18 	.word	0x2001bf18
 800e5ec:	2001bf20 	.word	0x2001bf20

0800e5f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800e5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00f      	beq.n	800e61e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1f2      	bne.n	800e604 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800e61e:	bf00      	nop
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	2001bf18 	.word	0x2001bf18

0800e62c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800e632:	f3ef 8311 	mrs	r3, BASEPRI
 800e636:	f04f 0120 	mov.w	r1, #32
 800e63a:	f381 8811 	msr	BASEPRI, r1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	4817      	ldr	r0, [pc, #92]	@ (800e6a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800e642:	f7fe fd9f 	bl	800d184 <_PreparePacket>
 800e646:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	4b14      	ldr	r3, [pc, #80]	@ (800e6a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	613b      	str	r3, [r7, #16]
 800e656:	e00b      	b.n	800e670 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	1c59      	adds	r1, r3, #1
 800e660:	6179      	str	r1, [r7, #20]
 800e662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e666:	b2d2      	uxtb	r2, r2
 800e668:	701a      	strb	r2, [r3, #0]
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	09db      	lsrs	r3, r3, #7
 800e66e:	613b      	str	r3, [r7, #16]
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2b7f      	cmp	r3, #127	@ 0x7f
 800e674:	d8f0      	bhi.n	800e658 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	617a      	str	r2, [r7, #20]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	b2d2      	uxtb	r2, r2
 800e680:	701a      	strb	r2, [r3, #0]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800e686:	221b      	movs	r2, #27
 800e688:	6879      	ldr	r1, [r7, #4]
 800e68a:	68b8      	ldr	r0, [r7, #8]
 800e68c:	f7fe fe66 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f383 8811 	msr	BASEPRI, r3
}
 800e696:	bf00      	nop
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	2001bf20 	.word	0x2001bf20
 800e6a4:	2001bf1c 	.word	0x2001bf1c

0800e6a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	@ 0x28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e6b0:	f3ef 8311 	mrs	r3, BASEPRI
 800e6b4:	f04f 0120 	mov.w	r1, #32
 800e6b8:	f381 8811 	msr	BASEPRI, r1
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	4827      	ldr	r0, [pc, #156]	@ (800e75c <SEGGER_SYSVIEW_Warn+0xb4>)
 800e6c0:	f7fe fd60 	bl	800d184 <_PreparePacket>
 800e6c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e6c6:	2280      	movs	r2, #128	@ 0x80
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	6938      	ldr	r0, [r7, #16]
 800e6cc:	f7fe fd2a 	bl	800d124 <_EncodeStr>
 800e6d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	623b      	str	r3, [r7, #32]
 800e6da:	e00b      	b.n	800e6f4 <SEGGER_SYSVIEW_Warn+0x4c>
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	1c59      	adds	r1, r3, #1
 800e6e4:	6279      	str	r1, [r7, #36]	@ 0x24
 800e6e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e6ea:	b2d2      	uxtb	r2, r2
 800e6ec:	701a      	strb	r2, [r3, #0]
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	09db      	lsrs	r3, r3, #7
 800e6f2:	623b      	str	r3, [r7, #32]
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6f8:	d8f0      	bhi.n	800e6dc <SEGGER_SYSVIEW_Warn+0x34>
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800e700:	6a3a      	ldr	r2, [r7, #32]
 800e702:	b2d2      	uxtb	r2, r2
 800e704:	701a      	strb	r2, [r3, #0]
 800e706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e708:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	2300      	movs	r3, #0
 800e710:	61bb      	str	r3, [r7, #24]
 800e712:	e00b      	b.n	800e72c <SEGGER_SYSVIEW_Warn+0x84>
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	b2da      	uxtb	r2, r3
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	1c59      	adds	r1, r3, #1
 800e71c:	61f9      	str	r1, [r7, #28]
 800e71e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e722:	b2d2      	uxtb	r2, r2
 800e724:	701a      	strb	r2, [r3, #0]
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	09db      	lsrs	r3, r3, #7
 800e72a:	61bb      	str	r3, [r7, #24]
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e730:	d8f0      	bhi.n	800e714 <SEGGER_SYSVIEW_Warn+0x6c>
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	1c5a      	adds	r2, r3, #1
 800e736:	61fa      	str	r2, [r7, #28]
 800e738:	69ba      	ldr	r2, [r7, #24]
 800e73a:	b2d2      	uxtb	r2, r2
 800e73c:	701a      	strb	r2, [r3, #0]
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e742:	221a      	movs	r2, #26
 800e744:	68f9      	ldr	r1, [r7, #12]
 800e746:	6938      	ldr	r0, [r7, #16]
 800e748:	f7fe fe08 	bl	800d35c <_SendPacket>
  RECORD_END();
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f383 8811 	msr	BASEPRI, r3
}
 800e752:	bf00      	nop
 800e754:	3728      	adds	r7, #40	@ 0x28
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	2001bf20 	.word	0x2001bf20

0800e760 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	2000      	movs	r0, #0
 800e774:	f7fe fbe0 	bl	800cf38 <SEGGER_RTT_Write>
  return len;
 800e778:	683b      	ldr	r3, [r7, #0]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <sulp>:
 800e782:	b570      	push	{r4, r5, r6, lr}
 800e784:	4604      	mov	r4, r0
 800e786:	460d      	mov	r5, r1
 800e788:	ec45 4b10 	vmov	d0, r4, r5
 800e78c:	4616      	mov	r6, r2
 800e78e:	f001 ffe5 	bl	801075c <__ulp>
 800e792:	ec51 0b10 	vmov	r0, r1, d0
 800e796:	b17e      	cbz	r6, 800e7b8 <sulp+0x36>
 800e798:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e79c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	dd09      	ble.n	800e7b8 <sulp+0x36>
 800e7a4:	051b      	lsls	r3, r3, #20
 800e7a6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e7aa:	2400      	movs	r4, #0
 800e7ac:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	f7f1 ff78 	bl	80006a8 <__aeabi_dmul>
 800e7b8:	ec41 0b10 	vmov	d0, r0, r1
 800e7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e7c0 <_strtod_l>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	b09f      	sub	sp, #124	@ 0x7c
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e7ce:	9005      	str	r0, [sp, #20]
 800e7d0:	f04f 0a00 	mov.w	sl, #0
 800e7d4:	f04f 0b00 	mov.w	fp, #0
 800e7d8:	460a      	mov	r2, r1
 800e7da:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7dc:	7811      	ldrb	r1, [r2, #0]
 800e7de:	292b      	cmp	r1, #43	@ 0x2b
 800e7e0:	d04a      	beq.n	800e878 <_strtod_l+0xb8>
 800e7e2:	d838      	bhi.n	800e856 <_strtod_l+0x96>
 800e7e4:	290d      	cmp	r1, #13
 800e7e6:	d832      	bhi.n	800e84e <_strtod_l+0x8e>
 800e7e8:	2908      	cmp	r1, #8
 800e7ea:	d832      	bhi.n	800e852 <_strtod_l+0x92>
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	d03b      	beq.n	800e868 <_strtod_l+0xa8>
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e7f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e7f6:	782a      	ldrb	r2, [r5, #0]
 800e7f8:	2a30      	cmp	r2, #48	@ 0x30
 800e7fa:	f040 80b3 	bne.w	800e964 <_strtod_l+0x1a4>
 800e7fe:	786a      	ldrb	r2, [r5, #1]
 800e800:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e804:	2a58      	cmp	r2, #88	@ 0x58
 800e806:	d16e      	bne.n	800e8e6 <_strtod_l+0x126>
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	4a8e      	ldr	r2, [pc, #568]	@ (800ea4c <_strtod_l+0x28c>)
 800e814:	9805      	ldr	r0, [sp, #20]
 800e816:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e818:	a919      	add	r1, sp, #100	@ 0x64
 800e81a:	f001 f899 	bl	800f950 <__gethex>
 800e81e:	f010 060f 	ands.w	r6, r0, #15
 800e822:	4604      	mov	r4, r0
 800e824:	d005      	beq.n	800e832 <_strtod_l+0x72>
 800e826:	2e06      	cmp	r6, #6
 800e828:	d128      	bne.n	800e87c <_strtod_l+0xbc>
 800e82a:	3501      	adds	r5, #1
 800e82c:	2300      	movs	r3, #0
 800e82e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e830:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e834:	2b00      	cmp	r3, #0
 800e836:	f040 858e 	bne.w	800f356 <_strtod_l+0xb96>
 800e83a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e83c:	b1cb      	cbz	r3, 800e872 <_strtod_l+0xb2>
 800e83e:	4652      	mov	r2, sl
 800e840:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e844:	ec43 2b10 	vmov	d0, r2, r3
 800e848:	b01f      	add	sp, #124	@ 0x7c
 800e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84e:	2920      	cmp	r1, #32
 800e850:	d1ce      	bne.n	800e7f0 <_strtod_l+0x30>
 800e852:	3201      	adds	r2, #1
 800e854:	e7c1      	b.n	800e7da <_strtod_l+0x1a>
 800e856:	292d      	cmp	r1, #45	@ 0x2d
 800e858:	d1ca      	bne.n	800e7f0 <_strtod_l+0x30>
 800e85a:	2101      	movs	r1, #1
 800e85c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e85e:	1c51      	adds	r1, r2, #1
 800e860:	9119      	str	r1, [sp, #100]	@ 0x64
 800e862:	7852      	ldrb	r2, [r2, #1]
 800e864:	2a00      	cmp	r2, #0
 800e866:	d1c5      	bne.n	800e7f4 <_strtod_l+0x34>
 800e868:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e86a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f040 8570 	bne.w	800f352 <_strtod_l+0xb92>
 800e872:	4652      	mov	r2, sl
 800e874:	465b      	mov	r3, fp
 800e876:	e7e5      	b.n	800e844 <_strtod_l+0x84>
 800e878:	2100      	movs	r1, #0
 800e87a:	e7ef      	b.n	800e85c <_strtod_l+0x9c>
 800e87c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e87e:	b13a      	cbz	r2, 800e890 <_strtod_l+0xd0>
 800e880:	2135      	movs	r1, #53	@ 0x35
 800e882:	a81c      	add	r0, sp, #112	@ 0x70
 800e884:	f002 f864 	bl	8010950 <__copybits>
 800e888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e88a:	9805      	ldr	r0, [sp, #20]
 800e88c:	f001 fc32 	bl	80100f4 <_Bfree>
 800e890:	3e01      	subs	r6, #1
 800e892:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e894:	2e04      	cmp	r6, #4
 800e896:	d806      	bhi.n	800e8a6 <_strtod_l+0xe6>
 800e898:	e8df f006 	tbb	[pc, r6]
 800e89c:	201d0314 	.word	0x201d0314
 800e8a0:	14          	.byte	0x14
 800e8a1:	00          	.byte	0x00
 800e8a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e8a6:	05e1      	lsls	r1, r4, #23
 800e8a8:	bf48      	it	mi
 800e8aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8b2:	0d1b      	lsrs	r3, r3, #20
 800e8b4:	051b      	lsls	r3, r3, #20
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1bb      	bne.n	800e832 <_strtod_l+0x72>
 800e8ba:	f000 ff4d 	bl	800f758 <__errno>
 800e8be:	2322      	movs	r3, #34	@ 0x22
 800e8c0:	6003      	str	r3, [r0, #0]
 800e8c2:	e7b6      	b.n	800e832 <_strtod_l+0x72>
 800e8c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e8c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e8cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e8d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e8d4:	e7e7      	b.n	800e8a6 <_strtod_l+0xe6>
 800e8d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ea54 <_strtod_l+0x294>
 800e8da:	e7e4      	b.n	800e8a6 <_strtod_l+0xe6>
 800e8dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e8e0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e8e4:	e7df      	b.n	800e8a6 <_strtod_l+0xe6>
 800e8e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8e8:	1c5a      	adds	r2, r3, #1
 800e8ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8ec:	785b      	ldrb	r3, [r3, #1]
 800e8ee:	2b30      	cmp	r3, #48	@ 0x30
 800e8f0:	d0f9      	beq.n	800e8e6 <_strtod_l+0x126>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d09d      	beq.n	800e832 <_strtod_l+0x72>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8fe:	2300      	movs	r3, #0
 800e900:	9308      	str	r3, [sp, #32]
 800e902:	930a      	str	r3, [sp, #40]	@ 0x28
 800e904:	461f      	mov	r7, r3
 800e906:	220a      	movs	r2, #10
 800e908:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e90a:	7805      	ldrb	r5, [r0, #0]
 800e90c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e910:	b2d9      	uxtb	r1, r3
 800e912:	2909      	cmp	r1, #9
 800e914:	d928      	bls.n	800e968 <_strtod_l+0x1a8>
 800e916:	494e      	ldr	r1, [pc, #312]	@ (800ea50 <_strtod_l+0x290>)
 800e918:	2201      	movs	r2, #1
 800e91a:	f000 fed6 	bl	800f6ca <strncmp>
 800e91e:	2800      	cmp	r0, #0
 800e920:	d032      	beq.n	800e988 <_strtod_l+0x1c8>
 800e922:	2000      	movs	r0, #0
 800e924:	462a      	mov	r2, r5
 800e926:	4681      	mov	r9, r0
 800e928:	463d      	mov	r5, r7
 800e92a:	4603      	mov	r3, r0
 800e92c:	2a65      	cmp	r2, #101	@ 0x65
 800e92e:	d001      	beq.n	800e934 <_strtod_l+0x174>
 800e930:	2a45      	cmp	r2, #69	@ 0x45
 800e932:	d114      	bne.n	800e95e <_strtod_l+0x19e>
 800e934:	b91d      	cbnz	r5, 800e93e <_strtod_l+0x17e>
 800e936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e938:	4302      	orrs	r2, r0
 800e93a:	d095      	beq.n	800e868 <_strtod_l+0xa8>
 800e93c:	2500      	movs	r5, #0
 800e93e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e940:	1c62      	adds	r2, r4, #1
 800e942:	9219      	str	r2, [sp, #100]	@ 0x64
 800e944:	7862      	ldrb	r2, [r4, #1]
 800e946:	2a2b      	cmp	r2, #43	@ 0x2b
 800e948:	d077      	beq.n	800ea3a <_strtod_l+0x27a>
 800e94a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e94c:	d07b      	beq.n	800ea46 <_strtod_l+0x286>
 800e94e:	f04f 0c00 	mov.w	ip, #0
 800e952:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e956:	2909      	cmp	r1, #9
 800e958:	f240 8082 	bls.w	800ea60 <_strtod_l+0x2a0>
 800e95c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	e0a2      	b.n	800eaaa <_strtod_l+0x2ea>
 800e964:	2300      	movs	r3, #0
 800e966:	e7c7      	b.n	800e8f8 <_strtod_l+0x138>
 800e968:	2f08      	cmp	r7, #8
 800e96a:	bfd5      	itete	le
 800e96c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e96e:	9908      	ldrgt	r1, [sp, #32]
 800e970:	fb02 3301 	mlale	r3, r2, r1, r3
 800e974:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e978:	f100 0001 	add.w	r0, r0, #1
 800e97c:	bfd4      	ite	le
 800e97e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e980:	9308      	strgt	r3, [sp, #32]
 800e982:	3701      	adds	r7, #1
 800e984:	9019      	str	r0, [sp, #100]	@ 0x64
 800e986:	e7bf      	b.n	800e908 <_strtod_l+0x148>
 800e988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e98a:	1c5a      	adds	r2, r3, #1
 800e98c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e98e:	785a      	ldrb	r2, [r3, #1]
 800e990:	b37f      	cbz	r7, 800e9f2 <_strtod_l+0x232>
 800e992:	4681      	mov	r9, r0
 800e994:	463d      	mov	r5, r7
 800e996:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	d912      	bls.n	800e9c4 <_strtod_l+0x204>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e7c4      	b.n	800e92c <_strtod_l+0x16c>
 800e9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9a8:	785a      	ldrb	r2, [r3, #1]
 800e9aa:	3001      	adds	r0, #1
 800e9ac:	2a30      	cmp	r2, #48	@ 0x30
 800e9ae:	d0f8      	beq.n	800e9a2 <_strtod_l+0x1e2>
 800e9b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e9b4:	2b08      	cmp	r3, #8
 800e9b6:	f200 84d3 	bhi.w	800f360 <_strtod_l+0xba0>
 800e9ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9be:	4681      	mov	r9, r0
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	3a30      	subs	r2, #48	@ 0x30
 800e9c6:	f100 0301 	add.w	r3, r0, #1
 800e9ca:	d02a      	beq.n	800ea22 <_strtod_l+0x262>
 800e9cc:	4499      	add	r9, r3
 800e9ce:	eb00 0c05 	add.w	ip, r0, r5
 800e9d2:	462b      	mov	r3, r5
 800e9d4:	210a      	movs	r1, #10
 800e9d6:	4563      	cmp	r3, ip
 800e9d8:	d10d      	bne.n	800e9f6 <_strtod_l+0x236>
 800e9da:	1c69      	adds	r1, r5, #1
 800e9dc:	4401      	add	r1, r0
 800e9de:	4428      	add	r0, r5
 800e9e0:	2808      	cmp	r0, #8
 800e9e2:	dc16      	bgt.n	800ea12 <_strtod_l+0x252>
 800e9e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e9e6:	230a      	movs	r3, #10
 800e9e8:	fb03 2300 	mla	r3, r3, r0, r2
 800e9ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e018      	b.n	800ea24 <_strtod_l+0x264>
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	e7da      	b.n	800e9ac <_strtod_l+0x1ec>
 800e9f6:	2b08      	cmp	r3, #8
 800e9f8:	f103 0301 	add.w	r3, r3, #1
 800e9fc:	dc03      	bgt.n	800ea06 <_strtod_l+0x246>
 800e9fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ea00:	434e      	muls	r6, r1
 800ea02:	960a      	str	r6, [sp, #40]	@ 0x28
 800ea04:	e7e7      	b.n	800e9d6 <_strtod_l+0x216>
 800ea06:	2b10      	cmp	r3, #16
 800ea08:	bfde      	ittt	le
 800ea0a:	9e08      	ldrle	r6, [sp, #32]
 800ea0c:	434e      	mulle	r6, r1
 800ea0e:	9608      	strle	r6, [sp, #32]
 800ea10:	e7e1      	b.n	800e9d6 <_strtod_l+0x216>
 800ea12:	280f      	cmp	r0, #15
 800ea14:	dceb      	bgt.n	800e9ee <_strtod_l+0x22e>
 800ea16:	9808      	ldr	r0, [sp, #32]
 800ea18:	230a      	movs	r3, #10
 800ea1a:	fb03 2300 	mla	r3, r3, r0, r2
 800ea1e:	9308      	str	r3, [sp, #32]
 800ea20:	e7e5      	b.n	800e9ee <_strtod_l+0x22e>
 800ea22:	4629      	mov	r1, r5
 800ea24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea26:	1c50      	adds	r0, r2, #1
 800ea28:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea2a:	7852      	ldrb	r2, [r2, #1]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	460d      	mov	r5, r1
 800ea30:	e7b1      	b.n	800e996 <_strtod_l+0x1d6>
 800ea32:	f04f 0900 	mov.w	r9, #0
 800ea36:	2301      	movs	r3, #1
 800ea38:	e77d      	b.n	800e936 <_strtod_l+0x176>
 800ea3a:	f04f 0c00 	mov.w	ip, #0
 800ea3e:	1ca2      	adds	r2, r4, #2
 800ea40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea42:	78a2      	ldrb	r2, [r4, #2]
 800ea44:	e785      	b.n	800e952 <_strtod_l+0x192>
 800ea46:	f04f 0c01 	mov.w	ip, #1
 800ea4a:	e7f8      	b.n	800ea3e <_strtod_l+0x27e>
 800ea4c:	08012ac0 	.word	0x08012ac0
 800ea50:	08012a9e 	.word	0x08012a9e
 800ea54:	7ff00000 	.word	0x7ff00000
 800ea58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea5a:	1c51      	adds	r1, r2, #1
 800ea5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea5e:	7852      	ldrb	r2, [r2, #1]
 800ea60:	2a30      	cmp	r2, #48	@ 0x30
 800ea62:	d0f9      	beq.n	800ea58 <_strtod_l+0x298>
 800ea64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ea68:	2908      	cmp	r1, #8
 800ea6a:	f63f af78 	bhi.w	800e95e <_strtod_l+0x19e>
 800ea6e:	3a30      	subs	r2, #48	@ 0x30
 800ea70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ea76:	f04f 080a 	mov.w	r8, #10
 800ea7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea7c:	1c56      	adds	r6, r2, #1
 800ea7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ea80:	7852      	ldrb	r2, [r2, #1]
 800ea82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ea86:	f1be 0f09 	cmp.w	lr, #9
 800ea8a:	d939      	bls.n	800eb00 <_strtod_l+0x340>
 800ea8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea8e:	1a76      	subs	r6, r6, r1
 800ea90:	2e08      	cmp	r6, #8
 800ea92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ea96:	dc03      	bgt.n	800eaa0 <_strtod_l+0x2e0>
 800ea98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea9a:	4588      	cmp	r8, r1
 800ea9c:	bfa8      	it	ge
 800ea9e:	4688      	movge	r8, r1
 800eaa0:	f1bc 0f00 	cmp.w	ip, #0
 800eaa4:	d001      	beq.n	800eaaa <_strtod_l+0x2ea>
 800eaa6:	f1c8 0800 	rsb	r8, r8, #0
 800eaaa:	2d00      	cmp	r5, #0
 800eaac:	d14e      	bne.n	800eb4c <_strtod_l+0x38c>
 800eaae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eab0:	4308      	orrs	r0, r1
 800eab2:	f47f aebe 	bne.w	800e832 <_strtod_l+0x72>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f47f aed6 	bne.w	800e868 <_strtod_l+0xa8>
 800eabc:	2a69      	cmp	r2, #105	@ 0x69
 800eabe:	d028      	beq.n	800eb12 <_strtod_l+0x352>
 800eac0:	dc25      	bgt.n	800eb0e <_strtod_l+0x34e>
 800eac2:	2a49      	cmp	r2, #73	@ 0x49
 800eac4:	d025      	beq.n	800eb12 <_strtod_l+0x352>
 800eac6:	2a4e      	cmp	r2, #78	@ 0x4e
 800eac8:	f47f aece 	bne.w	800e868 <_strtod_l+0xa8>
 800eacc:	499b      	ldr	r1, [pc, #620]	@ (800ed3c <_strtod_l+0x57c>)
 800eace:	a819      	add	r0, sp, #100	@ 0x64
 800ead0:	f001 f960 	bl	800fd94 <__match>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f43f aec7 	beq.w	800e868 <_strtod_l+0xa8>
 800eada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b28      	cmp	r3, #40	@ 0x28
 800eae0:	d12e      	bne.n	800eb40 <_strtod_l+0x380>
 800eae2:	4997      	ldr	r1, [pc, #604]	@ (800ed40 <_strtod_l+0x580>)
 800eae4:	aa1c      	add	r2, sp, #112	@ 0x70
 800eae6:	a819      	add	r0, sp, #100	@ 0x64
 800eae8:	f001 f968 	bl	800fdbc <__hexnan>
 800eaec:	2805      	cmp	r0, #5
 800eaee:	d127      	bne.n	800eb40 <_strtod_l+0x380>
 800eaf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eaf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eaf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eafa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eafe:	e698      	b.n	800e832 <_strtod_l+0x72>
 800eb00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb02:	fb08 2101 	mla	r1, r8, r1, r2
 800eb06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eb0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb0c:	e7b5      	b.n	800ea7a <_strtod_l+0x2ba>
 800eb0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800eb10:	e7da      	b.n	800eac8 <_strtod_l+0x308>
 800eb12:	498c      	ldr	r1, [pc, #560]	@ (800ed44 <_strtod_l+0x584>)
 800eb14:	a819      	add	r0, sp, #100	@ 0x64
 800eb16:	f001 f93d 	bl	800fd94 <__match>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	f43f aea4 	beq.w	800e868 <_strtod_l+0xa8>
 800eb20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb22:	4989      	ldr	r1, [pc, #548]	@ (800ed48 <_strtod_l+0x588>)
 800eb24:	3b01      	subs	r3, #1
 800eb26:	a819      	add	r0, sp, #100	@ 0x64
 800eb28:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb2a:	f001 f933 	bl	800fd94 <__match>
 800eb2e:	b910      	cbnz	r0, 800eb36 <_strtod_l+0x376>
 800eb30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb32:	3301      	adds	r3, #1
 800eb34:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ed58 <_strtod_l+0x598>
 800eb3a:	f04f 0a00 	mov.w	sl, #0
 800eb3e:	e678      	b.n	800e832 <_strtod_l+0x72>
 800eb40:	4882      	ldr	r0, [pc, #520]	@ (800ed4c <_strtod_l+0x58c>)
 800eb42:	f000 fe45 	bl	800f7d0 <nan>
 800eb46:	ec5b ab10 	vmov	sl, fp, d0
 800eb4a:	e672      	b.n	800e832 <_strtod_l+0x72>
 800eb4c:	eba8 0309 	sub.w	r3, r8, r9
 800eb50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb54:	2f00      	cmp	r7, #0
 800eb56:	bf08      	it	eq
 800eb58:	462f      	moveq	r7, r5
 800eb5a:	2d10      	cmp	r5, #16
 800eb5c:	462c      	mov	r4, r5
 800eb5e:	bfa8      	it	ge
 800eb60:	2410      	movge	r4, #16
 800eb62:	f7f1 fd27 	bl	80005b4 <__aeabi_ui2d>
 800eb66:	2d09      	cmp	r5, #9
 800eb68:	4682      	mov	sl, r0
 800eb6a:	468b      	mov	fp, r1
 800eb6c:	dc13      	bgt.n	800eb96 <_strtod_l+0x3d6>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f43f ae5e 	beq.w	800e832 <_strtod_l+0x72>
 800eb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb78:	dd78      	ble.n	800ec6c <_strtod_l+0x4ac>
 800eb7a:	2b16      	cmp	r3, #22
 800eb7c:	dc5f      	bgt.n	800ec3e <_strtod_l+0x47e>
 800eb7e:	4974      	ldr	r1, [pc, #464]	@ (800ed50 <_strtod_l+0x590>)
 800eb80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb88:	4652      	mov	r2, sl
 800eb8a:	465b      	mov	r3, fp
 800eb8c:	f7f1 fd8c 	bl	80006a8 <__aeabi_dmul>
 800eb90:	4682      	mov	sl, r0
 800eb92:	468b      	mov	fp, r1
 800eb94:	e64d      	b.n	800e832 <_strtod_l+0x72>
 800eb96:	4b6e      	ldr	r3, [pc, #440]	@ (800ed50 <_strtod_l+0x590>)
 800eb98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eba0:	f7f1 fd82 	bl	80006a8 <__aeabi_dmul>
 800eba4:	4682      	mov	sl, r0
 800eba6:	9808      	ldr	r0, [sp, #32]
 800eba8:	468b      	mov	fp, r1
 800ebaa:	f7f1 fd03 	bl	80005b4 <__aeabi_ui2d>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	f7f1 fbc1 	bl	800033c <__adddf3>
 800ebba:	2d0f      	cmp	r5, #15
 800ebbc:	4682      	mov	sl, r0
 800ebbe:	468b      	mov	fp, r1
 800ebc0:	ddd5      	ble.n	800eb6e <_strtod_l+0x3ae>
 800ebc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc4:	1b2c      	subs	r4, r5, r4
 800ebc6:	441c      	add	r4, r3
 800ebc8:	2c00      	cmp	r4, #0
 800ebca:	f340 8096 	ble.w	800ecfa <_strtod_l+0x53a>
 800ebce:	f014 030f 	ands.w	r3, r4, #15
 800ebd2:	d00a      	beq.n	800ebea <_strtod_l+0x42a>
 800ebd4:	495e      	ldr	r1, [pc, #376]	@ (800ed50 <_strtod_l+0x590>)
 800ebd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebda:	4652      	mov	r2, sl
 800ebdc:	465b      	mov	r3, fp
 800ebde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebe2:	f7f1 fd61 	bl	80006a8 <__aeabi_dmul>
 800ebe6:	4682      	mov	sl, r0
 800ebe8:	468b      	mov	fp, r1
 800ebea:	f034 040f 	bics.w	r4, r4, #15
 800ebee:	d073      	beq.n	800ecd8 <_strtod_l+0x518>
 800ebf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ebf4:	dd48      	ble.n	800ec88 <_strtod_l+0x4c8>
 800ebf6:	2400      	movs	r4, #0
 800ebf8:	46a0      	mov	r8, r4
 800ebfa:	940a      	str	r4, [sp, #40]	@ 0x28
 800ebfc:	46a1      	mov	r9, r4
 800ebfe:	9a05      	ldr	r2, [sp, #20]
 800ec00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ed58 <_strtod_l+0x598>
 800ec04:	2322      	movs	r3, #34	@ 0x22
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	f04f 0a00 	mov.w	sl, #0
 800ec0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f43f ae0f 	beq.w	800e832 <_strtod_l+0x72>
 800ec14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec16:	9805      	ldr	r0, [sp, #20]
 800ec18:	f001 fa6c 	bl	80100f4 <_Bfree>
 800ec1c:	9805      	ldr	r0, [sp, #20]
 800ec1e:	4649      	mov	r1, r9
 800ec20:	f001 fa68 	bl	80100f4 <_Bfree>
 800ec24:	9805      	ldr	r0, [sp, #20]
 800ec26:	4641      	mov	r1, r8
 800ec28:	f001 fa64 	bl	80100f4 <_Bfree>
 800ec2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec2e:	9805      	ldr	r0, [sp, #20]
 800ec30:	f001 fa60 	bl	80100f4 <_Bfree>
 800ec34:	9805      	ldr	r0, [sp, #20]
 800ec36:	4621      	mov	r1, r4
 800ec38:	f001 fa5c 	bl	80100f4 <_Bfree>
 800ec3c:	e5f9      	b.n	800e832 <_strtod_l+0x72>
 800ec3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ec44:	4293      	cmp	r3, r2
 800ec46:	dbbc      	blt.n	800ebc2 <_strtod_l+0x402>
 800ec48:	4c41      	ldr	r4, [pc, #260]	@ (800ed50 <_strtod_l+0x590>)
 800ec4a:	f1c5 050f 	rsb	r5, r5, #15
 800ec4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ec52:	4652      	mov	r2, sl
 800ec54:	465b      	mov	r3, fp
 800ec56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec5a:	f7f1 fd25 	bl	80006a8 <__aeabi_dmul>
 800ec5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec60:	1b5d      	subs	r5, r3, r5
 800ec62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ec66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec6a:	e78f      	b.n	800eb8c <_strtod_l+0x3cc>
 800ec6c:	3316      	adds	r3, #22
 800ec6e:	dba8      	blt.n	800ebc2 <_strtod_l+0x402>
 800ec70:	4b37      	ldr	r3, [pc, #220]	@ (800ed50 <_strtod_l+0x590>)
 800ec72:	eba9 0808 	sub.w	r8, r9, r8
 800ec76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ec7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ec7e:	4650      	mov	r0, sl
 800ec80:	4659      	mov	r1, fp
 800ec82:	f7f1 fe3b 	bl	80008fc <__aeabi_ddiv>
 800ec86:	e783      	b.n	800eb90 <_strtod_l+0x3d0>
 800ec88:	4b32      	ldr	r3, [pc, #200]	@ (800ed54 <_strtod_l+0x594>)
 800ec8a:	9308      	str	r3, [sp, #32]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	1124      	asrs	r4, r4, #4
 800ec90:	4650      	mov	r0, sl
 800ec92:	4659      	mov	r1, fp
 800ec94:	461e      	mov	r6, r3
 800ec96:	2c01      	cmp	r4, #1
 800ec98:	dc21      	bgt.n	800ecde <_strtod_l+0x51e>
 800ec9a:	b10b      	cbz	r3, 800eca0 <_strtod_l+0x4e0>
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	492c      	ldr	r1, [pc, #176]	@ (800ed54 <_strtod_l+0x594>)
 800eca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ecaa:	4652      	mov	r2, sl
 800ecac:	465b      	mov	r3, fp
 800ecae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecb2:	f7f1 fcf9 	bl	80006a8 <__aeabi_dmul>
 800ecb6:	4b28      	ldr	r3, [pc, #160]	@ (800ed58 <_strtod_l+0x598>)
 800ecb8:	460a      	mov	r2, r1
 800ecba:	400b      	ands	r3, r1
 800ecbc:	4927      	ldr	r1, [pc, #156]	@ (800ed5c <_strtod_l+0x59c>)
 800ecbe:	428b      	cmp	r3, r1
 800ecc0:	4682      	mov	sl, r0
 800ecc2:	d898      	bhi.n	800ebf6 <_strtod_l+0x436>
 800ecc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ecc8:	428b      	cmp	r3, r1
 800ecca:	bf86      	itte	hi
 800eccc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ed60 <_strtod_l+0x5a0>
 800ecd0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ecd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9308      	str	r3, [sp, #32]
 800ecdc:	e07a      	b.n	800edd4 <_strtod_l+0x614>
 800ecde:	07e2      	lsls	r2, r4, #31
 800ece0:	d505      	bpl.n	800ecee <_strtod_l+0x52e>
 800ece2:	9b08      	ldr	r3, [sp, #32]
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	f7f1 fcde 	bl	80006a8 <__aeabi_dmul>
 800ecec:	2301      	movs	r3, #1
 800ecee:	9a08      	ldr	r2, [sp, #32]
 800ecf0:	3208      	adds	r2, #8
 800ecf2:	3601      	adds	r6, #1
 800ecf4:	1064      	asrs	r4, r4, #1
 800ecf6:	9208      	str	r2, [sp, #32]
 800ecf8:	e7cd      	b.n	800ec96 <_strtod_l+0x4d6>
 800ecfa:	d0ed      	beq.n	800ecd8 <_strtod_l+0x518>
 800ecfc:	4264      	negs	r4, r4
 800ecfe:	f014 020f 	ands.w	r2, r4, #15
 800ed02:	d00a      	beq.n	800ed1a <_strtod_l+0x55a>
 800ed04:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <_strtod_l+0x590>)
 800ed06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed0a:	4650      	mov	r0, sl
 800ed0c:	4659      	mov	r1, fp
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f7f1 fdf3 	bl	80008fc <__aeabi_ddiv>
 800ed16:	4682      	mov	sl, r0
 800ed18:	468b      	mov	fp, r1
 800ed1a:	1124      	asrs	r4, r4, #4
 800ed1c:	d0dc      	beq.n	800ecd8 <_strtod_l+0x518>
 800ed1e:	2c1f      	cmp	r4, #31
 800ed20:	dd20      	ble.n	800ed64 <_strtod_l+0x5a4>
 800ed22:	2400      	movs	r4, #0
 800ed24:	46a0      	mov	r8, r4
 800ed26:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed28:	46a1      	mov	r9, r4
 800ed2a:	9a05      	ldr	r2, [sp, #20]
 800ed2c:	2322      	movs	r3, #34	@ 0x22
 800ed2e:	f04f 0a00 	mov.w	sl, #0
 800ed32:	f04f 0b00 	mov.w	fp, #0
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	e768      	b.n	800ec0c <_strtod_l+0x44c>
 800ed3a:	bf00      	nop
 800ed3c:	08012aa9 	.word	0x08012aa9
 800ed40:	08012aac 	.word	0x08012aac
 800ed44:	08012aa0 	.word	0x08012aa0
 800ed48:	08012aa3 	.word	0x08012aa3
 800ed4c:	08012e56 	.word	0x08012e56
 800ed50:	08012d20 	.word	0x08012d20
 800ed54:	08012cf8 	.word	0x08012cf8
 800ed58:	7ff00000 	.word	0x7ff00000
 800ed5c:	7ca00000 	.word	0x7ca00000
 800ed60:	7fefffff 	.word	0x7fefffff
 800ed64:	f014 0310 	ands.w	r3, r4, #16
 800ed68:	bf18      	it	ne
 800ed6a:	236a      	movne	r3, #106	@ 0x6a
 800ed6c:	4ea9      	ldr	r6, [pc, #676]	@ (800f014 <_strtod_l+0x854>)
 800ed6e:	9308      	str	r3, [sp, #32]
 800ed70:	4650      	mov	r0, sl
 800ed72:	4659      	mov	r1, fp
 800ed74:	2300      	movs	r3, #0
 800ed76:	07e2      	lsls	r2, r4, #31
 800ed78:	d504      	bpl.n	800ed84 <_strtod_l+0x5c4>
 800ed7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ed7e:	f7f1 fc93 	bl	80006a8 <__aeabi_dmul>
 800ed82:	2301      	movs	r3, #1
 800ed84:	1064      	asrs	r4, r4, #1
 800ed86:	f106 0608 	add.w	r6, r6, #8
 800ed8a:	d1f4      	bne.n	800ed76 <_strtod_l+0x5b6>
 800ed8c:	b10b      	cbz	r3, 800ed92 <_strtod_l+0x5d2>
 800ed8e:	4682      	mov	sl, r0
 800ed90:	468b      	mov	fp, r1
 800ed92:	9b08      	ldr	r3, [sp, #32]
 800ed94:	b1b3      	cbz	r3, 800edc4 <_strtod_l+0x604>
 800ed96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ed9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	4659      	mov	r1, fp
 800eda2:	dd0f      	ble.n	800edc4 <_strtod_l+0x604>
 800eda4:	2b1f      	cmp	r3, #31
 800eda6:	dd55      	ble.n	800ee54 <_strtod_l+0x694>
 800eda8:	2b34      	cmp	r3, #52	@ 0x34
 800edaa:	bfde      	ittt	le
 800edac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800edb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800edb4:	4093      	lslle	r3, r2
 800edb6:	f04f 0a00 	mov.w	sl, #0
 800edba:	bfcc      	ite	gt
 800edbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800edc0:	ea03 0b01 	andle.w	fp, r3, r1
 800edc4:	2200      	movs	r2, #0
 800edc6:	2300      	movs	r3, #0
 800edc8:	4650      	mov	r0, sl
 800edca:	4659      	mov	r1, fp
 800edcc:	f7f1 fed4 	bl	8000b78 <__aeabi_dcmpeq>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d1a6      	bne.n	800ed22 <_strtod_l+0x562>
 800edd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800edda:	9805      	ldr	r0, [sp, #20]
 800eddc:	462b      	mov	r3, r5
 800edde:	463a      	mov	r2, r7
 800ede0:	f001 f9f0 	bl	80101c4 <__s2b>
 800ede4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f43f af05 	beq.w	800ebf6 <_strtod_l+0x436>
 800edec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edee:	2a00      	cmp	r2, #0
 800edf0:	eba9 0308 	sub.w	r3, r9, r8
 800edf4:	bfa8      	it	ge
 800edf6:	2300      	movge	r3, #0
 800edf8:	9312      	str	r3, [sp, #72]	@ 0x48
 800edfa:	2400      	movs	r4, #0
 800edfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee00:	9316      	str	r3, [sp, #88]	@ 0x58
 800ee02:	46a0      	mov	r8, r4
 800ee04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee06:	9805      	ldr	r0, [sp, #20]
 800ee08:	6859      	ldr	r1, [r3, #4]
 800ee0a:	f001 f933 	bl	8010074 <_Balloc>
 800ee0e:	4681      	mov	r9, r0
 800ee10:	2800      	cmp	r0, #0
 800ee12:	f43f aef4 	beq.w	800ebfe <_strtod_l+0x43e>
 800ee16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee18:	691a      	ldr	r2, [r3, #16]
 800ee1a:	3202      	adds	r2, #2
 800ee1c:	f103 010c 	add.w	r1, r3, #12
 800ee20:	0092      	lsls	r2, r2, #2
 800ee22:	300c      	adds	r0, #12
 800ee24:	f000 fcc5 	bl	800f7b2 <memcpy>
 800ee28:	ec4b ab10 	vmov	d0, sl, fp
 800ee2c:	9805      	ldr	r0, [sp, #20]
 800ee2e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee30:	a91b      	add	r1, sp, #108	@ 0x6c
 800ee32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ee36:	f001 fd01 	bl	801083c <__d2b>
 800ee3a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	f43f aede 	beq.w	800ebfe <_strtod_l+0x43e>
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	2101      	movs	r1, #1
 800ee46:	f001 fa53 	bl	80102f0 <__i2b>
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	b948      	cbnz	r0, 800ee62 <_strtod_l+0x6a2>
 800ee4e:	f04f 0800 	mov.w	r8, #0
 800ee52:	e6d4      	b.n	800ebfe <_strtod_l+0x43e>
 800ee54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee58:	fa02 f303 	lsl.w	r3, r2, r3
 800ee5c:	ea03 0a0a 	and.w	sl, r3, sl
 800ee60:	e7b0      	b.n	800edc4 <_strtod_l+0x604>
 800ee62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ee64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ee66:	2d00      	cmp	r5, #0
 800ee68:	bfab      	itete	ge
 800ee6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ee6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ee6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ee70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ee72:	bfac      	ite	ge
 800ee74:	18ef      	addge	r7, r5, r3
 800ee76:	1b5e      	sublt	r6, r3, r5
 800ee78:	9b08      	ldr	r3, [sp, #32]
 800ee7a:	1aed      	subs	r5, r5, r3
 800ee7c:	4415      	add	r5, r2
 800ee7e:	4b66      	ldr	r3, [pc, #408]	@ (800f018 <_strtod_l+0x858>)
 800ee80:	3d01      	subs	r5, #1
 800ee82:	429d      	cmp	r5, r3
 800ee84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ee88:	da50      	bge.n	800ef2c <_strtod_l+0x76c>
 800ee8a:	1b5b      	subs	r3, r3, r5
 800ee8c:	2b1f      	cmp	r3, #31
 800ee8e:	eba2 0203 	sub.w	r2, r2, r3
 800ee92:	f04f 0101 	mov.w	r1, #1
 800ee96:	dc3d      	bgt.n	800ef14 <_strtod_l+0x754>
 800ee98:	fa01 f303 	lsl.w	r3, r1, r3
 800ee9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee9e:	2300      	movs	r3, #0
 800eea0:	9310      	str	r3, [sp, #64]	@ 0x40
 800eea2:	18bd      	adds	r5, r7, r2
 800eea4:	9b08      	ldr	r3, [sp, #32]
 800eea6:	42af      	cmp	r7, r5
 800eea8:	4416      	add	r6, r2
 800eeaa:	441e      	add	r6, r3
 800eeac:	463b      	mov	r3, r7
 800eeae:	bfa8      	it	ge
 800eeb0:	462b      	movge	r3, r5
 800eeb2:	42b3      	cmp	r3, r6
 800eeb4:	bfa8      	it	ge
 800eeb6:	4633      	movge	r3, r6
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	bfc2      	ittt	gt
 800eebc:	1aed      	subgt	r5, r5, r3
 800eebe:	1af6      	subgt	r6, r6, r3
 800eec0:	1aff      	subgt	r7, r7, r3
 800eec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dd16      	ble.n	800eef6 <_strtod_l+0x736>
 800eec8:	4641      	mov	r1, r8
 800eeca:	9805      	ldr	r0, [sp, #20]
 800eecc:	461a      	mov	r2, r3
 800eece:	f001 facf 	bl	8010470 <__pow5mult>
 800eed2:	4680      	mov	r8, r0
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d0ba      	beq.n	800ee4e <_strtod_l+0x68e>
 800eed8:	4601      	mov	r1, r0
 800eeda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eedc:	9805      	ldr	r0, [sp, #20]
 800eede:	f001 fa1d 	bl	801031c <__multiply>
 800eee2:	900e      	str	r0, [sp, #56]	@ 0x38
 800eee4:	2800      	cmp	r0, #0
 800eee6:	f43f ae8a 	beq.w	800ebfe <_strtod_l+0x43e>
 800eeea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeec:	9805      	ldr	r0, [sp, #20]
 800eeee:	f001 f901 	bl	80100f4 <_Bfree>
 800eef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eef4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eef6:	2d00      	cmp	r5, #0
 800eef8:	dc1d      	bgt.n	800ef36 <_strtod_l+0x776>
 800eefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	dd23      	ble.n	800ef48 <_strtod_l+0x788>
 800ef00:	4649      	mov	r1, r9
 800ef02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ef04:	9805      	ldr	r0, [sp, #20]
 800ef06:	f001 fab3 	bl	8010470 <__pow5mult>
 800ef0a:	4681      	mov	r9, r0
 800ef0c:	b9e0      	cbnz	r0, 800ef48 <_strtod_l+0x788>
 800ef0e:	f04f 0900 	mov.w	r9, #0
 800ef12:	e674      	b.n	800ebfe <_strtod_l+0x43e>
 800ef14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ef18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ef1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ef20:	35e2      	adds	r5, #226	@ 0xe2
 800ef22:	fa01 f305 	lsl.w	r3, r1, r5
 800ef26:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef28:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ef2a:	e7ba      	b.n	800eea2 <_strtod_l+0x6e2>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef30:	2301      	movs	r3, #1
 800ef32:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef34:	e7b5      	b.n	800eea2 <_strtod_l+0x6e2>
 800ef36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef38:	9805      	ldr	r0, [sp, #20]
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	f001 faf2 	bl	8010524 <__lshift>
 800ef40:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d1d9      	bne.n	800eefa <_strtod_l+0x73a>
 800ef46:	e65a      	b.n	800ebfe <_strtod_l+0x43e>
 800ef48:	2e00      	cmp	r6, #0
 800ef4a:	dd07      	ble.n	800ef5c <_strtod_l+0x79c>
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	9805      	ldr	r0, [sp, #20]
 800ef50:	4632      	mov	r2, r6
 800ef52:	f001 fae7 	bl	8010524 <__lshift>
 800ef56:	4681      	mov	r9, r0
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d0d8      	beq.n	800ef0e <_strtod_l+0x74e>
 800ef5c:	2f00      	cmp	r7, #0
 800ef5e:	dd08      	ble.n	800ef72 <_strtod_l+0x7b2>
 800ef60:	4641      	mov	r1, r8
 800ef62:	9805      	ldr	r0, [sp, #20]
 800ef64:	463a      	mov	r2, r7
 800ef66:	f001 fadd 	bl	8010524 <__lshift>
 800ef6a:	4680      	mov	r8, r0
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	f43f ae46 	beq.w	800ebfe <_strtod_l+0x43e>
 800ef72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	464a      	mov	r2, r9
 800ef78:	f001 fb5c 	bl	8010634 <__mdiff>
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	f43f ae3d 	beq.w	800ebfe <_strtod_l+0x43e>
 800ef84:	68c3      	ldr	r3, [r0, #12]
 800ef86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60c3      	str	r3, [r0, #12]
 800ef8c:	4641      	mov	r1, r8
 800ef8e:	f001 fb35 	bl	80105fc <__mcmp>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	da46      	bge.n	800f024 <_strtod_l+0x864>
 800ef96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef98:	ea53 030a 	orrs.w	r3, r3, sl
 800ef9c:	d16c      	bne.n	800f078 <_strtod_l+0x8b8>
 800ef9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d168      	bne.n	800f078 <_strtod_l+0x8b8>
 800efa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efaa:	0d1b      	lsrs	r3, r3, #20
 800efac:	051b      	lsls	r3, r3, #20
 800efae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800efb2:	d961      	bls.n	800f078 <_strtod_l+0x8b8>
 800efb4:	6963      	ldr	r3, [r4, #20]
 800efb6:	b913      	cbnz	r3, 800efbe <_strtod_l+0x7fe>
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	dd5c      	ble.n	800f078 <_strtod_l+0x8b8>
 800efbe:	4621      	mov	r1, r4
 800efc0:	2201      	movs	r2, #1
 800efc2:	9805      	ldr	r0, [sp, #20]
 800efc4:	f001 faae 	bl	8010524 <__lshift>
 800efc8:	4641      	mov	r1, r8
 800efca:	4604      	mov	r4, r0
 800efcc:	f001 fb16 	bl	80105fc <__mcmp>
 800efd0:	2800      	cmp	r0, #0
 800efd2:	dd51      	ble.n	800f078 <_strtod_l+0x8b8>
 800efd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efd8:	9a08      	ldr	r2, [sp, #32]
 800efda:	0d1b      	lsrs	r3, r3, #20
 800efdc:	051b      	lsls	r3, r3, #20
 800efde:	2a00      	cmp	r2, #0
 800efe0:	d06b      	beq.n	800f0ba <_strtod_l+0x8fa>
 800efe2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800efe6:	d868      	bhi.n	800f0ba <_strtod_l+0x8fa>
 800efe8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800efec:	f67f ae9d 	bls.w	800ed2a <_strtod_l+0x56a>
 800eff0:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <_strtod_l+0x85c>)
 800eff2:	4650      	mov	r0, sl
 800eff4:	4659      	mov	r1, fp
 800eff6:	2200      	movs	r2, #0
 800eff8:	f7f1 fb56 	bl	80006a8 <__aeabi_dmul>
 800effc:	4b08      	ldr	r3, [pc, #32]	@ (800f020 <_strtod_l+0x860>)
 800effe:	400b      	ands	r3, r1
 800f000:	4682      	mov	sl, r0
 800f002:	468b      	mov	fp, r1
 800f004:	2b00      	cmp	r3, #0
 800f006:	f47f ae05 	bne.w	800ec14 <_strtod_l+0x454>
 800f00a:	9a05      	ldr	r2, [sp, #20]
 800f00c:	2322      	movs	r3, #34	@ 0x22
 800f00e:	6013      	str	r3, [r2, #0]
 800f010:	e600      	b.n	800ec14 <_strtod_l+0x454>
 800f012:	bf00      	nop
 800f014:	08012ad8 	.word	0x08012ad8
 800f018:	fffffc02 	.word	0xfffffc02
 800f01c:	39500000 	.word	0x39500000
 800f020:	7ff00000 	.word	0x7ff00000
 800f024:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f028:	d165      	bne.n	800f0f6 <_strtod_l+0x936>
 800f02a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f02c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f030:	b35a      	cbz	r2, 800f08a <_strtod_l+0x8ca>
 800f032:	4a9f      	ldr	r2, [pc, #636]	@ (800f2b0 <_strtod_l+0xaf0>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d12b      	bne.n	800f090 <_strtod_l+0x8d0>
 800f038:	9b08      	ldr	r3, [sp, #32]
 800f03a:	4651      	mov	r1, sl
 800f03c:	b303      	cbz	r3, 800f080 <_strtod_l+0x8c0>
 800f03e:	4b9d      	ldr	r3, [pc, #628]	@ (800f2b4 <_strtod_l+0xaf4>)
 800f040:	465a      	mov	r2, fp
 800f042:	4013      	ands	r3, r2
 800f044:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f04c:	d81b      	bhi.n	800f086 <_strtod_l+0x8c6>
 800f04e:	0d1b      	lsrs	r3, r3, #20
 800f050:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f054:	fa02 f303 	lsl.w	r3, r2, r3
 800f058:	4299      	cmp	r1, r3
 800f05a:	d119      	bne.n	800f090 <_strtod_l+0x8d0>
 800f05c:	4b96      	ldr	r3, [pc, #600]	@ (800f2b8 <_strtod_l+0xaf8>)
 800f05e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f060:	429a      	cmp	r2, r3
 800f062:	d102      	bne.n	800f06a <_strtod_l+0x8aa>
 800f064:	3101      	adds	r1, #1
 800f066:	f43f adca 	beq.w	800ebfe <_strtod_l+0x43e>
 800f06a:	4b92      	ldr	r3, [pc, #584]	@ (800f2b4 <_strtod_l+0xaf4>)
 800f06c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f06e:	401a      	ands	r2, r3
 800f070:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f074:	f04f 0a00 	mov.w	sl, #0
 800f078:	9b08      	ldr	r3, [sp, #32]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1b8      	bne.n	800eff0 <_strtod_l+0x830>
 800f07e:	e5c9      	b.n	800ec14 <_strtod_l+0x454>
 800f080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f084:	e7e8      	b.n	800f058 <_strtod_l+0x898>
 800f086:	4613      	mov	r3, r2
 800f088:	e7e6      	b.n	800f058 <_strtod_l+0x898>
 800f08a:	ea53 030a 	orrs.w	r3, r3, sl
 800f08e:	d0a1      	beq.n	800efd4 <_strtod_l+0x814>
 800f090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f092:	b1db      	cbz	r3, 800f0cc <_strtod_l+0x90c>
 800f094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f096:	4213      	tst	r3, r2
 800f098:	d0ee      	beq.n	800f078 <_strtod_l+0x8b8>
 800f09a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f09c:	9a08      	ldr	r2, [sp, #32]
 800f09e:	4650      	mov	r0, sl
 800f0a0:	4659      	mov	r1, fp
 800f0a2:	b1bb      	cbz	r3, 800f0d4 <_strtod_l+0x914>
 800f0a4:	f7ff fb6d 	bl	800e782 <sulp>
 800f0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0ac:	ec53 2b10 	vmov	r2, r3, d0
 800f0b0:	f7f1 f944 	bl	800033c <__adddf3>
 800f0b4:	4682      	mov	sl, r0
 800f0b6:	468b      	mov	fp, r1
 800f0b8:	e7de      	b.n	800f078 <_strtod_l+0x8b8>
 800f0ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f0be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f0c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f0c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f0ca:	e7d5      	b.n	800f078 <_strtod_l+0x8b8>
 800f0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f0ce:	ea13 0f0a 	tst.w	r3, sl
 800f0d2:	e7e1      	b.n	800f098 <_strtod_l+0x8d8>
 800f0d4:	f7ff fb55 	bl	800e782 <sulp>
 800f0d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0dc:	ec53 2b10 	vmov	r2, r3, d0
 800f0e0:	f7f1 f92a 	bl	8000338 <__aeabi_dsub>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	4682      	mov	sl, r0
 800f0ea:	468b      	mov	fp, r1
 800f0ec:	f7f1 fd44 	bl	8000b78 <__aeabi_dcmpeq>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d0c1      	beq.n	800f078 <_strtod_l+0x8b8>
 800f0f4:	e619      	b.n	800ed2a <_strtod_l+0x56a>
 800f0f6:	4641      	mov	r1, r8
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f001 fbf7 	bl	80108ec <__ratio>
 800f0fe:	ec57 6b10 	vmov	r6, r7, d0
 800f102:	2200      	movs	r2, #0
 800f104:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f108:	4630      	mov	r0, r6
 800f10a:	4639      	mov	r1, r7
 800f10c:	f7f1 fd48 	bl	8000ba0 <__aeabi_dcmple>
 800f110:	2800      	cmp	r0, #0
 800f112:	d06f      	beq.n	800f1f4 <_strtod_l+0xa34>
 800f114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d17a      	bne.n	800f210 <_strtod_l+0xa50>
 800f11a:	f1ba 0f00 	cmp.w	sl, #0
 800f11e:	d158      	bne.n	800f1d2 <_strtod_l+0xa12>
 800f120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f126:	2b00      	cmp	r3, #0
 800f128:	d15a      	bne.n	800f1e0 <_strtod_l+0xa20>
 800f12a:	4b64      	ldr	r3, [pc, #400]	@ (800f2bc <_strtod_l+0xafc>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	4630      	mov	r0, r6
 800f130:	4639      	mov	r1, r7
 800f132:	f7f1 fd2b 	bl	8000b8c <__aeabi_dcmplt>
 800f136:	2800      	cmp	r0, #0
 800f138:	d159      	bne.n	800f1ee <_strtod_l+0xa2e>
 800f13a:	4630      	mov	r0, r6
 800f13c:	4639      	mov	r1, r7
 800f13e:	4b60      	ldr	r3, [pc, #384]	@ (800f2c0 <_strtod_l+0xb00>)
 800f140:	2200      	movs	r2, #0
 800f142:	f7f1 fab1 	bl	80006a8 <__aeabi_dmul>
 800f146:	4606      	mov	r6, r0
 800f148:	460f      	mov	r7, r1
 800f14a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f14e:	9606      	str	r6, [sp, #24]
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f156:	4d57      	ldr	r5, [pc, #348]	@ (800f2b4 <_strtod_l+0xaf4>)
 800f158:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f15c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f15e:	401d      	ands	r5, r3
 800f160:	4b58      	ldr	r3, [pc, #352]	@ (800f2c4 <_strtod_l+0xb04>)
 800f162:	429d      	cmp	r5, r3
 800f164:	f040 80b2 	bne.w	800f2cc <_strtod_l+0xb0c>
 800f168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f16a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f16e:	ec4b ab10 	vmov	d0, sl, fp
 800f172:	f001 faf3 	bl	801075c <__ulp>
 800f176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f17a:	ec51 0b10 	vmov	r0, r1, d0
 800f17e:	f7f1 fa93 	bl	80006a8 <__aeabi_dmul>
 800f182:	4652      	mov	r2, sl
 800f184:	465b      	mov	r3, fp
 800f186:	f7f1 f8d9 	bl	800033c <__adddf3>
 800f18a:	460b      	mov	r3, r1
 800f18c:	4949      	ldr	r1, [pc, #292]	@ (800f2b4 <_strtod_l+0xaf4>)
 800f18e:	4a4e      	ldr	r2, [pc, #312]	@ (800f2c8 <_strtod_l+0xb08>)
 800f190:	4019      	ands	r1, r3
 800f192:	4291      	cmp	r1, r2
 800f194:	4682      	mov	sl, r0
 800f196:	d942      	bls.n	800f21e <_strtod_l+0xa5e>
 800f198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f19a:	4b47      	ldr	r3, [pc, #284]	@ (800f2b8 <_strtod_l+0xaf8>)
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d103      	bne.n	800f1a8 <_strtod_l+0x9e8>
 800f1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	f43f ad2b 	beq.w	800ebfe <_strtod_l+0x43e>
 800f1a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f2b8 <_strtod_l+0xaf8>
 800f1ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f1b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1b2:	9805      	ldr	r0, [sp, #20]
 800f1b4:	f000 ff9e 	bl	80100f4 <_Bfree>
 800f1b8:	9805      	ldr	r0, [sp, #20]
 800f1ba:	4649      	mov	r1, r9
 800f1bc:	f000 ff9a 	bl	80100f4 <_Bfree>
 800f1c0:	9805      	ldr	r0, [sp, #20]
 800f1c2:	4641      	mov	r1, r8
 800f1c4:	f000 ff96 	bl	80100f4 <_Bfree>
 800f1c8:	9805      	ldr	r0, [sp, #20]
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	f000 ff92 	bl	80100f4 <_Bfree>
 800f1d0:	e618      	b.n	800ee04 <_strtod_l+0x644>
 800f1d2:	f1ba 0f01 	cmp.w	sl, #1
 800f1d6:	d103      	bne.n	800f1e0 <_strtod_l+0xa20>
 800f1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f43f ada5 	beq.w	800ed2a <_strtod_l+0x56a>
 800f1e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f290 <_strtod_l+0xad0>
 800f1e4:	4f35      	ldr	r7, [pc, #212]	@ (800f2bc <_strtod_l+0xafc>)
 800f1e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1ea:	2600      	movs	r6, #0
 800f1ec:	e7b1      	b.n	800f152 <_strtod_l+0x992>
 800f1ee:	4f34      	ldr	r7, [pc, #208]	@ (800f2c0 <_strtod_l+0xb00>)
 800f1f0:	2600      	movs	r6, #0
 800f1f2:	e7aa      	b.n	800f14a <_strtod_l+0x98a>
 800f1f4:	4b32      	ldr	r3, [pc, #200]	@ (800f2c0 <_strtod_l+0xb00>)
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f7f1 fa54 	bl	80006a8 <__aeabi_dmul>
 800f200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f202:	4606      	mov	r6, r0
 800f204:	460f      	mov	r7, r1
 800f206:	2b00      	cmp	r3, #0
 800f208:	d09f      	beq.n	800f14a <_strtod_l+0x98a>
 800f20a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f20e:	e7a0      	b.n	800f152 <_strtod_l+0x992>
 800f210:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f298 <_strtod_l+0xad8>
 800f214:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f218:	ec57 6b17 	vmov	r6, r7, d7
 800f21c:	e799      	b.n	800f152 <_strtod_l+0x992>
 800f21e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f222:	9b08      	ldr	r3, [sp, #32]
 800f224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1c1      	bne.n	800f1b0 <_strtod_l+0x9f0>
 800f22c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f230:	0d1b      	lsrs	r3, r3, #20
 800f232:	051b      	lsls	r3, r3, #20
 800f234:	429d      	cmp	r5, r3
 800f236:	d1bb      	bne.n	800f1b0 <_strtod_l+0x9f0>
 800f238:	4630      	mov	r0, r6
 800f23a:	4639      	mov	r1, r7
 800f23c:	f7f1 fd94 	bl	8000d68 <__aeabi_d2lz>
 800f240:	f7f1 fa04 	bl	800064c <__aeabi_l2d>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4630      	mov	r0, r6
 800f24a:	4639      	mov	r1, r7
 800f24c:	f7f1 f874 	bl	8000338 <__aeabi_dsub>
 800f250:	460b      	mov	r3, r1
 800f252:	4602      	mov	r2, r0
 800f254:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f258:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f25e:	ea46 060a 	orr.w	r6, r6, sl
 800f262:	431e      	orrs	r6, r3
 800f264:	d06f      	beq.n	800f346 <_strtod_l+0xb86>
 800f266:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2a0 <_strtod_l+0xae0>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	f7f1 fc8e 	bl	8000b8c <__aeabi_dcmplt>
 800f270:	2800      	cmp	r0, #0
 800f272:	f47f accf 	bne.w	800ec14 <_strtod_l+0x454>
 800f276:	a30c      	add	r3, pc, #48	@ (adr r3, 800f2a8 <_strtod_l+0xae8>)
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f280:	f7f1 fca2 	bl	8000bc8 <__aeabi_dcmpgt>
 800f284:	2800      	cmp	r0, #0
 800f286:	d093      	beq.n	800f1b0 <_strtod_l+0x9f0>
 800f288:	e4c4      	b.n	800ec14 <_strtod_l+0x454>
 800f28a:	bf00      	nop
 800f28c:	f3af 8000 	nop.w
 800f290:	00000000 	.word	0x00000000
 800f294:	bff00000 	.word	0xbff00000
 800f298:	00000000 	.word	0x00000000
 800f29c:	3ff00000 	.word	0x3ff00000
 800f2a0:	94a03595 	.word	0x94a03595
 800f2a4:	3fdfffff 	.word	0x3fdfffff
 800f2a8:	35afe535 	.word	0x35afe535
 800f2ac:	3fe00000 	.word	0x3fe00000
 800f2b0:	000fffff 	.word	0x000fffff
 800f2b4:	7ff00000 	.word	0x7ff00000
 800f2b8:	7fefffff 	.word	0x7fefffff
 800f2bc:	3ff00000 	.word	0x3ff00000
 800f2c0:	3fe00000 	.word	0x3fe00000
 800f2c4:	7fe00000 	.word	0x7fe00000
 800f2c8:	7c9fffff 	.word	0x7c9fffff
 800f2cc:	9b08      	ldr	r3, [sp, #32]
 800f2ce:	b323      	cbz	r3, 800f31a <_strtod_l+0xb5a>
 800f2d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f2d4:	d821      	bhi.n	800f31a <_strtod_l+0xb5a>
 800f2d6:	a328      	add	r3, pc, #160	@ (adr r3, 800f378 <_strtod_l+0xbb8>)
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	4630      	mov	r0, r6
 800f2de:	4639      	mov	r1, r7
 800f2e0:	f7f1 fc5e 	bl	8000ba0 <__aeabi_dcmple>
 800f2e4:	b1a0      	cbz	r0, 800f310 <_strtod_l+0xb50>
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f7f1 fcb5 	bl	8000c58 <__aeabi_d2uiz>
 800f2ee:	2801      	cmp	r0, #1
 800f2f0:	bf38      	it	cc
 800f2f2:	2001      	movcc	r0, #1
 800f2f4:	f7f1 f95e 	bl	80005b4 <__aeabi_ui2d>
 800f2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	460f      	mov	r7, r1
 800f2fe:	b9fb      	cbnz	r3, 800f340 <_strtod_l+0xb80>
 800f300:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f304:	9014      	str	r0, [sp, #80]	@ 0x50
 800f306:	9315      	str	r3, [sp, #84]	@ 0x54
 800f308:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f30c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f310:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f312:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f316:	1b5b      	subs	r3, r3, r5
 800f318:	9311      	str	r3, [sp, #68]	@ 0x44
 800f31a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f31e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f322:	f001 fa1b 	bl	801075c <__ulp>
 800f326:	4650      	mov	r0, sl
 800f328:	ec53 2b10 	vmov	r2, r3, d0
 800f32c:	4659      	mov	r1, fp
 800f32e:	f7f1 f9bb 	bl	80006a8 <__aeabi_dmul>
 800f332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f336:	f7f1 f801 	bl	800033c <__adddf3>
 800f33a:	4682      	mov	sl, r0
 800f33c:	468b      	mov	fp, r1
 800f33e:	e770      	b.n	800f222 <_strtod_l+0xa62>
 800f340:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f344:	e7e0      	b.n	800f308 <_strtod_l+0xb48>
 800f346:	a30e      	add	r3, pc, #56	@ (adr r3, 800f380 <_strtod_l+0xbc0>)
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	f7f1 fc1e 	bl	8000b8c <__aeabi_dcmplt>
 800f350:	e798      	b.n	800f284 <_strtod_l+0xac4>
 800f352:	2300      	movs	r3, #0
 800f354:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f356:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	f7ff ba6d 	b.w	800e83a <_strtod_l+0x7a>
 800f360:	2a65      	cmp	r2, #101	@ 0x65
 800f362:	f43f ab66 	beq.w	800ea32 <_strtod_l+0x272>
 800f366:	2a45      	cmp	r2, #69	@ 0x45
 800f368:	f43f ab63 	beq.w	800ea32 <_strtod_l+0x272>
 800f36c:	2301      	movs	r3, #1
 800f36e:	f7ff bb9e 	b.w	800eaae <_strtod_l+0x2ee>
 800f372:	bf00      	nop
 800f374:	f3af 8000 	nop.w
 800f378:	ffc00000 	.word	0xffc00000
 800f37c:	41dfffff 	.word	0x41dfffff
 800f380:	94a03595 	.word	0x94a03595
 800f384:	3fcfffff 	.word	0x3fcfffff

0800f388 <strtof>:
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800f44c <strtof+0xc4>
 800f390:	4b29      	ldr	r3, [pc, #164]	@ (800f438 <strtof+0xb0>)
 800f392:	460a      	mov	r2, r1
 800f394:	ed2d 8b02 	vpush	{d8}
 800f398:	4601      	mov	r1, r0
 800f39a:	f8d8 0000 	ldr.w	r0, [r8]
 800f39e:	f7ff fa0f 	bl	800e7c0 <_strtod_l>
 800f3a2:	ec55 4b10 	vmov	r4, r5, d0
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	462b      	mov	r3, r5
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	f7f1 fc15 	bl	8000bdc <__aeabi_dcmpun>
 800f3b2:	b190      	cbz	r0, 800f3da <strtof+0x52>
 800f3b4:	2d00      	cmp	r5, #0
 800f3b6:	4821      	ldr	r0, [pc, #132]	@ (800f43c <strtof+0xb4>)
 800f3b8:	da09      	bge.n	800f3ce <strtof+0x46>
 800f3ba:	f000 fa11 	bl	800f7e0 <nanf>
 800f3be:	eeb1 8a40 	vneg.f32	s16, s0
 800f3c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f3c6:	ecbd 8b02 	vpop	{d8}
 800f3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ce:	ecbd 8b02 	vpop	{d8}
 800f3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d6:	f000 ba03 	b.w	800f7e0 <nanf>
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7f1 fc5b 	bl	8000c98 <__aeabi_d2f>
 800f3e2:	ee08 0a10 	vmov	s16, r0
 800f3e6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800f440 <strtof+0xb8>
 800f3ea:	eeb0 7ac8 	vabs.f32	s14, s16
 800f3ee:	eeb4 7a67 	vcmp.f32	s14, s15
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	dd11      	ble.n	800f41c <strtof+0x94>
 800f3f8:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800f3fc:	4b11      	ldr	r3, [pc, #68]	@ (800f444 <strtof+0xbc>)
 800f3fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f402:	4620      	mov	r0, r4
 800f404:	4639      	mov	r1, r7
 800f406:	f7f1 fbe9 	bl	8000bdc <__aeabi_dcmpun>
 800f40a:	b980      	cbnz	r0, 800f42e <strtof+0xa6>
 800f40c:	4b0d      	ldr	r3, [pc, #52]	@ (800f444 <strtof+0xbc>)
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f412:	4620      	mov	r0, r4
 800f414:	4639      	mov	r1, r7
 800f416:	f7f1 fbc3 	bl	8000ba0 <__aeabi_dcmple>
 800f41a:	b940      	cbnz	r0, 800f42e <strtof+0xa6>
 800f41c:	ee18 3a10 	vmov	r3, s16
 800f420:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f424:	d1cd      	bne.n	800f3c2 <strtof+0x3a>
 800f426:	4b08      	ldr	r3, [pc, #32]	@ (800f448 <strtof+0xc0>)
 800f428:	402b      	ands	r3, r5
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0c9      	beq.n	800f3c2 <strtof+0x3a>
 800f42e:	f8d8 3000 	ldr.w	r3, [r8]
 800f432:	2222      	movs	r2, #34	@ 0x22
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	e7c4      	b.n	800f3c2 <strtof+0x3a>
 800f438:	200000e8 	.word	0x200000e8
 800f43c:	08012e56 	.word	0x08012e56
 800f440:	7f7fffff 	.word	0x7f7fffff
 800f444:	7fefffff 	.word	0x7fefffff
 800f448:	7ff00000 	.word	0x7ff00000
 800f44c:	20000254 	.word	0x20000254

0800f450 <std>:
 800f450:	2300      	movs	r3, #0
 800f452:	b510      	push	{r4, lr}
 800f454:	4604      	mov	r4, r0
 800f456:	e9c0 3300 	strd	r3, r3, [r0]
 800f45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f45e:	6083      	str	r3, [r0, #8]
 800f460:	8181      	strh	r1, [r0, #12]
 800f462:	6643      	str	r3, [r0, #100]	@ 0x64
 800f464:	81c2      	strh	r2, [r0, #14]
 800f466:	6183      	str	r3, [r0, #24]
 800f468:	4619      	mov	r1, r3
 800f46a:	2208      	movs	r2, #8
 800f46c:	305c      	adds	r0, #92	@ 0x5c
 800f46e:	f000 f924 	bl	800f6ba <memset>
 800f472:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a8 <std+0x58>)
 800f474:	6263      	str	r3, [r4, #36]	@ 0x24
 800f476:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <std+0x5c>)
 800f478:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f47a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b0 <std+0x60>)
 800f47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f47e:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b4 <std+0x64>)
 800f480:	6323      	str	r3, [r4, #48]	@ 0x30
 800f482:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b8 <std+0x68>)
 800f484:	6224      	str	r4, [r4, #32]
 800f486:	429c      	cmp	r4, r3
 800f488:	d006      	beq.n	800f498 <std+0x48>
 800f48a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f48e:	4294      	cmp	r4, r2
 800f490:	d002      	beq.n	800f498 <std+0x48>
 800f492:	33d0      	adds	r3, #208	@ 0xd0
 800f494:	429c      	cmp	r4, r3
 800f496:	d105      	bne.n	800f4a4 <std+0x54>
 800f498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a0:	f000 b984 	b.w	800f7ac <__retarget_lock_init_recursive>
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0800f615 	.word	0x0800f615
 800f4ac:	0800f637 	.word	0x0800f637
 800f4b0:	0800f66f 	.word	0x0800f66f
 800f4b4:	0800f693 	.word	0x0800f693
 800f4b8:	2001c004 	.word	0x2001c004

0800f4bc <stdio_exit_handler>:
 800f4bc:	4a02      	ldr	r2, [pc, #8]	@ (800f4c8 <stdio_exit_handler+0xc>)
 800f4be:	4903      	ldr	r1, [pc, #12]	@ (800f4cc <stdio_exit_handler+0x10>)
 800f4c0:	4803      	ldr	r0, [pc, #12]	@ (800f4d0 <stdio_exit_handler+0x14>)
 800f4c2:	f000 b869 	b.w	800f598 <_fwalk_sglue>
 800f4c6:	bf00      	nop
 800f4c8:	200000dc 	.word	0x200000dc
 800f4cc:	080110c5 	.word	0x080110c5
 800f4d0:	20000258 	.word	0x20000258

0800f4d4 <cleanup_stdio>:
 800f4d4:	6841      	ldr	r1, [r0, #4]
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f508 <cleanup_stdio+0x34>)
 800f4d8:	4299      	cmp	r1, r3
 800f4da:	b510      	push	{r4, lr}
 800f4dc:	4604      	mov	r4, r0
 800f4de:	d001      	beq.n	800f4e4 <cleanup_stdio+0x10>
 800f4e0:	f001 fdf0 	bl	80110c4 <_fflush_r>
 800f4e4:	68a1      	ldr	r1, [r4, #8]
 800f4e6:	4b09      	ldr	r3, [pc, #36]	@ (800f50c <cleanup_stdio+0x38>)
 800f4e8:	4299      	cmp	r1, r3
 800f4ea:	d002      	beq.n	800f4f2 <cleanup_stdio+0x1e>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f001 fde9 	bl	80110c4 <_fflush_r>
 800f4f2:	68e1      	ldr	r1, [r4, #12]
 800f4f4:	4b06      	ldr	r3, [pc, #24]	@ (800f510 <cleanup_stdio+0x3c>)
 800f4f6:	4299      	cmp	r1, r3
 800f4f8:	d004      	beq.n	800f504 <cleanup_stdio+0x30>
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f500:	f001 bde0 	b.w	80110c4 <_fflush_r>
 800f504:	bd10      	pop	{r4, pc}
 800f506:	bf00      	nop
 800f508:	2001c004 	.word	0x2001c004
 800f50c:	2001c06c 	.word	0x2001c06c
 800f510:	2001c0d4 	.word	0x2001c0d4

0800f514 <global_stdio_init.part.0>:
 800f514:	b510      	push	{r4, lr}
 800f516:	4b0b      	ldr	r3, [pc, #44]	@ (800f544 <global_stdio_init.part.0+0x30>)
 800f518:	4c0b      	ldr	r4, [pc, #44]	@ (800f548 <global_stdio_init.part.0+0x34>)
 800f51a:	4a0c      	ldr	r2, [pc, #48]	@ (800f54c <global_stdio_init.part.0+0x38>)
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	4620      	mov	r0, r4
 800f520:	2200      	movs	r2, #0
 800f522:	2104      	movs	r1, #4
 800f524:	f7ff ff94 	bl	800f450 <std>
 800f528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f52c:	2201      	movs	r2, #1
 800f52e:	2109      	movs	r1, #9
 800f530:	f7ff ff8e 	bl	800f450 <std>
 800f534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f538:	2202      	movs	r2, #2
 800f53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53e:	2112      	movs	r1, #18
 800f540:	f7ff bf86 	b.w	800f450 <std>
 800f544:	2001c13c 	.word	0x2001c13c
 800f548:	2001c004 	.word	0x2001c004
 800f54c:	0800f4bd 	.word	0x0800f4bd

0800f550 <__sfp_lock_acquire>:
 800f550:	4801      	ldr	r0, [pc, #4]	@ (800f558 <__sfp_lock_acquire+0x8>)
 800f552:	f000 b92c 	b.w	800f7ae <__retarget_lock_acquire_recursive>
 800f556:	bf00      	nop
 800f558:	2001c145 	.word	0x2001c145

0800f55c <__sfp_lock_release>:
 800f55c:	4801      	ldr	r0, [pc, #4]	@ (800f564 <__sfp_lock_release+0x8>)
 800f55e:	f000 b927 	b.w	800f7b0 <__retarget_lock_release_recursive>
 800f562:	bf00      	nop
 800f564:	2001c145 	.word	0x2001c145

0800f568 <__sinit>:
 800f568:	b510      	push	{r4, lr}
 800f56a:	4604      	mov	r4, r0
 800f56c:	f7ff fff0 	bl	800f550 <__sfp_lock_acquire>
 800f570:	6a23      	ldr	r3, [r4, #32]
 800f572:	b11b      	cbz	r3, 800f57c <__sinit+0x14>
 800f574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f578:	f7ff bff0 	b.w	800f55c <__sfp_lock_release>
 800f57c:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <__sinit+0x28>)
 800f57e:	6223      	str	r3, [r4, #32]
 800f580:	4b04      	ldr	r3, [pc, #16]	@ (800f594 <__sinit+0x2c>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1f5      	bne.n	800f574 <__sinit+0xc>
 800f588:	f7ff ffc4 	bl	800f514 <global_stdio_init.part.0>
 800f58c:	e7f2      	b.n	800f574 <__sinit+0xc>
 800f58e:	bf00      	nop
 800f590:	0800f4d5 	.word	0x0800f4d5
 800f594:	2001c13c 	.word	0x2001c13c

0800f598 <_fwalk_sglue>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4607      	mov	r7, r0
 800f59e:	4688      	mov	r8, r1
 800f5a0:	4614      	mov	r4, r2
 800f5a2:	2600      	movs	r6, #0
 800f5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f5ac:	d505      	bpl.n	800f5ba <_fwalk_sglue+0x22>
 800f5ae:	6824      	ldr	r4, [r4, #0]
 800f5b0:	2c00      	cmp	r4, #0
 800f5b2:	d1f7      	bne.n	800f5a4 <_fwalk_sglue+0xc>
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d907      	bls.n	800f5d0 <_fwalk_sglue+0x38>
 800f5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	d003      	beq.n	800f5d0 <_fwalk_sglue+0x38>
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	47c0      	blx	r8
 800f5ce:	4306      	orrs	r6, r0
 800f5d0:	3568      	adds	r5, #104	@ 0x68
 800f5d2:	e7e9      	b.n	800f5a8 <_fwalk_sglue+0x10>

0800f5d4 <siprintf>:
 800f5d4:	b40e      	push	{r1, r2, r3}
 800f5d6:	b500      	push	{lr}
 800f5d8:	b09c      	sub	sp, #112	@ 0x70
 800f5da:	ab1d      	add	r3, sp, #116	@ 0x74
 800f5dc:	9002      	str	r0, [sp, #8]
 800f5de:	9006      	str	r0, [sp, #24]
 800f5e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5e4:	4809      	ldr	r0, [pc, #36]	@ (800f60c <siprintf+0x38>)
 800f5e6:	9107      	str	r1, [sp, #28]
 800f5e8:	9104      	str	r1, [sp, #16]
 800f5ea:	4909      	ldr	r1, [pc, #36]	@ (800f610 <siprintf+0x3c>)
 800f5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5f0:	9105      	str	r1, [sp, #20]
 800f5f2:	6800      	ldr	r0, [r0, #0]
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	a902      	add	r1, sp, #8
 800f5f8:	f001 fa56 	bl	8010aa8 <_svfiprintf_r>
 800f5fc:	9b02      	ldr	r3, [sp, #8]
 800f5fe:	2200      	movs	r2, #0
 800f600:	701a      	strb	r2, [r3, #0]
 800f602:	b01c      	add	sp, #112	@ 0x70
 800f604:	f85d eb04 	ldr.w	lr, [sp], #4
 800f608:	b003      	add	sp, #12
 800f60a:	4770      	bx	lr
 800f60c:	20000254 	.word	0x20000254
 800f610:	ffff0208 	.word	0xffff0208

0800f614 <__sread>:
 800f614:	b510      	push	{r4, lr}
 800f616:	460c      	mov	r4, r1
 800f618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61c:	f000 f88a 	bl	800f734 <_read_r>
 800f620:	2800      	cmp	r0, #0
 800f622:	bfab      	itete	ge
 800f624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f626:	89a3      	ldrhlt	r3, [r4, #12]
 800f628:	181b      	addge	r3, r3, r0
 800f62a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f62e:	bfac      	ite	ge
 800f630:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f632:	81a3      	strhlt	r3, [r4, #12]
 800f634:	bd10      	pop	{r4, pc}

0800f636 <__swrite>:
 800f636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f63a:	461f      	mov	r7, r3
 800f63c:	898b      	ldrh	r3, [r1, #12]
 800f63e:	05db      	lsls	r3, r3, #23
 800f640:	4605      	mov	r5, r0
 800f642:	460c      	mov	r4, r1
 800f644:	4616      	mov	r6, r2
 800f646:	d505      	bpl.n	800f654 <__swrite+0x1e>
 800f648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f64c:	2302      	movs	r3, #2
 800f64e:	2200      	movs	r2, #0
 800f650:	f000 f85e 	bl	800f710 <_lseek_r>
 800f654:	89a3      	ldrh	r3, [r4, #12]
 800f656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f65a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f65e:	81a3      	strh	r3, [r4, #12]
 800f660:	4632      	mov	r2, r6
 800f662:	463b      	mov	r3, r7
 800f664:	4628      	mov	r0, r5
 800f666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f66a:	f7ff b879 	b.w	800e760 <_write_r>

0800f66e <__sseek>:
 800f66e:	b510      	push	{r4, lr}
 800f670:	460c      	mov	r4, r1
 800f672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f676:	f000 f84b 	bl	800f710 <_lseek_r>
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	bf15      	itete	ne
 800f680:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f68a:	81a3      	strheq	r3, [r4, #12]
 800f68c:	bf18      	it	ne
 800f68e:	81a3      	strhne	r3, [r4, #12]
 800f690:	bd10      	pop	{r4, pc}

0800f692 <__sclose>:
 800f692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f696:	f000 b82b 	b.w	800f6f0 <_close_r>

0800f69a <memcmp>:
 800f69a:	b510      	push	{r4, lr}
 800f69c:	3901      	subs	r1, #1
 800f69e:	4402      	add	r2, r0
 800f6a0:	4290      	cmp	r0, r2
 800f6a2:	d101      	bne.n	800f6a8 <memcmp+0xe>
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e005      	b.n	800f6b4 <memcmp+0x1a>
 800f6a8:	7803      	ldrb	r3, [r0, #0]
 800f6aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6ae:	42a3      	cmp	r3, r4
 800f6b0:	d001      	beq.n	800f6b6 <memcmp+0x1c>
 800f6b2:	1b18      	subs	r0, r3, r4
 800f6b4:	bd10      	pop	{r4, pc}
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	e7f2      	b.n	800f6a0 <memcmp+0x6>

0800f6ba <memset>:
 800f6ba:	4402      	add	r2, r0
 800f6bc:	4603      	mov	r3, r0
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d100      	bne.n	800f6c4 <memset+0xa>
 800f6c2:	4770      	bx	lr
 800f6c4:	f803 1b01 	strb.w	r1, [r3], #1
 800f6c8:	e7f9      	b.n	800f6be <memset+0x4>

0800f6ca <strncmp>:
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	b16a      	cbz	r2, 800f6ea <strncmp+0x20>
 800f6ce:	3901      	subs	r1, #1
 800f6d0:	1884      	adds	r4, r0, r2
 800f6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d103      	bne.n	800f6e6 <strncmp+0x1c>
 800f6de:	42a0      	cmp	r0, r4
 800f6e0:	d001      	beq.n	800f6e6 <strncmp+0x1c>
 800f6e2:	2a00      	cmp	r2, #0
 800f6e4:	d1f5      	bne.n	800f6d2 <strncmp+0x8>
 800f6e6:	1ad0      	subs	r0, r2, r3
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	e7fc      	b.n	800f6e8 <strncmp+0x1e>
	...

0800f6f0 <_close_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d06      	ldr	r5, [pc, #24]	@ (800f70c <_close_r+0x1c>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	f7f4 ff56 	bl	80045ac <_close>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_close_r+0x1a>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_close_r+0x1a>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	2001c140 	.word	0x2001c140

0800f710 <_lseek_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d07      	ldr	r5, [pc, #28]	@ (800f730 <_lseek_r+0x20>)
 800f714:	4604      	mov	r4, r0
 800f716:	4608      	mov	r0, r1
 800f718:	4611      	mov	r1, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	602a      	str	r2, [r5, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	f7f4 ff6b 	bl	80045fa <_lseek>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_lseek_r+0x1e>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_lseek_r+0x1e>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	2001c140 	.word	0x2001c140

0800f734 <_read_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	@ (800f754 <_read_r+0x20>)
 800f738:	4604      	mov	r4, r0
 800f73a:	4608      	mov	r0, r1
 800f73c:	4611      	mov	r1, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	602a      	str	r2, [r5, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	f7f4 ff15 	bl	8004572 <_read>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_read_r+0x1e>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_read_r+0x1e>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	2001c140 	.word	0x2001c140

0800f758 <__errno>:
 800f758:	4b01      	ldr	r3, [pc, #4]	@ (800f760 <__errno+0x8>)
 800f75a:	6818      	ldr	r0, [r3, #0]
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	20000254 	.word	0x20000254

0800f764 <__libc_init_array>:
 800f764:	b570      	push	{r4, r5, r6, lr}
 800f766:	4d0d      	ldr	r5, [pc, #52]	@ (800f79c <__libc_init_array+0x38>)
 800f768:	4c0d      	ldr	r4, [pc, #52]	@ (800f7a0 <__libc_init_array+0x3c>)
 800f76a:	1b64      	subs	r4, r4, r5
 800f76c:	10a4      	asrs	r4, r4, #2
 800f76e:	2600      	movs	r6, #0
 800f770:	42a6      	cmp	r6, r4
 800f772:	d109      	bne.n	800f788 <__libc_init_array+0x24>
 800f774:	4d0b      	ldr	r5, [pc, #44]	@ (800f7a4 <__libc_init_array+0x40>)
 800f776:	4c0c      	ldr	r4, [pc, #48]	@ (800f7a8 <__libc_init_array+0x44>)
 800f778:	f002 f922 	bl	80119c0 <_init>
 800f77c:	1b64      	subs	r4, r4, r5
 800f77e:	10a4      	asrs	r4, r4, #2
 800f780:	2600      	movs	r6, #0
 800f782:	42a6      	cmp	r6, r4
 800f784:	d105      	bne.n	800f792 <__libc_init_array+0x2e>
 800f786:	bd70      	pop	{r4, r5, r6, pc}
 800f788:	f855 3b04 	ldr.w	r3, [r5], #4
 800f78c:	4798      	blx	r3
 800f78e:	3601      	adds	r6, #1
 800f790:	e7ee      	b.n	800f770 <__libc_init_array+0xc>
 800f792:	f855 3b04 	ldr.w	r3, [r5], #4
 800f796:	4798      	blx	r3
 800f798:	3601      	adds	r6, #1
 800f79a:	e7f2      	b.n	800f782 <__libc_init_array+0x1e>
 800f79c:	08012e60 	.word	0x08012e60
 800f7a0:	08012e60 	.word	0x08012e60
 800f7a4:	08012e60 	.word	0x08012e60
 800f7a8:	08012e64 	.word	0x08012e64

0800f7ac <__retarget_lock_init_recursive>:
 800f7ac:	4770      	bx	lr

0800f7ae <__retarget_lock_acquire_recursive>:
 800f7ae:	4770      	bx	lr

0800f7b0 <__retarget_lock_release_recursive>:
 800f7b0:	4770      	bx	lr

0800f7b2 <memcpy>:
 800f7b2:	440a      	add	r2, r1
 800f7b4:	4291      	cmp	r1, r2
 800f7b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f7ba:	d100      	bne.n	800f7be <memcpy+0xc>
 800f7bc:	4770      	bx	lr
 800f7be:	b510      	push	{r4, lr}
 800f7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7c8:	4291      	cmp	r1, r2
 800f7ca:	d1f9      	bne.n	800f7c0 <memcpy+0xe>
 800f7cc:	bd10      	pop	{r4, pc}
	...

0800f7d0 <nan>:
 800f7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f7d8 <nan+0x8>
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	00000000 	.word	0x00000000
 800f7dc:	7ff80000 	.word	0x7ff80000

0800f7e0 <nanf>:
 800f7e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f7e8 <nanf+0x8>
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	7fc00000 	.word	0x7fc00000

0800f7ec <_free_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	2900      	cmp	r1, #0
 800f7f2:	d041      	beq.n	800f878 <_free_r+0x8c>
 800f7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7f8:	1f0c      	subs	r4, r1, #4
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	bfb8      	it	lt
 800f7fe:	18e4      	addlt	r4, r4, r3
 800f800:	f000 fc2c 	bl	801005c <__malloc_lock>
 800f804:	4a1d      	ldr	r2, [pc, #116]	@ (800f87c <_free_r+0x90>)
 800f806:	6813      	ldr	r3, [r2, #0]
 800f808:	b933      	cbnz	r3, 800f818 <_free_r+0x2c>
 800f80a:	6063      	str	r3, [r4, #4]
 800f80c:	6014      	str	r4, [r2, #0]
 800f80e:	4628      	mov	r0, r5
 800f810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f814:	f000 bc28 	b.w	8010068 <__malloc_unlock>
 800f818:	42a3      	cmp	r3, r4
 800f81a:	d908      	bls.n	800f82e <_free_r+0x42>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	1821      	adds	r1, r4, r0
 800f820:	428b      	cmp	r3, r1
 800f822:	bf01      	itttt	eq
 800f824:	6819      	ldreq	r1, [r3, #0]
 800f826:	685b      	ldreq	r3, [r3, #4]
 800f828:	1809      	addeq	r1, r1, r0
 800f82a:	6021      	streq	r1, [r4, #0]
 800f82c:	e7ed      	b.n	800f80a <_free_r+0x1e>
 800f82e:	461a      	mov	r2, r3
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	b10b      	cbz	r3, 800f838 <_free_r+0x4c>
 800f834:	42a3      	cmp	r3, r4
 800f836:	d9fa      	bls.n	800f82e <_free_r+0x42>
 800f838:	6811      	ldr	r1, [r2, #0]
 800f83a:	1850      	adds	r0, r2, r1
 800f83c:	42a0      	cmp	r0, r4
 800f83e:	d10b      	bne.n	800f858 <_free_r+0x6c>
 800f840:	6820      	ldr	r0, [r4, #0]
 800f842:	4401      	add	r1, r0
 800f844:	1850      	adds	r0, r2, r1
 800f846:	4283      	cmp	r3, r0
 800f848:	6011      	str	r1, [r2, #0]
 800f84a:	d1e0      	bne.n	800f80e <_free_r+0x22>
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	6053      	str	r3, [r2, #4]
 800f852:	4408      	add	r0, r1
 800f854:	6010      	str	r0, [r2, #0]
 800f856:	e7da      	b.n	800f80e <_free_r+0x22>
 800f858:	d902      	bls.n	800f860 <_free_r+0x74>
 800f85a:	230c      	movs	r3, #12
 800f85c:	602b      	str	r3, [r5, #0]
 800f85e:	e7d6      	b.n	800f80e <_free_r+0x22>
 800f860:	6820      	ldr	r0, [r4, #0]
 800f862:	1821      	adds	r1, r4, r0
 800f864:	428b      	cmp	r3, r1
 800f866:	bf04      	itt	eq
 800f868:	6819      	ldreq	r1, [r3, #0]
 800f86a:	685b      	ldreq	r3, [r3, #4]
 800f86c:	6063      	str	r3, [r4, #4]
 800f86e:	bf04      	itt	eq
 800f870:	1809      	addeq	r1, r1, r0
 800f872:	6021      	streq	r1, [r4, #0]
 800f874:	6054      	str	r4, [r2, #4]
 800f876:	e7ca      	b.n	800f80e <_free_r+0x22>
 800f878:	bd38      	pop	{r3, r4, r5, pc}
 800f87a:	bf00      	nop
 800f87c:	2001c14c 	.word	0x2001c14c

0800f880 <rshift>:
 800f880:	6903      	ldr	r3, [r0, #16]
 800f882:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f88a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f88e:	f100 0414 	add.w	r4, r0, #20
 800f892:	dd45      	ble.n	800f920 <rshift+0xa0>
 800f894:	f011 011f 	ands.w	r1, r1, #31
 800f898:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f89c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8a0:	d10c      	bne.n	800f8bc <rshift+0x3c>
 800f8a2:	f100 0710 	add.w	r7, r0, #16
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	42b1      	cmp	r1, r6
 800f8aa:	d334      	bcc.n	800f916 <rshift+0x96>
 800f8ac:	1a9b      	subs	r3, r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	1eea      	subs	r2, r5, #3
 800f8b2:	4296      	cmp	r6, r2
 800f8b4:	bf38      	it	cc
 800f8b6:	2300      	movcc	r3, #0
 800f8b8:	4423      	add	r3, r4
 800f8ba:	e015      	b.n	800f8e8 <rshift+0x68>
 800f8bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8c0:	f1c1 0820 	rsb	r8, r1, #32
 800f8c4:	40cf      	lsrs	r7, r1
 800f8c6:	f105 0e04 	add.w	lr, r5, #4
 800f8ca:	46a1      	mov	r9, r4
 800f8cc:	4576      	cmp	r6, lr
 800f8ce:	46f4      	mov	ip, lr
 800f8d0:	d815      	bhi.n	800f8fe <rshift+0x7e>
 800f8d2:	1a9a      	subs	r2, r3, r2
 800f8d4:	0092      	lsls	r2, r2, #2
 800f8d6:	3a04      	subs	r2, #4
 800f8d8:	3501      	adds	r5, #1
 800f8da:	42ae      	cmp	r6, r5
 800f8dc:	bf38      	it	cc
 800f8de:	2200      	movcc	r2, #0
 800f8e0:	18a3      	adds	r3, r4, r2
 800f8e2:	50a7      	str	r7, [r4, r2]
 800f8e4:	b107      	cbz	r7, 800f8e8 <rshift+0x68>
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	1b1a      	subs	r2, r3, r4
 800f8ea:	42a3      	cmp	r3, r4
 800f8ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f8f0:	bf08      	it	eq
 800f8f2:	2300      	moveq	r3, #0
 800f8f4:	6102      	str	r2, [r0, #16]
 800f8f6:	bf08      	it	eq
 800f8f8:	6143      	streq	r3, [r0, #20]
 800f8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8fe:	f8dc c000 	ldr.w	ip, [ip]
 800f902:	fa0c fc08 	lsl.w	ip, ip, r8
 800f906:	ea4c 0707 	orr.w	r7, ip, r7
 800f90a:	f849 7b04 	str.w	r7, [r9], #4
 800f90e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f912:	40cf      	lsrs	r7, r1
 800f914:	e7da      	b.n	800f8cc <rshift+0x4c>
 800f916:	f851 cb04 	ldr.w	ip, [r1], #4
 800f91a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f91e:	e7c3      	b.n	800f8a8 <rshift+0x28>
 800f920:	4623      	mov	r3, r4
 800f922:	e7e1      	b.n	800f8e8 <rshift+0x68>

0800f924 <__hexdig_fun>:
 800f924:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f928:	2b09      	cmp	r3, #9
 800f92a:	d802      	bhi.n	800f932 <__hexdig_fun+0xe>
 800f92c:	3820      	subs	r0, #32
 800f92e:	b2c0      	uxtb	r0, r0
 800f930:	4770      	bx	lr
 800f932:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f936:	2b05      	cmp	r3, #5
 800f938:	d801      	bhi.n	800f93e <__hexdig_fun+0x1a>
 800f93a:	3847      	subs	r0, #71	@ 0x47
 800f93c:	e7f7      	b.n	800f92e <__hexdig_fun+0xa>
 800f93e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f942:	2b05      	cmp	r3, #5
 800f944:	d801      	bhi.n	800f94a <__hexdig_fun+0x26>
 800f946:	3827      	subs	r0, #39	@ 0x27
 800f948:	e7f1      	b.n	800f92e <__hexdig_fun+0xa>
 800f94a:	2000      	movs	r0, #0
 800f94c:	4770      	bx	lr
	...

0800f950 <__gethex>:
 800f950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f954:	b085      	sub	sp, #20
 800f956:	468a      	mov	sl, r1
 800f958:	9302      	str	r3, [sp, #8]
 800f95a:	680b      	ldr	r3, [r1, #0]
 800f95c:	9001      	str	r0, [sp, #4]
 800f95e:	4690      	mov	r8, r2
 800f960:	1c9c      	adds	r4, r3, #2
 800f962:	46a1      	mov	r9, r4
 800f964:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f968:	2830      	cmp	r0, #48	@ 0x30
 800f96a:	d0fa      	beq.n	800f962 <__gethex+0x12>
 800f96c:	eba9 0303 	sub.w	r3, r9, r3
 800f970:	f1a3 0b02 	sub.w	fp, r3, #2
 800f974:	f7ff ffd6 	bl	800f924 <__hexdig_fun>
 800f978:	4605      	mov	r5, r0
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d168      	bne.n	800fa50 <__gethex+0x100>
 800f97e:	49a0      	ldr	r1, [pc, #640]	@ (800fc00 <__gethex+0x2b0>)
 800f980:	2201      	movs	r2, #1
 800f982:	4648      	mov	r0, r9
 800f984:	f7ff fea1 	bl	800f6ca <strncmp>
 800f988:	4607      	mov	r7, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d167      	bne.n	800fa5e <__gethex+0x10e>
 800f98e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f992:	4626      	mov	r6, r4
 800f994:	f7ff ffc6 	bl	800f924 <__hexdig_fun>
 800f998:	2800      	cmp	r0, #0
 800f99a:	d062      	beq.n	800fa62 <__gethex+0x112>
 800f99c:	4623      	mov	r3, r4
 800f99e:	7818      	ldrb	r0, [r3, #0]
 800f9a0:	2830      	cmp	r0, #48	@ 0x30
 800f9a2:	4699      	mov	r9, r3
 800f9a4:	f103 0301 	add.w	r3, r3, #1
 800f9a8:	d0f9      	beq.n	800f99e <__gethex+0x4e>
 800f9aa:	f7ff ffbb 	bl	800f924 <__hexdig_fun>
 800f9ae:	fab0 f580 	clz	r5, r0
 800f9b2:	096d      	lsrs	r5, r5, #5
 800f9b4:	f04f 0b01 	mov.w	fp, #1
 800f9b8:	464a      	mov	r2, r9
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	3201      	adds	r2, #1
 800f9be:	7830      	ldrb	r0, [r6, #0]
 800f9c0:	f7ff ffb0 	bl	800f924 <__hexdig_fun>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d1f8      	bne.n	800f9ba <__gethex+0x6a>
 800f9c8:	498d      	ldr	r1, [pc, #564]	@ (800fc00 <__gethex+0x2b0>)
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f7ff fe7c 	bl	800f6ca <strncmp>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d13f      	bne.n	800fa56 <__gethex+0x106>
 800f9d6:	b944      	cbnz	r4, 800f9ea <__gethex+0x9a>
 800f9d8:	1c74      	adds	r4, r6, #1
 800f9da:	4622      	mov	r2, r4
 800f9dc:	4616      	mov	r6, r2
 800f9de:	3201      	adds	r2, #1
 800f9e0:	7830      	ldrb	r0, [r6, #0]
 800f9e2:	f7ff ff9f 	bl	800f924 <__hexdig_fun>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d1f8      	bne.n	800f9dc <__gethex+0x8c>
 800f9ea:	1ba4      	subs	r4, r4, r6
 800f9ec:	00a7      	lsls	r7, r4, #2
 800f9ee:	7833      	ldrb	r3, [r6, #0]
 800f9f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f9f4:	2b50      	cmp	r3, #80	@ 0x50
 800f9f6:	d13e      	bne.n	800fa76 <__gethex+0x126>
 800f9f8:	7873      	ldrb	r3, [r6, #1]
 800f9fa:	2b2b      	cmp	r3, #43	@ 0x2b
 800f9fc:	d033      	beq.n	800fa66 <__gethex+0x116>
 800f9fe:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa00:	d034      	beq.n	800fa6c <__gethex+0x11c>
 800fa02:	1c71      	adds	r1, r6, #1
 800fa04:	2400      	movs	r4, #0
 800fa06:	7808      	ldrb	r0, [r1, #0]
 800fa08:	f7ff ff8c 	bl	800f924 <__hexdig_fun>
 800fa0c:	1e43      	subs	r3, r0, #1
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b18      	cmp	r3, #24
 800fa12:	d830      	bhi.n	800fa76 <__gethex+0x126>
 800fa14:	f1a0 0210 	sub.w	r2, r0, #16
 800fa18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa1c:	f7ff ff82 	bl	800f924 <__hexdig_fun>
 800fa20:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fa24:	fa5f fc8c 	uxtb.w	ip, ip
 800fa28:	f1bc 0f18 	cmp.w	ip, #24
 800fa2c:	f04f 030a 	mov.w	r3, #10
 800fa30:	d91e      	bls.n	800fa70 <__gethex+0x120>
 800fa32:	b104      	cbz	r4, 800fa36 <__gethex+0xe6>
 800fa34:	4252      	negs	r2, r2
 800fa36:	4417      	add	r7, r2
 800fa38:	f8ca 1000 	str.w	r1, [sl]
 800fa3c:	b1ed      	cbz	r5, 800fa7a <__gethex+0x12a>
 800fa3e:	f1bb 0f00 	cmp.w	fp, #0
 800fa42:	bf0c      	ite	eq
 800fa44:	2506      	moveq	r5, #6
 800fa46:	2500      	movne	r5, #0
 800fa48:	4628      	mov	r0, r5
 800fa4a:	b005      	add	sp, #20
 800fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa50:	2500      	movs	r5, #0
 800fa52:	462c      	mov	r4, r5
 800fa54:	e7b0      	b.n	800f9b8 <__gethex+0x68>
 800fa56:	2c00      	cmp	r4, #0
 800fa58:	d1c7      	bne.n	800f9ea <__gethex+0x9a>
 800fa5a:	4627      	mov	r7, r4
 800fa5c:	e7c7      	b.n	800f9ee <__gethex+0x9e>
 800fa5e:	464e      	mov	r6, r9
 800fa60:	462f      	mov	r7, r5
 800fa62:	2501      	movs	r5, #1
 800fa64:	e7c3      	b.n	800f9ee <__gethex+0x9e>
 800fa66:	2400      	movs	r4, #0
 800fa68:	1cb1      	adds	r1, r6, #2
 800fa6a:	e7cc      	b.n	800fa06 <__gethex+0xb6>
 800fa6c:	2401      	movs	r4, #1
 800fa6e:	e7fb      	b.n	800fa68 <__gethex+0x118>
 800fa70:	fb03 0002 	mla	r0, r3, r2, r0
 800fa74:	e7ce      	b.n	800fa14 <__gethex+0xc4>
 800fa76:	4631      	mov	r1, r6
 800fa78:	e7de      	b.n	800fa38 <__gethex+0xe8>
 800fa7a:	eba6 0309 	sub.w	r3, r6, r9
 800fa7e:	3b01      	subs	r3, #1
 800fa80:	4629      	mov	r1, r5
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	dc0a      	bgt.n	800fa9c <__gethex+0x14c>
 800fa86:	9801      	ldr	r0, [sp, #4]
 800fa88:	f000 faf4 	bl	8010074 <_Balloc>
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	b940      	cbnz	r0, 800faa2 <__gethex+0x152>
 800fa90:	4b5c      	ldr	r3, [pc, #368]	@ (800fc04 <__gethex+0x2b4>)
 800fa92:	4602      	mov	r2, r0
 800fa94:	21e4      	movs	r1, #228	@ 0xe4
 800fa96:	485c      	ldr	r0, [pc, #368]	@ (800fc08 <__gethex+0x2b8>)
 800fa98:	f001 fb66 	bl	8011168 <__assert_func>
 800fa9c:	3101      	adds	r1, #1
 800fa9e:	105b      	asrs	r3, r3, #1
 800faa0:	e7ef      	b.n	800fa82 <__gethex+0x132>
 800faa2:	f100 0a14 	add.w	sl, r0, #20
 800faa6:	2300      	movs	r3, #0
 800faa8:	4655      	mov	r5, sl
 800faaa:	469b      	mov	fp, r3
 800faac:	45b1      	cmp	r9, r6
 800faae:	d337      	bcc.n	800fb20 <__gethex+0x1d0>
 800fab0:	f845 bb04 	str.w	fp, [r5], #4
 800fab4:	eba5 050a 	sub.w	r5, r5, sl
 800fab8:	10ad      	asrs	r5, r5, #2
 800faba:	6125      	str	r5, [r4, #16]
 800fabc:	4658      	mov	r0, fp
 800fabe:	f000 fbcb 	bl	8010258 <__hi0bits>
 800fac2:	016d      	lsls	r5, r5, #5
 800fac4:	f8d8 6000 	ldr.w	r6, [r8]
 800fac8:	1a2d      	subs	r5, r5, r0
 800faca:	42b5      	cmp	r5, r6
 800facc:	dd54      	ble.n	800fb78 <__gethex+0x228>
 800face:	1bad      	subs	r5, r5, r6
 800fad0:	4629      	mov	r1, r5
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 ff5f 	bl	8010996 <__any_on>
 800fad8:	4681      	mov	r9, r0
 800fada:	b178      	cbz	r0, 800fafc <__gethex+0x1ac>
 800fadc:	1e6b      	subs	r3, r5, #1
 800fade:	1159      	asrs	r1, r3, #5
 800fae0:	f003 021f 	and.w	r2, r3, #31
 800fae4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fae8:	f04f 0901 	mov.w	r9, #1
 800faec:	fa09 f202 	lsl.w	r2, r9, r2
 800faf0:	420a      	tst	r2, r1
 800faf2:	d003      	beq.n	800fafc <__gethex+0x1ac>
 800faf4:	454b      	cmp	r3, r9
 800faf6:	dc36      	bgt.n	800fb66 <__gethex+0x216>
 800faf8:	f04f 0902 	mov.w	r9, #2
 800fafc:	4629      	mov	r1, r5
 800fafe:	4620      	mov	r0, r4
 800fb00:	f7ff febe 	bl	800f880 <rshift>
 800fb04:	442f      	add	r7, r5
 800fb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb0a:	42bb      	cmp	r3, r7
 800fb0c:	da42      	bge.n	800fb94 <__gethex+0x244>
 800fb0e:	9801      	ldr	r0, [sp, #4]
 800fb10:	4621      	mov	r1, r4
 800fb12:	f000 faef 	bl	80100f4 <_Bfree>
 800fb16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb18:	2300      	movs	r3, #0
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	25a3      	movs	r5, #163	@ 0xa3
 800fb1e:	e793      	b.n	800fa48 <__gethex+0xf8>
 800fb20:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fb24:	2a2e      	cmp	r2, #46	@ 0x2e
 800fb26:	d012      	beq.n	800fb4e <__gethex+0x1fe>
 800fb28:	2b20      	cmp	r3, #32
 800fb2a:	d104      	bne.n	800fb36 <__gethex+0x1e6>
 800fb2c:	f845 bb04 	str.w	fp, [r5], #4
 800fb30:	f04f 0b00 	mov.w	fp, #0
 800fb34:	465b      	mov	r3, fp
 800fb36:	7830      	ldrb	r0, [r6, #0]
 800fb38:	9303      	str	r3, [sp, #12]
 800fb3a:	f7ff fef3 	bl	800f924 <__hexdig_fun>
 800fb3e:	9b03      	ldr	r3, [sp, #12]
 800fb40:	f000 000f 	and.w	r0, r0, #15
 800fb44:	4098      	lsls	r0, r3
 800fb46:	ea4b 0b00 	orr.w	fp, fp, r0
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	e7ae      	b.n	800faac <__gethex+0x15c>
 800fb4e:	45b1      	cmp	r9, r6
 800fb50:	d8ea      	bhi.n	800fb28 <__gethex+0x1d8>
 800fb52:	492b      	ldr	r1, [pc, #172]	@ (800fc00 <__gethex+0x2b0>)
 800fb54:	9303      	str	r3, [sp, #12]
 800fb56:	2201      	movs	r2, #1
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7ff fdb6 	bl	800f6ca <strncmp>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	2800      	cmp	r0, #0
 800fb62:	d1e1      	bne.n	800fb28 <__gethex+0x1d8>
 800fb64:	e7a2      	b.n	800faac <__gethex+0x15c>
 800fb66:	1ea9      	subs	r1, r5, #2
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f000 ff14 	bl	8010996 <__any_on>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d0c2      	beq.n	800faf8 <__gethex+0x1a8>
 800fb72:	f04f 0903 	mov.w	r9, #3
 800fb76:	e7c1      	b.n	800fafc <__gethex+0x1ac>
 800fb78:	da09      	bge.n	800fb8e <__gethex+0x23e>
 800fb7a:	1b75      	subs	r5, r6, r5
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	9801      	ldr	r0, [sp, #4]
 800fb80:	462a      	mov	r2, r5
 800fb82:	f000 fccf 	bl	8010524 <__lshift>
 800fb86:	1b7f      	subs	r7, r7, r5
 800fb88:	4604      	mov	r4, r0
 800fb8a:	f100 0a14 	add.w	sl, r0, #20
 800fb8e:	f04f 0900 	mov.w	r9, #0
 800fb92:	e7b8      	b.n	800fb06 <__gethex+0x1b6>
 800fb94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fb98:	42bd      	cmp	r5, r7
 800fb9a:	dd6f      	ble.n	800fc7c <__gethex+0x32c>
 800fb9c:	1bed      	subs	r5, r5, r7
 800fb9e:	42ae      	cmp	r6, r5
 800fba0:	dc34      	bgt.n	800fc0c <__gethex+0x2bc>
 800fba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d022      	beq.n	800fbf0 <__gethex+0x2a0>
 800fbaa:	2b03      	cmp	r3, #3
 800fbac:	d024      	beq.n	800fbf8 <__gethex+0x2a8>
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d115      	bne.n	800fbde <__gethex+0x28e>
 800fbb2:	42ae      	cmp	r6, r5
 800fbb4:	d113      	bne.n	800fbde <__gethex+0x28e>
 800fbb6:	2e01      	cmp	r6, #1
 800fbb8:	d10b      	bne.n	800fbd2 <__gethex+0x282>
 800fbba:	9a02      	ldr	r2, [sp, #8]
 800fbbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbc0:	6013      	str	r3, [r2, #0]
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	6123      	str	r3, [r4, #16]
 800fbc6:	f8ca 3000 	str.w	r3, [sl]
 800fbca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbcc:	2562      	movs	r5, #98	@ 0x62
 800fbce:	601c      	str	r4, [r3, #0]
 800fbd0:	e73a      	b.n	800fa48 <__gethex+0xf8>
 800fbd2:	1e71      	subs	r1, r6, #1
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 fede 	bl	8010996 <__any_on>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d1ed      	bne.n	800fbba <__gethex+0x26a>
 800fbde:	9801      	ldr	r0, [sp, #4]
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	f000 fa87 	bl	80100f4 <_Bfree>
 800fbe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbe8:	2300      	movs	r3, #0
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	2550      	movs	r5, #80	@ 0x50
 800fbee:	e72b      	b.n	800fa48 <__gethex+0xf8>
 800fbf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1f3      	bne.n	800fbde <__gethex+0x28e>
 800fbf6:	e7e0      	b.n	800fbba <__gethex+0x26a>
 800fbf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1dd      	bne.n	800fbba <__gethex+0x26a>
 800fbfe:	e7ee      	b.n	800fbde <__gethex+0x28e>
 800fc00:	08012a9e 	.word	0x08012a9e
 800fc04:	08012c09 	.word	0x08012c09
 800fc08:	08012c1a 	.word	0x08012c1a
 800fc0c:	1e6f      	subs	r7, r5, #1
 800fc0e:	f1b9 0f00 	cmp.w	r9, #0
 800fc12:	d130      	bne.n	800fc76 <__gethex+0x326>
 800fc14:	b127      	cbz	r7, 800fc20 <__gethex+0x2d0>
 800fc16:	4639      	mov	r1, r7
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 febc 	bl	8010996 <__any_on>
 800fc1e:	4681      	mov	r9, r0
 800fc20:	117a      	asrs	r2, r7, #5
 800fc22:	2301      	movs	r3, #1
 800fc24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fc28:	f007 071f 	and.w	r7, r7, #31
 800fc2c:	40bb      	lsls	r3, r7
 800fc2e:	4213      	tst	r3, r2
 800fc30:	4629      	mov	r1, r5
 800fc32:	4620      	mov	r0, r4
 800fc34:	bf18      	it	ne
 800fc36:	f049 0902 	orrne.w	r9, r9, #2
 800fc3a:	f7ff fe21 	bl	800f880 <rshift>
 800fc3e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fc42:	1b76      	subs	r6, r6, r5
 800fc44:	2502      	movs	r5, #2
 800fc46:	f1b9 0f00 	cmp.w	r9, #0
 800fc4a:	d047      	beq.n	800fcdc <__gethex+0x38c>
 800fc4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d015      	beq.n	800fc80 <__gethex+0x330>
 800fc54:	2b03      	cmp	r3, #3
 800fc56:	d017      	beq.n	800fc88 <__gethex+0x338>
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d109      	bne.n	800fc70 <__gethex+0x320>
 800fc5c:	f019 0f02 	tst.w	r9, #2
 800fc60:	d006      	beq.n	800fc70 <__gethex+0x320>
 800fc62:	f8da 3000 	ldr.w	r3, [sl]
 800fc66:	ea49 0903 	orr.w	r9, r9, r3
 800fc6a:	f019 0f01 	tst.w	r9, #1
 800fc6e:	d10e      	bne.n	800fc8e <__gethex+0x33e>
 800fc70:	f045 0510 	orr.w	r5, r5, #16
 800fc74:	e032      	b.n	800fcdc <__gethex+0x38c>
 800fc76:	f04f 0901 	mov.w	r9, #1
 800fc7a:	e7d1      	b.n	800fc20 <__gethex+0x2d0>
 800fc7c:	2501      	movs	r5, #1
 800fc7e:	e7e2      	b.n	800fc46 <__gethex+0x2f6>
 800fc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc82:	f1c3 0301 	rsb	r3, r3, #1
 800fc86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d0f0      	beq.n	800fc70 <__gethex+0x320>
 800fc8e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fc92:	f104 0314 	add.w	r3, r4, #20
 800fc96:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fc9a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fc9e:	f04f 0c00 	mov.w	ip, #0
 800fca2:	4618      	mov	r0, r3
 800fca4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800fcac:	d01b      	beq.n	800fce6 <__gethex+0x396>
 800fcae:	3201      	adds	r2, #1
 800fcb0:	6002      	str	r2, [r0, #0]
 800fcb2:	2d02      	cmp	r5, #2
 800fcb4:	f104 0314 	add.w	r3, r4, #20
 800fcb8:	d13c      	bne.n	800fd34 <__gethex+0x3e4>
 800fcba:	f8d8 2000 	ldr.w	r2, [r8]
 800fcbe:	3a01      	subs	r2, #1
 800fcc0:	42b2      	cmp	r2, r6
 800fcc2:	d109      	bne.n	800fcd8 <__gethex+0x388>
 800fcc4:	1171      	asrs	r1, r6, #5
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fccc:	f006 061f 	and.w	r6, r6, #31
 800fcd0:	fa02 f606 	lsl.w	r6, r2, r6
 800fcd4:	421e      	tst	r6, r3
 800fcd6:	d13a      	bne.n	800fd4e <__gethex+0x3fe>
 800fcd8:	f045 0520 	orr.w	r5, r5, #32
 800fcdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcde:	601c      	str	r4, [r3, #0]
 800fce0:	9b02      	ldr	r3, [sp, #8]
 800fce2:	601f      	str	r7, [r3, #0]
 800fce4:	e6b0      	b.n	800fa48 <__gethex+0xf8>
 800fce6:	4299      	cmp	r1, r3
 800fce8:	f843 cc04 	str.w	ip, [r3, #-4]
 800fcec:	d8d9      	bhi.n	800fca2 <__gethex+0x352>
 800fcee:	68a3      	ldr	r3, [r4, #8]
 800fcf0:	459b      	cmp	fp, r3
 800fcf2:	db17      	blt.n	800fd24 <__gethex+0x3d4>
 800fcf4:	6861      	ldr	r1, [r4, #4]
 800fcf6:	9801      	ldr	r0, [sp, #4]
 800fcf8:	3101      	adds	r1, #1
 800fcfa:	f000 f9bb 	bl	8010074 <_Balloc>
 800fcfe:	4681      	mov	r9, r0
 800fd00:	b918      	cbnz	r0, 800fd0a <__gethex+0x3ba>
 800fd02:	4b1a      	ldr	r3, [pc, #104]	@ (800fd6c <__gethex+0x41c>)
 800fd04:	4602      	mov	r2, r0
 800fd06:	2184      	movs	r1, #132	@ 0x84
 800fd08:	e6c5      	b.n	800fa96 <__gethex+0x146>
 800fd0a:	6922      	ldr	r2, [r4, #16]
 800fd0c:	3202      	adds	r2, #2
 800fd0e:	f104 010c 	add.w	r1, r4, #12
 800fd12:	0092      	lsls	r2, r2, #2
 800fd14:	300c      	adds	r0, #12
 800fd16:	f7ff fd4c 	bl	800f7b2 <memcpy>
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	9801      	ldr	r0, [sp, #4]
 800fd1e:	f000 f9e9 	bl	80100f4 <_Bfree>
 800fd22:	464c      	mov	r4, r9
 800fd24:	6923      	ldr	r3, [r4, #16]
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd2c:	6122      	str	r2, [r4, #16]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	615a      	str	r2, [r3, #20]
 800fd32:	e7be      	b.n	800fcb2 <__gethex+0x362>
 800fd34:	6922      	ldr	r2, [r4, #16]
 800fd36:	455a      	cmp	r2, fp
 800fd38:	dd0b      	ble.n	800fd52 <__gethex+0x402>
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f7ff fd9f 	bl	800f880 <rshift>
 800fd42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd46:	3701      	adds	r7, #1
 800fd48:	42bb      	cmp	r3, r7
 800fd4a:	f6ff aee0 	blt.w	800fb0e <__gethex+0x1be>
 800fd4e:	2501      	movs	r5, #1
 800fd50:	e7c2      	b.n	800fcd8 <__gethex+0x388>
 800fd52:	f016 061f 	ands.w	r6, r6, #31
 800fd56:	d0fa      	beq.n	800fd4e <__gethex+0x3fe>
 800fd58:	4453      	add	r3, sl
 800fd5a:	f1c6 0620 	rsb	r6, r6, #32
 800fd5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd62:	f000 fa79 	bl	8010258 <__hi0bits>
 800fd66:	42b0      	cmp	r0, r6
 800fd68:	dbe7      	blt.n	800fd3a <__gethex+0x3ea>
 800fd6a:	e7f0      	b.n	800fd4e <__gethex+0x3fe>
 800fd6c:	08012c09 	.word	0x08012c09

0800fd70 <L_shift>:
 800fd70:	f1c2 0208 	rsb	r2, r2, #8
 800fd74:	0092      	lsls	r2, r2, #2
 800fd76:	b570      	push	{r4, r5, r6, lr}
 800fd78:	f1c2 0620 	rsb	r6, r2, #32
 800fd7c:	6843      	ldr	r3, [r0, #4]
 800fd7e:	6804      	ldr	r4, [r0, #0]
 800fd80:	fa03 f506 	lsl.w	r5, r3, r6
 800fd84:	432c      	orrs	r4, r5
 800fd86:	40d3      	lsrs	r3, r2
 800fd88:	6004      	str	r4, [r0, #0]
 800fd8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd8e:	4288      	cmp	r0, r1
 800fd90:	d3f4      	bcc.n	800fd7c <L_shift+0xc>
 800fd92:	bd70      	pop	{r4, r5, r6, pc}

0800fd94 <__match>:
 800fd94:	b530      	push	{r4, r5, lr}
 800fd96:	6803      	ldr	r3, [r0, #0]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd9e:	b914      	cbnz	r4, 800fda6 <__match+0x12>
 800fda0:	6003      	str	r3, [r0, #0]
 800fda2:	2001      	movs	r0, #1
 800fda4:	bd30      	pop	{r4, r5, pc}
 800fda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdaa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fdae:	2d19      	cmp	r5, #25
 800fdb0:	bf98      	it	ls
 800fdb2:	3220      	addls	r2, #32
 800fdb4:	42a2      	cmp	r2, r4
 800fdb6:	d0f0      	beq.n	800fd9a <__match+0x6>
 800fdb8:	2000      	movs	r0, #0
 800fdba:	e7f3      	b.n	800fda4 <__match+0x10>

0800fdbc <__hexnan>:
 800fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	680b      	ldr	r3, [r1, #0]
 800fdc2:	6801      	ldr	r1, [r0, #0]
 800fdc4:	115e      	asrs	r6, r3, #5
 800fdc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fdca:	f013 031f 	ands.w	r3, r3, #31
 800fdce:	b087      	sub	sp, #28
 800fdd0:	bf18      	it	ne
 800fdd2:	3604      	addne	r6, #4
 800fdd4:	2500      	movs	r5, #0
 800fdd6:	1f37      	subs	r7, r6, #4
 800fdd8:	4682      	mov	sl, r0
 800fdda:	4690      	mov	r8, r2
 800fddc:	9301      	str	r3, [sp, #4]
 800fdde:	f846 5c04 	str.w	r5, [r6, #-4]
 800fde2:	46b9      	mov	r9, r7
 800fde4:	463c      	mov	r4, r7
 800fde6:	9502      	str	r5, [sp, #8]
 800fde8:	46ab      	mov	fp, r5
 800fdea:	784a      	ldrb	r2, [r1, #1]
 800fdec:	1c4b      	adds	r3, r1, #1
 800fdee:	9303      	str	r3, [sp, #12]
 800fdf0:	b342      	cbz	r2, 800fe44 <__hexnan+0x88>
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	9105      	str	r1, [sp, #20]
 800fdf6:	9204      	str	r2, [sp, #16]
 800fdf8:	f7ff fd94 	bl	800f924 <__hexdig_fun>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d151      	bne.n	800fea4 <__hexnan+0xe8>
 800fe00:	9a04      	ldr	r2, [sp, #16]
 800fe02:	9905      	ldr	r1, [sp, #20]
 800fe04:	2a20      	cmp	r2, #32
 800fe06:	d818      	bhi.n	800fe3a <__hexnan+0x7e>
 800fe08:	9b02      	ldr	r3, [sp, #8]
 800fe0a:	459b      	cmp	fp, r3
 800fe0c:	dd13      	ble.n	800fe36 <__hexnan+0x7a>
 800fe0e:	454c      	cmp	r4, r9
 800fe10:	d206      	bcs.n	800fe20 <__hexnan+0x64>
 800fe12:	2d07      	cmp	r5, #7
 800fe14:	dc04      	bgt.n	800fe20 <__hexnan+0x64>
 800fe16:	462a      	mov	r2, r5
 800fe18:	4649      	mov	r1, r9
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f7ff ffa8 	bl	800fd70 <L_shift>
 800fe20:	4544      	cmp	r4, r8
 800fe22:	d952      	bls.n	800feca <__hexnan+0x10e>
 800fe24:	2300      	movs	r3, #0
 800fe26:	f1a4 0904 	sub.w	r9, r4, #4
 800fe2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe2e:	f8cd b008 	str.w	fp, [sp, #8]
 800fe32:	464c      	mov	r4, r9
 800fe34:	461d      	mov	r5, r3
 800fe36:	9903      	ldr	r1, [sp, #12]
 800fe38:	e7d7      	b.n	800fdea <__hexnan+0x2e>
 800fe3a:	2a29      	cmp	r2, #41	@ 0x29
 800fe3c:	d157      	bne.n	800feee <__hexnan+0x132>
 800fe3e:	3102      	adds	r1, #2
 800fe40:	f8ca 1000 	str.w	r1, [sl]
 800fe44:	f1bb 0f00 	cmp.w	fp, #0
 800fe48:	d051      	beq.n	800feee <__hexnan+0x132>
 800fe4a:	454c      	cmp	r4, r9
 800fe4c:	d206      	bcs.n	800fe5c <__hexnan+0xa0>
 800fe4e:	2d07      	cmp	r5, #7
 800fe50:	dc04      	bgt.n	800fe5c <__hexnan+0xa0>
 800fe52:	462a      	mov	r2, r5
 800fe54:	4649      	mov	r1, r9
 800fe56:	4620      	mov	r0, r4
 800fe58:	f7ff ff8a 	bl	800fd70 <L_shift>
 800fe5c:	4544      	cmp	r4, r8
 800fe5e:	d936      	bls.n	800fece <__hexnan+0x112>
 800fe60:	f1a8 0204 	sub.w	r2, r8, #4
 800fe64:	4623      	mov	r3, r4
 800fe66:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe6a:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe6e:	429f      	cmp	r7, r3
 800fe70:	d2f9      	bcs.n	800fe66 <__hexnan+0xaa>
 800fe72:	1b3b      	subs	r3, r7, r4
 800fe74:	f023 0303 	bic.w	r3, r3, #3
 800fe78:	3304      	adds	r3, #4
 800fe7a:	3401      	adds	r4, #1
 800fe7c:	3e03      	subs	r6, #3
 800fe7e:	42b4      	cmp	r4, r6
 800fe80:	bf88      	it	hi
 800fe82:	2304      	movhi	r3, #4
 800fe84:	4443      	add	r3, r8
 800fe86:	2200      	movs	r2, #0
 800fe88:	f843 2b04 	str.w	r2, [r3], #4
 800fe8c:	429f      	cmp	r7, r3
 800fe8e:	d2fb      	bcs.n	800fe88 <__hexnan+0xcc>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	b91b      	cbnz	r3, 800fe9c <__hexnan+0xe0>
 800fe94:	4547      	cmp	r7, r8
 800fe96:	d128      	bne.n	800feea <__hexnan+0x12e>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	603b      	str	r3, [r7, #0]
 800fe9c:	2005      	movs	r0, #5
 800fe9e:	b007      	add	sp, #28
 800fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea4:	3501      	adds	r5, #1
 800fea6:	2d08      	cmp	r5, #8
 800fea8:	f10b 0b01 	add.w	fp, fp, #1
 800feac:	dd06      	ble.n	800febc <__hexnan+0x100>
 800feae:	4544      	cmp	r4, r8
 800feb0:	d9c1      	bls.n	800fe36 <__hexnan+0x7a>
 800feb2:	2300      	movs	r3, #0
 800feb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800feb8:	2501      	movs	r5, #1
 800feba:	3c04      	subs	r4, #4
 800febc:	6822      	ldr	r2, [r4, #0]
 800febe:	f000 000f 	and.w	r0, r0, #15
 800fec2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fec6:	6020      	str	r0, [r4, #0]
 800fec8:	e7b5      	b.n	800fe36 <__hexnan+0x7a>
 800feca:	2508      	movs	r5, #8
 800fecc:	e7b3      	b.n	800fe36 <__hexnan+0x7a>
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d0dd      	beq.n	800fe90 <__hexnan+0xd4>
 800fed4:	f1c3 0320 	rsb	r3, r3, #32
 800fed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fedc:	40da      	lsrs	r2, r3
 800fede:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fee2:	4013      	ands	r3, r2
 800fee4:	f846 3c04 	str.w	r3, [r6, #-4]
 800fee8:	e7d2      	b.n	800fe90 <__hexnan+0xd4>
 800feea:	3f04      	subs	r7, #4
 800feec:	e7d0      	b.n	800fe90 <__hexnan+0xd4>
 800feee:	2004      	movs	r0, #4
 800fef0:	e7d5      	b.n	800fe9e <__hexnan+0xe2>
	...

0800fef4 <sbrk_aligned>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	4e0f      	ldr	r6, [pc, #60]	@ (800ff34 <sbrk_aligned+0x40>)
 800fef8:	460c      	mov	r4, r1
 800fefa:	6831      	ldr	r1, [r6, #0]
 800fefc:	4605      	mov	r5, r0
 800fefe:	b911      	cbnz	r1, 800ff06 <sbrk_aligned+0x12>
 800ff00:	f001 f922 	bl	8011148 <_sbrk_r>
 800ff04:	6030      	str	r0, [r6, #0]
 800ff06:	4621      	mov	r1, r4
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f001 f91d 	bl	8011148 <_sbrk_r>
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	d103      	bne.n	800ff1a <sbrk_aligned+0x26>
 800ff12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ff16:	4620      	mov	r0, r4
 800ff18:	bd70      	pop	{r4, r5, r6, pc}
 800ff1a:	1cc4      	adds	r4, r0, #3
 800ff1c:	f024 0403 	bic.w	r4, r4, #3
 800ff20:	42a0      	cmp	r0, r4
 800ff22:	d0f8      	beq.n	800ff16 <sbrk_aligned+0x22>
 800ff24:	1a21      	subs	r1, r4, r0
 800ff26:	4628      	mov	r0, r5
 800ff28:	f001 f90e 	bl	8011148 <_sbrk_r>
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d1f2      	bne.n	800ff16 <sbrk_aligned+0x22>
 800ff30:	e7ef      	b.n	800ff12 <sbrk_aligned+0x1e>
 800ff32:	bf00      	nop
 800ff34:	2001c148 	.word	0x2001c148

0800ff38 <_malloc_r>:
 800ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff3c:	1ccd      	adds	r5, r1, #3
 800ff3e:	f025 0503 	bic.w	r5, r5, #3
 800ff42:	3508      	adds	r5, #8
 800ff44:	2d0c      	cmp	r5, #12
 800ff46:	bf38      	it	cc
 800ff48:	250c      	movcc	r5, #12
 800ff4a:	2d00      	cmp	r5, #0
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	db01      	blt.n	800ff54 <_malloc_r+0x1c>
 800ff50:	42a9      	cmp	r1, r5
 800ff52:	d904      	bls.n	800ff5e <_malloc_r+0x26>
 800ff54:	230c      	movs	r3, #12
 800ff56:	6033      	str	r3, [r6, #0]
 800ff58:	2000      	movs	r0, #0
 800ff5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010034 <_malloc_r+0xfc>
 800ff62:	f000 f87b 	bl	801005c <__malloc_lock>
 800ff66:	f8d8 3000 	ldr.w	r3, [r8]
 800ff6a:	461c      	mov	r4, r3
 800ff6c:	bb44      	cbnz	r4, 800ffc0 <_malloc_r+0x88>
 800ff6e:	4629      	mov	r1, r5
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7ff ffbf 	bl	800fef4 <sbrk_aligned>
 800ff76:	1c43      	adds	r3, r0, #1
 800ff78:	4604      	mov	r4, r0
 800ff7a:	d158      	bne.n	801002e <_malloc_r+0xf6>
 800ff7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ff80:	4627      	mov	r7, r4
 800ff82:	2f00      	cmp	r7, #0
 800ff84:	d143      	bne.n	801000e <_malloc_r+0xd6>
 800ff86:	2c00      	cmp	r4, #0
 800ff88:	d04b      	beq.n	8010022 <_malloc_r+0xea>
 800ff8a:	6823      	ldr	r3, [r4, #0]
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	4630      	mov	r0, r6
 800ff90:	eb04 0903 	add.w	r9, r4, r3
 800ff94:	f001 f8d8 	bl	8011148 <_sbrk_r>
 800ff98:	4581      	cmp	r9, r0
 800ff9a:	d142      	bne.n	8010022 <_malloc_r+0xea>
 800ff9c:	6821      	ldr	r1, [r4, #0]
 800ff9e:	1a6d      	subs	r5, r5, r1
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7ff ffa6 	bl	800fef4 <sbrk_aligned>
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d03a      	beq.n	8010022 <_malloc_r+0xea>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	442b      	add	r3, r5
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ffb6:	685a      	ldr	r2, [r3, #4]
 800ffb8:	bb62      	cbnz	r2, 8010014 <_malloc_r+0xdc>
 800ffba:	f8c8 7000 	str.w	r7, [r8]
 800ffbe:	e00f      	b.n	800ffe0 <_malloc_r+0xa8>
 800ffc0:	6822      	ldr	r2, [r4, #0]
 800ffc2:	1b52      	subs	r2, r2, r5
 800ffc4:	d420      	bmi.n	8010008 <_malloc_r+0xd0>
 800ffc6:	2a0b      	cmp	r2, #11
 800ffc8:	d917      	bls.n	800fffa <_malloc_r+0xc2>
 800ffca:	1961      	adds	r1, r4, r5
 800ffcc:	42a3      	cmp	r3, r4
 800ffce:	6025      	str	r5, [r4, #0]
 800ffd0:	bf18      	it	ne
 800ffd2:	6059      	strne	r1, [r3, #4]
 800ffd4:	6863      	ldr	r3, [r4, #4]
 800ffd6:	bf08      	it	eq
 800ffd8:	f8c8 1000 	streq.w	r1, [r8]
 800ffdc:	5162      	str	r2, [r4, r5]
 800ffde:	604b      	str	r3, [r1, #4]
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f000 f841 	bl	8010068 <__malloc_unlock>
 800ffe6:	f104 000b 	add.w	r0, r4, #11
 800ffea:	1d23      	adds	r3, r4, #4
 800ffec:	f020 0007 	bic.w	r0, r0, #7
 800fff0:	1ac2      	subs	r2, r0, r3
 800fff2:	bf1c      	itt	ne
 800fff4:	1a1b      	subne	r3, r3, r0
 800fff6:	50a3      	strne	r3, [r4, r2]
 800fff8:	e7af      	b.n	800ff5a <_malloc_r+0x22>
 800fffa:	6862      	ldr	r2, [r4, #4]
 800fffc:	42a3      	cmp	r3, r4
 800fffe:	bf0c      	ite	eq
 8010000:	f8c8 2000 	streq.w	r2, [r8]
 8010004:	605a      	strne	r2, [r3, #4]
 8010006:	e7eb      	b.n	800ffe0 <_malloc_r+0xa8>
 8010008:	4623      	mov	r3, r4
 801000a:	6864      	ldr	r4, [r4, #4]
 801000c:	e7ae      	b.n	800ff6c <_malloc_r+0x34>
 801000e:	463c      	mov	r4, r7
 8010010:	687f      	ldr	r7, [r7, #4]
 8010012:	e7b6      	b.n	800ff82 <_malloc_r+0x4a>
 8010014:	461a      	mov	r2, r3
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	42a3      	cmp	r3, r4
 801001a:	d1fb      	bne.n	8010014 <_malloc_r+0xdc>
 801001c:	2300      	movs	r3, #0
 801001e:	6053      	str	r3, [r2, #4]
 8010020:	e7de      	b.n	800ffe0 <_malloc_r+0xa8>
 8010022:	230c      	movs	r3, #12
 8010024:	6033      	str	r3, [r6, #0]
 8010026:	4630      	mov	r0, r6
 8010028:	f000 f81e 	bl	8010068 <__malloc_unlock>
 801002c:	e794      	b.n	800ff58 <_malloc_r+0x20>
 801002e:	6005      	str	r5, [r0, #0]
 8010030:	e7d6      	b.n	800ffe0 <_malloc_r+0xa8>
 8010032:	bf00      	nop
 8010034:	2001c14c 	.word	0x2001c14c

08010038 <__ascii_mbtowc>:
 8010038:	b082      	sub	sp, #8
 801003a:	b901      	cbnz	r1, 801003e <__ascii_mbtowc+0x6>
 801003c:	a901      	add	r1, sp, #4
 801003e:	b142      	cbz	r2, 8010052 <__ascii_mbtowc+0x1a>
 8010040:	b14b      	cbz	r3, 8010056 <__ascii_mbtowc+0x1e>
 8010042:	7813      	ldrb	r3, [r2, #0]
 8010044:	600b      	str	r3, [r1, #0]
 8010046:	7812      	ldrb	r2, [r2, #0]
 8010048:	1e10      	subs	r0, r2, #0
 801004a:	bf18      	it	ne
 801004c:	2001      	movne	r0, #1
 801004e:	b002      	add	sp, #8
 8010050:	4770      	bx	lr
 8010052:	4610      	mov	r0, r2
 8010054:	e7fb      	b.n	801004e <__ascii_mbtowc+0x16>
 8010056:	f06f 0001 	mvn.w	r0, #1
 801005a:	e7f8      	b.n	801004e <__ascii_mbtowc+0x16>

0801005c <__malloc_lock>:
 801005c:	4801      	ldr	r0, [pc, #4]	@ (8010064 <__malloc_lock+0x8>)
 801005e:	f7ff bba6 	b.w	800f7ae <__retarget_lock_acquire_recursive>
 8010062:	bf00      	nop
 8010064:	2001c144 	.word	0x2001c144

08010068 <__malloc_unlock>:
 8010068:	4801      	ldr	r0, [pc, #4]	@ (8010070 <__malloc_unlock+0x8>)
 801006a:	f7ff bba1 	b.w	800f7b0 <__retarget_lock_release_recursive>
 801006e:	bf00      	nop
 8010070:	2001c144 	.word	0x2001c144

08010074 <_Balloc>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	69c6      	ldr	r6, [r0, #28]
 8010078:	4604      	mov	r4, r0
 801007a:	460d      	mov	r5, r1
 801007c:	b976      	cbnz	r6, 801009c <_Balloc+0x28>
 801007e:	2010      	movs	r0, #16
 8010080:	f001 f8a4 	bl	80111cc <malloc>
 8010084:	4602      	mov	r2, r0
 8010086:	61e0      	str	r0, [r4, #28]
 8010088:	b920      	cbnz	r0, 8010094 <_Balloc+0x20>
 801008a:	4b18      	ldr	r3, [pc, #96]	@ (80100ec <_Balloc+0x78>)
 801008c:	4818      	ldr	r0, [pc, #96]	@ (80100f0 <_Balloc+0x7c>)
 801008e:	216b      	movs	r1, #107	@ 0x6b
 8010090:	f001 f86a 	bl	8011168 <__assert_func>
 8010094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010098:	6006      	str	r6, [r0, #0]
 801009a:	60c6      	str	r6, [r0, #12]
 801009c:	69e6      	ldr	r6, [r4, #28]
 801009e:	68f3      	ldr	r3, [r6, #12]
 80100a0:	b183      	cbz	r3, 80100c4 <_Balloc+0x50>
 80100a2:	69e3      	ldr	r3, [r4, #28]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100aa:	b9b8      	cbnz	r0, 80100dc <_Balloc+0x68>
 80100ac:	2101      	movs	r1, #1
 80100ae:	fa01 f605 	lsl.w	r6, r1, r5
 80100b2:	1d72      	adds	r2, r6, #5
 80100b4:	0092      	lsls	r2, r2, #2
 80100b6:	4620      	mov	r0, r4
 80100b8:	f001 f874 	bl	80111a4 <_calloc_r>
 80100bc:	b160      	cbz	r0, 80100d8 <_Balloc+0x64>
 80100be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100c2:	e00e      	b.n	80100e2 <_Balloc+0x6e>
 80100c4:	2221      	movs	r2, #33	@ 0x21
 80100c6:	2104      	movs	r1, #4
 80100c8:	4620      	mov	r0, r4
 80100ca:	f001 f86b 	bl	80111a4 <_calloc_r>
 80100ce:	69e3      	ldr	r3, [r4, #28]
 80100d0:	60f0      	str	r0, [r6, #12]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1e4      	bne.n	80100a2 <_Balloc+0x2e>
 80100d8:	2000      	movs	r0, #0
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	6802      	ldr	r2, [r0, #0]
 80100de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100e2:	2300      	movs	r3, #0
 80100e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100e8:	e7f7      	b.n	80100da <_Balloc+0x66>
 80100ea:	bf00      	nop
 80100ec:	08012c7a 	.word	0x08012c7a
 80100f0:	08012c91 	.word	0x08012c91

080100f4 <_Bfree>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	69c6      	ldr	r6, [r0, #28]
 80100f8:	4605      	mov	r5, r0
 80100fa:	460c      	mov	r4, r1
 80100fc:	b976      	cbnz	r6, 801011c <_Bfree+0x28>
 80100fe:	2010      	movs	r0, #16
 8010100:	f001 f864 	bl	80111cc <malloc>
 8010104:	4602      	mov	r2, r0
 8010106:	61e8      	str	r0, [r5, #28]
 8010108:	b920      	cbnz	r0, 8010114 <_Bfree+0x20>
 801010a:	4b09      	ldr	r3, [pc, #36]	@ (8010130 <_Bfree+0x3c>)
 801010c:	4809      	ldr	r0, [pc, #36]	@ (8010134 <_Bfree+0x40>)
 801010e:	218f      	movs	r1, #143	@ 0x8f
 8010110:	f001 f82a 	bl	8011168 <__assert_func>
 8010114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010118:	6006      	str	r6, [r0, #0]
 801011a:	60c6      	str	r6, [r0, #12]
 801011c:	b13c      	cbz	r4, 801012e <_Bfree+0x3a>
 801011e:	69eb      	ldr	r3, [r5, #28]
 8010120:	6862      	ldr	r2, [r4, #4]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010128:	6021      	str	r1, [r4, #0]
 801012a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801012e:	bd70      	pop	{r4, r5, r6, pc}
 8010130:	08012c7a 	.word	0x08012c7a
 8010134:	08012c91 	.word	0x08012c91

08010138 <__multadd>:
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	690d      	ldr	r5, [r1, #16]
 801013e:	4607      	mov	r7, r0
 8010140:	460c      	mov	r4, r1
 8010142:	461e      	mov	r6, r3
 8010144:	f101 0c14 	add.w	ip, r1, #20
 8010148:	2000      	movs	r0, #0
 801014a:	f8dc 3000 	ldr.w	r3, [ip]
 801014e:	b299      	uxth	r1, r3
 8010150:	fb02 6101 	mla	r1, r2, r1, r6
 8010154:	0c1e      	lsrs	r6, r3, #16
 8010156:	0c0b      	lsrs	r3, r1, #16
 8010158:	fb02 3306 	mla	r3, r2, r6, r3
 801015c:	b289      	uxth	r1, r1
 801015e:	3001      	adds	r0, #1
 8010160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010164:	4285      	cmp	r5, r0
 8010166:	f84c 1b04 	str.w	r1, [ip], #4
 801016a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801016e:	dcec      	bgt.n	801014a <__multadd+0x12>
 8010170:	b30e      	cbz	r6, 80101b6 <__multadd+0x7e>
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	42ab      	cmp	r3, r5
 8010176:	dc19      	bgt.n	80101ac <__multadd+0x74>
 8010178:	6861      	ldr	r1, [r4, #4]
 801017a:	4638      	mov	r0, r7
 801017c:	3101      	adds	r1, #1
 801017e:	f7ff ff79 	bl	8010074 <_Balloc>
 8010182:	4680      	mov	r8, r0
 8010184:	b928      	cbnz	r0, 8010192 <__multadd+0x5a>
 8010186:	4602      	mov	r2, r0
 8010188:	4b0c      	ldr	r3, [pc, #48]	@ (80101bc <__multadd+0x84>)
 801018a:	480d      	ldr	r0, [pc, #52]	@ (80101c0 <__multadd+0x88>)
 801018c:	21ba      	movs	r1, #186	@ 0xba
 801018e:	f000 ffeb 	bl	8011168 <__assert_func>
 8010192:	6922      	ldr	r2, [r4, #16]
 8010194:	3202      	adds	r2, #2
 8010196:	f104 010c 	add.w	r1, r4, #12
 801019a:	0092      	lsls	r2, r2, #2
 801019c:	300c      	adds	r0, #12
 801019e:	f7ff fb08 	bl	800f7b2 <memcpy>
 80101a2:	4621      	mov	r1, r4
 80101a4:	4638      	mov	r0, r7
 80101a6:	f7ff ffa5 	bl	80100f4 <_Bfree>
 80101aa:	4644      	mov	r4, r8
 80101ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101b0:	3501      	adds	r5, #1
 80101b2:	615e      	str	r6, [r3, #20]
 80101b4:	6125      	str	r5, [r4, #16]
 80101b6:	4620      	mov	r0, r4
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	08012c09 	.word	0x08012c09
 80101c0:	08012c91 	.word	0x08012c91

080101c4 <__s2b>:
 80101c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c8:	460c      	mov	r4, r1
 80101ca:	4615      	mov	r5, r2
 80101cc:	461f      	mov	r7, r3
 80101ce:	2209      	movs	r2, #9
 80101d0:	3308      	adds	r3, #8
 80101d2:	4606      	mov	r6, r0
 80101d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80101d8:	2100      	movs	r1, #0
 80101da:	2201      	movs	r2, #1
 80101dc:	429a      	cmp	r2, r3
 80101de:	db09      	blt.n	80101f4 <__s2b+0x30>
 80101e0:	4630      	mov	r0, r6
 80101e2:	f7ff ff47 	bl	8010074 <_Balloc>
 80101e6:	b940      	cbnz	r0, 80101fa <__s2b+0x36>
 80101e8:	4602      	mov	r2, r0
 80101ea:	4b19      	ldr	r3, [pc, #100]	@ (8010250 <__s2b+0x8c>)
 80101ec:	4819      	ldr	r0, [pc, #100]	@ (8010254 <__s2b+0x90>)
 80101ee:	21d3      	movs	r1, #211	@ 0xd3
 80101f0:	f000 ffba 	bl	8011168 <__assert_func>
 80101f4:	0052      	lsls	r2, r2, #1
 80101f6:	3101      	adds	r1, #1
 80101f8:	e7f0      	b.n	80101dc <__s2b+0x18>
 80101fa:	9b08      	ldr	r3, [sp, #32]
 80101fc:	6143      	str	r3, [r0, #20]
 80101fe:	2d09      	cmp	r5, #9
 8010200:	f04f 0301 	mov.w	r3, #1
 8010204:	6103      	str	r3, [r0, #16]
 8010206:	dd16      	ble.n	8010236 <__s2b+0x72>
 8010208:	f104 0909 	add.w	r9, r4, #9
 801020c:	46c8      	mov	r8, r9
 801020e:	442c      	add	r4, r5
 8010210:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010214:	4601      	mov	r1, r0
 8010216:	3b30      	subs	r3, #48	@ 0x30
 8010218:	220a      	movs	r2, #10
 801021a:	4630      	mov	r0, r6
 801021c:	f7ff ff8c 	bl	8010138 <__multadd>
 8010220:	45a0      	cmp	r8, r4
 8010222:	d1f5      	bne.n	8010210 <__s2b+0x4c>
 8010224:	f1a5 0408 	sub.w	r4, r5, #8
 8010228:	444c      	add	r4, r9
 801022a:	1b2d      	subs	r5, r5, r4
 801022c:	1963      	adds	r3, r4, r5
 801022e:	42bb      	cmp	r3, r7
 8010230:	db04      	blt.n	801023c <__s2b+0x78>
 8010232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010236:	340a      	adds	r4, #10
 8010238:	2509      	movs	r5, #9
 801023a:	e7f6      	b.n	801022a <__s2b+0x66>
 801023c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010240:	4601      	mov	r1, r0
 8010242:	3b30      	subs	r3, #48	@ 0x30
 8010244:	220a      	movs	r2, #10
 8010246:	4630      	mov	r0, r6
 8010248:	f7ff ff76 	bl	8010138 <__multadd>
 801024c:	e7ee      	b.n	801022c <__s2b+0x68>
 801024e:	bf00      	nop
 8010250:	08012c09 	.word	0x08012c09
 8010254:	08012c91 	.word	0x08012c91

08010258 <__hi0bits>:
 8010258:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801025c:	4603      	mov	r3, r0
 801025e:	bf36      	itet	cc
 8010260:	0403      	lslcc	r3, r0, #16
 8010262:	2000      	movcs	r0, #0
 8010264:	2010      	movcc	r0, #16
 8010266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801026a:	bf3c      	itt	cc
 801026c:	021b      	lslcc	r3, r3, #8
 801026e:	3008      	addcc	r0, #8
 8010270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010274:	bf3c      	itt	cc
 8010276:	011b      	lslcc	r3, r3, #4
 8010278:	3004      	addcc	r0, #4
 801027a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801027e:	bf3c      	itt	cc
 8010280:	009b      	lslcc	r3, r3, #2
 8010282:	3002      	addcc	r0, #2
 8010284:	2b00      	cmp	r3, #0
 8010286:	db05      	blt.n	8010294 <__hi0bits+0x3c>
 8010288:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801028c:	f100 0001 	add.w	r0, r0, #1
 8010290:	bf08      	it	eq
 8010292:	2020      	moveq	r0, #32
 8010294:	4770      	bx	lr

08010296 <__lo0bits>:
 8010296:	6803      	ldr	r3, [r0, #0]
 8010298:	4602      	mov	r2, r0
 801029a:	f013 0007 	ands.w	r0, r3, #7
 801029e:	d00b      	beq.n	80102b8 <__lo0bits+0x22>
 80102a0:	07d9      	lsls	r1, r3, #31
 80102a2:	d421      	bmi.n	80102e8 <__lo0bits+0x52>
 80102a4:	0798      	lsls	r0, r3, #30
 80102a6:	bf49      	itett	mi
 80102a8:	085b      	lsrmi	r3, r3, #1
 80102aa:	089b      	lsrpl	r3, r3, #2
 80102ac:	2001      	movmi	r0, #1
 80102ae:	6013      	strmi	r3, [r2, #0]
 80102b0:	bf5c      	itt	pl
 80102b2:	6013      	strpl	r3, [r2, #0]
 80102b4:	2002      	movpl	r0, #2
 80102b6:	4770      	bx	lr
 80102b8:	b299      	uxth	r1, r3
 80102ba:	b909      	cbnz	r1, 80102c0 <__lo0bits+0x2a>
 80102bc:	0c1b      	lsrs	r3, r3, #16
 80102be:	2010      	movs	r0, #16
 80102c0:	b2d9      	uxtb	r1, r3
 80102c2:	b909      	cbnz	r1, 80102c8 <__lo0bits+0x32>
 80102c4:	3008      	adds	r0, #8
 80102c6:	0a1b      	lsrs	r3, r3, #8
 80102c8:	0719      	lsls	r1, r3, #28
 80102ca:	bf04      	itt	eq
 80102cc:	091b      	lsreq	r3, r3, #4
 80102ce:	3004      	addeq	r0, #4
 80102d0:	0799      	lsls	r1, r3, #30
 80102d2:	bf04      	itt	eq
 80102d4:	089b      	lsreq	r3, r3, #2
 80102d6:	3002      	addeq	r0, #2
 80102d8:	07d9      	lsls	r1, r3, #31
 80102da:	d403      	bmi.n	80102e4 <__lo0bits+0x4e>
 80102dc:	085b      	lsrs	r3, r3, #1
 80102de:	f100 0001 	add.w	r0, r0, #1
 80102e2:	d003      	beq.n	80102ec <__lo0bits+0x56>
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	4770      	bx	lr
 80102e8:	2000      	movs	r0, #0
 80102ea:	4770      	bx	lr
 80102ec:	2020      	movs	r0, #32
 80102ee:	4770      	bx	lr

080102f0 <__i2b>:
 80102f0:	b510      	push	{r4, lr}
 80102f2:	460c      	mov	r4, r1
 80102f4:	2101      	movs	r1, #1
 80102f6:	f7ff febd 	bl	8010074 <_Balloc>
 80102fa:	4602      	mov	r2, r0
 80102fc:	b928      	cbnz	r0, 801030a <__i2b+0x1a>
 80102fe:	4b05      	ldr	r3, [pc, #20]	@ (8010314 <__i2b+0x24>)
 8010300:	4805      	ldr	r0, [pc, #20]	@ (8010318 <__i2b+0x28>)
 8010302:	f240 1145 	movw	r1, #325	@ 0x145
 8010306:	f000 ff2f 	bl	8011168 <__assert_func>
 801030a:	2301      	movs	r3, #1
 801030c:	6144      	str	r4, [r0, #20]
 801030e:	6103      	str	r3, [r0, #16]
 8010310:	bd10      	pop	{r4, pc}
 8010312:	bf00      	nop
 8010314:	08012c09 	.word	0x08012c09
 8010318:	08012c91 	.word	0x08012c91

0801031c <__multiply>:
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	4614      	mov	r4, r2
 8010322:	690a      	ldr	r2, [r1, #16]
 8010324:	6923      	ldr	r3, [r4, #16]
 8010326:	429a      	cmp	r2, r3
 8010328:	bfa8      	it	ge
 801032a:	4623      	movge	r3, r4
 801032c:	460f      	mov	r7, r1
 801032e:	bfa4      	itt	ge
 8010330:	460c      	movge	r4, r1
 8010332:	461f      	movge	r7, r3
 8010334:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010338:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	6861      	ldr	r1, [r4, #4]
 8010340:	eb0a 0609 	add.w	r6, sl, r9
 8010344:	42b3      	cmp	r3, r6
 8010346:	b085      	sub	sp, #20
 8010348:	bfb8      	it	lt
 801034a:	3101      	addlt	r1, #1
 801034c:	f7ff fe92 	bl	8010074 <_Balloc>
 8010350:	b930      	cbnz	r0, 8010360 <__multiply+0x44>
 8010352:	4602      	mov	r2, r0
 8010354:	4b44      	ldr	r3, [pc, #272]	@ (8010468 <__multiply+0x14c>)
 8010356:	4845      	ldr	r0, [pc, #276]	@ (801046c <__multiply+0x150>)
 8010358:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801035c:	f000 ff04 	bl	8011168 <__assert_func>
 8010360:	f100 0514 	add.w	r5, r0, #20
 8010364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010368:	462b      	mov	r3, r5
 801036a:	2200      	movs	r2, #0
 801036c:	4543      	cmp	r3, r8
 801036e:	d321      	bcc.n	80103b4 <__multiply+0x98>
 8010370:	f107 0114 	add.w	r1, r7, #20
 8010374:	f104 0214 	add.w	r2, r4, #20
 8010378:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801037c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010380:	9302      	str	r3, [sp, #8]
 8010382:	1b13      	subs	r3, r2, r4
 8010384:	3b15      	subs	r3, #21
 8010386:	f023 0303 	bic.w	r3, r3, #3
 801038a:	3304      	adds	r3, #4
 801038c:	f104 0715 	add.w	r7, r4, #21
 8010390:	42ba      	cmp	r2, r7
 8010392:	bf38      	it	cc
 8010394:	2304      	movcc	r3, #4
 8010396:	9301      	str	r3, [sp, #4]
 8010398:	9b02      	ldr	r3, [sp, #8]
 801039a:	9103      	str	r1, [sp, #12]
 801039c:	428b      	cmp	r3, r1
 801039e:	d80c      	bhi.n	80103ba <__multiply+0x9e>
 80103a0:	2e00      	cmp	r6, #0
 80103a2:	dd03      	ble.n	80103ac <__multiply+0x90>
 80103a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d05b      	beq.n	8010464 <__multiply+0x148>
 80103ac:	6106      	str	r6, [r0, #16]
 80103ae:	b005      	add	sp, #20
 80103b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b4:	f843 2b04 	str.w	r2, [r3], #4
 80103b8:	e7d8      	b.n	801036c <__multiply+0x50>
 80103ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80103be:	f1ba 0f00 	cmp.w	sl, #0
 80103c2:	d024      	beq.n	801040e <__multiply+0xf2>
 80103c4:	f104 0e14 	add.w	lr, r4, #20
 80103c8:	46a9      	mov	r9, r5
 80103ca:	f04f 0c00 	mov.w	ip, #0
 80103ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80103d2:	f8d9 3000 	ldr.w	r3, [r9]
 80103d6:	fa1f fb87 	uxth.w	fp, r7
 80103da:	b29b      	uxth	r3, r3
 80103dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80103e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80103e4:	f8d9 7000 	ldr.w	r7, [r9]
 80103e8:	4463      	add	r3, ip
 80103ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80103ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80103f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80103fc:	4572      	cmp	r2, lr
 80103fe:	f849 3b04 	str.w	r3, [r9], #4
 8010402:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010406:	d8e2      	bhi.n	80103ce <__multiply+0xb2>
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	f845 c003 	str.w	ip, [r5, r3]
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010414:	3104      	adds	r1, #4
 8010416:	f1b9 0f00 	cmp.w	r9, #0
 801041a:	d021      	beq.n	8010460 <__multiply+0x144>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	f104 0c14 	add.w	ip, r4, #20
 8010422:	46ae      	mov	lr, r5
 8010424:	f04f 0a00 	mov.w	sl, #0
 8010428:	f8bc b000 	ldrh.w	fp, [ip]
 801042c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010430:	fb09 770b 	mla	r7, r9, fp, r7
 8010434:	4457      	add	r7, sl
 8010436:	b29b      	uxth	r3, r3
 8010438:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801043c:	f84e 3b04 	str.w	r3, [lr], #4
 8010440:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010444:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010448:	f8be 3000 	ldrh.w	r3, [lr]
 801044c:	fb09 330a 	mla	r3, r9, sl, r3
 8010450:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010454:	4562      	cmp	r2, ip
 8010456:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801045a:	d8e5      	bhi.n	8010428 <__multiply+0x10c>
 801045c:	9f01      	ldr	r7, [sp, #4]
 801045e:	51eb      	str	r3, [r5, r7]
 8010460:	3504      	adds	r5, #4
 8010462:	e799      	b.n	8010398 <__multiply+0x7c>
 8010464:	3e01      	subs	r6, #1
 8010466:	e79b      	b.n	80103a0 <__multiply+0x84>
 8010468:	08012c09 	.word	0x08012c09
 801046c:	08012c91 	.word	0x08012c91

08010470 <__pow5mult>:
 8010470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010474:	4615      	mov	r5, r2
 8010476:	f012 0203 	ands.w	r2, r2, #3
 801047a:	4607      	mov	r7, r0
 801047c:	460e      	mov	r6, r1
 801047e:	d007      	beq.n	8010490 <__pow5mult+0x20>
 8010480:	4c25      	ldr	r4, [pc, #148]	@ (8010518 <__pow5mult+0xa8>)
 8010482:	3a01      	subs	r2, #1
 8010484:	2300      	movs	r3, #0
 8010486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801048a:	f7ff fe55 	bl	8010138 <__multadd>
 801048e:	4606      	mov	r6, r0
 8010490:	10ad      	asrs	r5, r5, #2
 8010492:	d03d      	beq.n	8010510 <__pow5mult+0xa0>
 8010494:	69fc      	ldr	r4, [r7, #28]
 8010496:	b97c      	cbnz	r4, 80104b8 <__pow5mult+0x48>
 8010498:	2010      	movs	r0, #16
 801049a:	f000 fe97 	bl	80111cc <malloc>
 801049e:	4602      	mov	r2, r0
 80104a0:	61f8      	str	r0, [r7, #28]
 80104a2:	b928      	cbnz	r0, 80104b0 <__pow5mult+0x40>
 80104a4:	4b1d      	ldr	r3, [pc, #116]	@ (801051c <__pow5mult+0xac>)
 80104a6:	481e      	ldr	r0, [pc, #120]	@ (8010520 <__pow5mult+0xb0>)
 80104a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80104ac:	f000 fe5c 	bl	8011168 <__assert_func>
 80104b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104b4:	6004      	str	r4, [r0, #0]
 80104b6:	60c4      	str	r4, [r0, #12]
 80104b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80104bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104c0:	b94c      	cbnz	r4, 80104d6 <__pow5mult+0x66>
 80104c2:	f240 2171 	movw	r1, #625	@ 0x271
 80104c6:	4638      	mov	r0, r7
 80104c8:	f7ff ff12 	bl	80102f0 <__i2b>
 80104cc:	2300      	movs	r3, #0
 80104ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80104d2:	4604      	mov	r4, r0
 80104d4:	6003      	str	r3, [r0, #0]
 80104d6:	f04f 0900 	mov.w	r9, #0
 80104da:	07eb      	lsls	r3, r5, #31
 80104dc:	d50a      	bpl.n	80104f4 <__pow5mult+0x84>
 80104de:	4631      	mov	r1, r6
 80104e0:	4622      	mov	r2, r4
 80104e2:	4638      	mov	r0, r7
 80104e4:	f7ff ff1a 	bl	801031c <__multiply>
 80104e8:	4631      	mov	r1, r6
 80104ea:	4680      	mov	r8, r0
 80104ec:	4638      	mov	r0, r7
 80104ee:	f7ff fe01 	bl	80100f4 <_Bfree>
 80104f2:	4646      	mov	r6, r8
 80104f4:	106d      	asrs	r5, r5, #1
 80104f6:	d00b      	beq.n	8010510 <__pow5mult+0xa0>
 80104f8:	6820      	ldr	r0, [r4, #0]
 80104fa:	b938      	cbnz	r0, 801050c <__pow5mult+0x9c>
 80104fc:	4622      	mov	r2, r4
 80104fe:	4621      	mov	r1, r4
 8010500:	4638      	mov	r0, r7
 8010502:	f7ff ff0b 	bl	801031c <__multiply>
 8010506:	6020      	str	r0, [r4, #0]
 8010508:	f8c0 9000 	str.w	r9, [r0]
 801050c:	4604      	mov	r4, r0
 801050e:	e7e4      	b.n	80104da <__pow5mult+0x6a>
 8010510:	4630      	mov	r0, r6
 8010512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010516:	bf00      	nop
 8010518:	08012cec 	.word	0x08012cec
 801051c:	08012c7a 	.word	0x08012c7a
 8010520:	08012c91 	.word	0x08012c91

08010524 <__lshift>:
 8010524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010528:	460c      	mov	r4, r1
 801052a:	6849      	ldr	r1, [r1, #4]
 801052c:	6923      	ldr	r3, [r4, #16]
 801052e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	4607      	mov	r7, r0
 8010536:	4691      	mov	r9, r2
 8010538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801053c:	f108 0601 	add.w	r6, r8, #1
 8010540:	42b3      	cmp	r3, r6
 8010542:	db0b      	blt.n	801055c <__lshift+0x38>
 8010544:	4638      	mov	r0, r7
 8010546:	f7ff fd95 	bl	8010074 <_Balloc>
 801054a:	4605      	mov	r5, r0
 801054c:	b948      	cbnz	r0, 8010562 <__lshift+0x3e>
 801054e:	4602      	mov	r2, r0
 8010550:	4b28      	ldr	r3, [pc, #160]	@ (80105f4 <__lshift+0xd0>)
 8010552:	4829      	ldr	r0, [pc, #164]	@ (80105f8 <__lshift+0xd4>)
 8010554:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010558:	f000 fe06 	bl	8011168 <__assert_func>
 801055c:	3101      	adds	r1, #1
 801055e:	005b      	lsls	r3, r3, #1
 8010560:	e7ee      	b.n	8010540 <__lshift+0x1c>
 8010562:	2300      	movs	r3, #0
 8010564:	f100 0114 	add.w	r1, r0, #20
 8010568:	f100 0210 	add.w	r2, r0, #16
 801056c:	4618      	mov	r0, r3
 801056e:	4553      	cmp	r3, sl
 8010570:	db33      	blt.n	80105da <__lshift+0xb6>
 8010572:	6920      	ldr	r0, [r4, #16]
 8010574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010578:	f104 0314 	add.w	r3, r4, #20
 801057c:	f019 091f 	ands.w	r9, r9, #31
 8010580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010588:	d02b      	beq.n	80105e2 <__lshift+0xbe>
 801058a:	f1c9 0e20 	rsb	lr, r9, #32
 801058e:	468a      	mov	sl, r1
 8010590:	2200      	movs	r2, #0
 8010592:	6818      	ldr	r0, [r3, #0]
 8010594:	fa00 f009 	lsl.w	r0, r0, r9
 8010598:	4310      	orrs	r0, r2
 801059a:	f84a 0b04 	str.w	r0, [sl], #4
 801059e:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a2:	459c      	cmp	ip, r3
 80105a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80105a8:	d8f3      	bhi.n	8010592 <__lshift+0x6e>
 80105aa:	ebac 0304 	sub.w	r3, ip, r4
 80105ae:	3b15      	subs	r3, #21
 80105b0:	f023 0303 	bic.w	r3, r3, #3
 80105b4:	3304      	adds	r3, #4
 80105b6:	f104 0015 	add.w	r0, r4, #21
 80105ba:	4584      	cmp	ip, r0
 80105bc:	bf38      	it	cc
 80105be:	2304      	movcc	r3, #4
 80105c0:	50ca      	str	r2, [r1, r3]
 80105c2:	b10a      	cbz	r2, 80105c8 <__lshift+0xa4>
 80105c4:	f108 0602 	add.w	r6, r8, #2
 80105c8:	3e01      	subs	r6, #1
 80105ca:	4638      	mov	r0, r7
 80105cc:	612e      	str	r6, [r5, #16]
 80105ce:	4621      	mov	r1, r4
 80105d0:	f7ff fd90 	bl	80100f4 <_Bfree>
 80105d4:	4628      	mov	r0, r5
 80105d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105da:	f842 0f04 	str.w	r0, [r2, #4]!
 80105de:	3301      	adds	r3, #1
 80105e0:	e7c5      	b.n	801056e <__lshift+0x4a>
 80105e2:	3904      	subs	r1, #4
 80105e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80105ec:	459c      	cmp	ip, r3
 80105ee:	d8f9      	bhi.n	80105e4 <__lshift+0xc0>
 80105f0:	e7ea      	b.n	80105c8 <__lshift+0xa4>
 80105f2:	bf00      	nop
 80105f4:	08012c09 	.word	0x08012c09
 80105f8:	08012c91 	.word	0x08012c91

080105fc <__mcmp>:
 80105fc:	690a      	ldr	r2, [r1, #16]
 80105fe:	4603      	mov	r3, r0
 8010600:	6900      	ldr	r0, [r0, #16]
 8010602:	1a80      	subs	r0, r0, r2
 8010604:	b530      	push	{r4, r5, lr}
 8010606:	d10e      	bne.n	8010626 <__mcmp+0x2a>
 8010608:	3314      	adds	r3, #20
 801060a:	3114      	adds	r1, #20
 801060c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801061c:	4295      	cmp	r5, r2
 801061e:	d003      	beq.n	8010628 <__mcmp+0x2c>
 8010620:	d205      	bcs.n	801062e <__mcmp+0x32>
 8010622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010626:	bd30      	pop	{r4, r5, pc}
 8010628:	42a3      	cmp	r3, r4
 801062a:	d3f3      	bcc.n	8010614 <__mcmp+0x18>
 801062c:	e7fb      	b.n	8010626 <__mcmp+0x2a>
 801062e:	2001      	movs	r0, #1
 8010630:	e7f9      	b.n	8010626 <__mcmp+0x2a>
	...

08010634 <__mdiff>:
 8010634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010638:	4689      	mov	r9, r1
 801063a:	4606      	mov	r6, r0
 801063c:	4611      	mov	r1, r2
 801063e:	4648      	mov	r0, r9
 8010640:	4614      	mov	r4, r2
 8010642:	f7ff ffdb 	bl	80105fc <__mcmp>
 8010646:	1e05      	subs	r5, r0, #0
 8010648:	d112      	bne.n	8010670 <__mdiff+0x3c>
 801064a:	4629      	mov	r1, r5
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff fd11 	bl	8010074 <_Balloc>
 8010652:	4602      	mov	r2, r0
 8010654:	b928      	cbnz	r0, 8010662 <__mdiff+0x2e>
 8010656:	4b3f      	ldr	r3, [pc, #252]	@ (8010754 <__mdiff+0x120>)
 8010658:	f240 2137 	movw	r1, #567	@ 0x237
 801065c:	483e      	ldr	r0, [pc, #248]	@ (8010758 <__mdiff+0x124>)
 801065e:	f000 fd83 	bl	8011168 <__assert_func>
 8010662:	2301      	movs	r3, #1
 8010664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010668:	4610      	mov	r0, r2
 801066a:	b003      	add	sp, #12
 801066c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010670:	bfbc      	itt	lt
 8010672:	464b      	movlt	r3, r9
 8010674:	46a1      	movlt	r9, r4
 8010676:	4630      	mov	r0, r6
 8010678:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801067c:	bfba      	itte	lt
 801067e:	461c      	movlt	r4, r3
 8010680:	2501      	movlt	r5, #1
 8010682:	2500      	movge	r5, #0
 8010684:	f7ff fcf6 	bl	8010074 <_Balloc>
 8010688:	4602      	mov	r2, r0
 801068a:	b918      	cbnz	r0, 8010694 <__mdiff+0x60>
 801068c:	4b31      	ldr	r3, [pc, #196]	@ (8010754 <__mdiff+0x120>)
 801068e:	f240 2145 	movw	r1, #581	@ 0x245
 8010692:	e7e3      	b.n	801065c <__mdiff+0x28>
 8010694:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010698:	6926      	ldr	r6, [r4, #16]
 801069a:	60c5      	str	r5, [r0, #12]
 801069c:	f109 0310 	add.w	r3, r9, #16
 80106a0:	f109 0514 	add.w	r5, r9, #20
 80106a4:	f104 0e14 	add.w	lr, r4, #20
 80106a8:	f100 0b14 	add.w	fp, r0, #20
 80106ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80106b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	46d9      	mov	r9, fp
 80106b8:	f04f 0c00 	mov.w	ip, #0
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80106c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80106c6:	9301      	str	r3, [sp, #4]
 80106c8:	fa1f f38a 	uxth.w	r3, sl
 80106cc:	4619      	mov	r1, r3
 80106ce:	b283      	uxth	r3, r0
 80106d0:	1acb      	subs	r3, r1, r3
 80106d2:	0c00      	lsrs	r0, r0, #16
 80106d4:	4463      	add	r3, ip
 80106d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80106da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80106de:	b29b      	uxth	r3, r3
 80106e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80106e4:	4576      	cmp	r6, lr
 80106e6:	f849 3b04 	str.w	r3, [r9], #4
 80106ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80106ee:	d8e5      	bhi.n	80106bc <__mdiff+0x88>
 80106f0:	1b33      	subs	r3, r6, r4
 80106f2:	3b15      	subs	r3, #21
 80106f4:	f023 0303 	bic.w	r3, r3, #3
 80106f8:	3415      	adds	r4, #21
 80106fa:	3304      	adds	r3, #4
 80106fc:	42a6      	cmp	r6, r4
 80106fe:	bf38      	it	cc
 8010700:	2304      	movcc	r3, #4
 8010702:	441d      	add	r5, r3
 8010704:	445b      	add	r3, fp
 8010706:	461e      	mov	r6, r3
 8010708:	462c      	mov	r4, r5
 801070a:	4544      	cmp	r4, r8
 801070c:	d30e      	bcc.n	801072c <__mdiff+0xf8>
 801070e:	f108 0103 	add.w	r1, r8, #3
 8010712:	1b49      	subs	r1, r1, r5
 8010714:	f021 0103 	bic.w	r1, r1, #3
 8010718:	3d03      	subs	r5, #3
 801071a:	45a8      	cmp	r8, r5
 801071c:	bf38      	it	cc
 801071e:	2100      	movcc	r1, #0
 8010720:	440b      	add	r3, r1
 8010722:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010726:	b191      	cbz	r1, 801074e <__mdiff+0x11a>
 8010728:	6117      	str	r7, [r2, #16]
 801072a:	e79d      	b.n	8010668 <__mdiff+0x34>
 801072c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010730:	46e6      	mov	lr, ip
 8010732:	0c08      	lsrs	r0, r1, #16
 8010734:	fa1c fc81 	uxtah	ip, ip, r1
 8010738:	4471      	add	r1, lr
 801073a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801073e:	b289      	uxth	r1, r1
 8010740:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010744:	f846 1b04 	str.w	r1, [r6], #4
 8010748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801074c:	e7dd      	b.n	801070a <__mdiff+0xd6>
 801074e:	3f01      	subs	r7, #1
 8010750:	e7e7      	b.n	8010722 <__mdiff+0xee>
 8010752:	bf00      	nop
 8010754:	08012c09 	.word	0x08012c09
 8010758:	08012c91 	.word	0x08012c91

0801075c <__ulp>:
 801075c:	b082      	sub	sp, #8
 801075e:	ed8d 0b00 	vstr	d0, [sp]
 8010762:	9a01      	ldr	r2, [sp, #4]
 8010764:	4b0f      	ldr	r3, [pc, #60]	@ (80107a4 <__ulp+0x48>)
 8010766:	4013      	ands	r3, r2
 8010768:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801076c:	2b00      	cmp	r3, #0
 801076e:	dc08      	bgt.n	8010782 <__ulp+0x26>
 8010770:	425b      	negs	r3, r3
 8010772:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010776:	ea4f 5223 	mov.w	r2, r3, asr #20
 801077a:	da04      	bge.n	8010786 <__ulp+0x2a>
 801077c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010780:	4113      	asrs	r3, r2
 8010782:	2200      	movs	r2, #0
 8010784:	e008      	b.n	8010798 <__ulp+0x3c>
 8010786:	f1a2 0314 	sub.w	r3, r2, #20
 801078a:	2b1e      	cmp	r3, #30
 801078c:	bfda      	itte	le
 801078e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010792:	40da      	lsrle	r2, r3
 8010794:	2201      	movgt	r2, #1
 8010796:	2300      	movs	r3, #0
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	ec41 0b10 	vmov	d0, r0, r1
 80107a0:	b002      	add	sp, #8
 80107a2:	4770      	bx	lr
 80107a4:	7ff00000 	.word	0x7ff00000

080107a8 <__b2d>:
 80107a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ac:	6906      	ldr	r6, [r0, #16]
 80107ae:	f100 0814 	add.w	r8, r0, #20
 80107b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80107b6:	1f37      	subs	r7, r6, #4
 80107b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80107bc:	4610      	mov	r0, r2
 80107be:	f7ff fd4b 	bl	8010258 <__hi0bits>
 80107c2:	f1c0 0320 	rsb	r3, r0, #32
 80107c6:	280a      	cmp	r0, #10
 80107c8:	600b      	str	r3, [r1, #0]
 80107ca:	491b      	ldr	r1, [pc, #108]	@ (8010838 <__b2d+0x90>)
 80107cc:	dc15      	bgt.n	80107fa <__b2d+0x52>
 80107ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80107d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80107d6:	45b8      	cmp	r8, r7
 80107d8:	ea43 0501 	orr.w	r5, r3, r1
 80107dc:	bf34      	ite	cc
 80107de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80107e2:	2300      	movcs	r3, #0
 80107e4:	3015      	adds	r0, #21
 80107e6:	fa02 f000 	lsl.w	r0, r2, r0
 80107ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80107ee:	4303      	orrs	r3, r0
 80107f0:	461c      	mov	r4, r3
 80107f2:	ec45 4b10 	vmov	d0, r4, r5
 80107f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107fa:	45b8      	cmp	r8, r7
 80107fc:	bf3a      	itte	cc
 80107fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010802:	f1a6 0708 	subcc.w	r7, r6, #8
 8010806:	2300      	movcs	r3, #0
 8010808:	380b      	subs	r0, #11
 801080a:	d012      	beq.n	8010832 <__b2d+0x8a>
 801080c:	f1c0 0120 	rsb	r1, r0, #32
 8010810:	fa23 f401 	lsr.w	r4, r3, r1
 8010814:	4082      	lsls	r2, r0
 8010816:	4322      	orrs	r2, r4
 8010818:	4547      	cmp	r7, r8
 801081a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801081e:	bf8c      	ite	hi
 8010820:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010824:	2200      	movls	r2, #0
 8010826:	4083      	lsls	r3, r0
 8010828:	40ca      	lsrs	r2, r1
 801082a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801082e:	4313      	orrs	r3, r2
 8010830:	e7de      	b.n	80107f0 <__b2d+0x48>
 8010832:	ea42 0501 	orr.w	r5, r2, r1
 8010836:	e7db      	b.n	80107f0 <__b2d+0x48>
 8010838:	3ff00000 	.word	0x3ff00000

0801083c <__d2b>:
 801083c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010840:	460f      	mov	r7, r1
 8010842:	2101      	movs	r1, #1
 8010844:	ec59 8b10 	vmov	r8, r9, d0
 8010848:	4616      	mov	r6, r2
 801084a:	f7ff fc13 	bl	8010074 <_Balloc>
 801084e:	4604      	mov	r4, r0
 8010850:	b930      	cbnz	r0, 8010860 <__d2b+0x24>
 8010852:	4602      	mov	r2, r0
 8010854:	4b23      	ldr	r3, [pc, #140]	@ (80108e4 <__d2b+0xa8>)
 8010856:	4824      	ldr	r0, [pc, #144]	@ (80108e8 <__d2b+0xac>)
 8010858:	f240 310f 	movw	r1, #783	@ 0x30f
 801085c:	f000 fc84 	bl	8011168 <__assert_func>
 8010860:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010868:	b10d      	cbz	r5, 801086e <__d2b+0x32>
 801086a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	f1b8 0300 	subs.w	r3, r8, #0
 8010874:	d023      	beq.n	80108be <__d2b+0x82>
 8010876:	4668      	mov	r0, sp
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	f7ff fd0c 	bl	8010296 <__lo0bits>
 801087e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010882:	b1d0      	cbz	r0, 80108ba <__d2b+0x7e>
 8010884:	f1c0 0320 	rsb	r3, r0, #32
 8010888:	fa02 f303 	lsl.w	r3, r2, r3
 801088c:	430b      	orrs	r3, r1
 801088e:	40c2      	lsrs	r2, r0
 8010890:	6163      	str	r3, [r4, #20]
 8010892:	9201      	str	r2, [sp, #4]
 8010894:	9b01      	ldr	r3, [sp, #4]
 8010896:	61a3      	str	r3, [r4, #24]
 8010898:	2b00      	cmp	r3, #0
 801089a:	bf0c      	ite	eq
 801089c:	2201      	moveq	r2, #1
 801089e:	2202      	movne	r2, #2
 80108a0:	6122      	str	r2, [r4, #16]
 80108a2:	b1a5      	cbz	r5, 80108ce <__d2b+0x92>
 80108a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108a8:	4405      	add	r5, r0
 80108aa:	603d      	str	r5, [r7, #0]
 80108ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80108b0:	6030      	str	r0, [r6, #0]
 80108b2:	4620      	mov	r0, r4
 80108b4:	b003      	add	sp, #12
 80108b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ba:	6161      	str	r1, [r4, #20]
 80108bc:	e7ea      	b.n	8010894 <__d2b+0x58>
 80108be:	a801      	add	r0, sp, #4
 80108c0:	f7ff fce9 	bl	8010296 <__lo0bits>
 80108c4:	9b01      	ldr	r3, [sp, #4]
 80108c6:	6163      	str	r3, [r4, #20]
 80108c8:	3020      	adds	r0, #32
 80108ca:	2201      	movs	r2, #1
 80108cc:	e7e8      	b.n	80108a0 <__d2b+0x64>
 80108ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108d6:	6038      	str	r0, [r7, #0]
 80108d8:	6918      	ldr	r0, [r3, #16]
 80108da:	f7ff fcbd 	bl	8010258 <__hi0bits>
 80108de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108e2:	e7e5      	b.n	80108b0 <__d2b+0x74>
 80108e4:	08012c09 	.word	0x08012c09
 80108e8:	08012c91 	.word	0x08012c91

080108ec <__ratio>:
 80108ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f0:	b085      	sub	sp, #20
 80108f2:	e9cd 1000 	strd	r1, r0, [sp]
 80108f6:	a902      	add	r1, sp, #8
 80108f8:	f7ff ff56 	bl	80107a8 <__b2d>
 80108fc:	9800      	ldr	r0, [sp, #0]
 80108fe:	a903      	add	r1, sp, #12
 8010900:	ec55 4b10 	vmov	r4, r5, d0
 8010904:	f7ff ff50 	bl	80107a8 <__b2d>
 8010908:	9b01      	ldr	r3, [sp, #4]
 801090a:	6919      	ldr	r1, [r3, #16]
 801090c:	9b00      	ldr	r3, [sp, #0]
 801090e:	691b      	ldr	r3, [r3, #16]
 8010910:	1ac9      	subs	r1, r1, r3
 8010912:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010916:	1a9b      	subs	r3, r3, r2
 8010918:	ec5b ab10 	vmov	sl, fp, d0
 801091c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010920:	2b00      	cmp	r3, #0
 8010922:	bfce      	itee	gt
 8010924:	462a      	movgt	r2, r5
 8010926:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801092a:	465a      	movle	r2, fp
 801092c:	462f      	mov	r7, r5
 801092e:	46d9      	mov	r9, fp
 8010930:	bfcc      	ite	gt
 8010932:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010936:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801093a:	464b      	mov	r3, r9
 801093c:	4652      	mov	r2, sl
 801093e:	4620      	mov	r0, r4
 8010940:	4639      	mov	r1, r7
 8010942:	f7ef ffdb 	bl	80008fc <__aeabi_ddiv>
 8010946:	ec41 0b10 	vmov	d0, r0, r1
 801094a:	b005      	add	sp, #20
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010950 <__copybits>:
 8010950:	3901      	subs	r1, #1
 8010952:	b570      	push	{r4, r5, r6, lr}
 8010954:	1149      	asrs	r1, r1, #5
 8010956:	6914      	ldr	r4, [r2, #16]
 8010958:	3101      	adds	r1, #1
 801095a:	f102 0314 	add.w	r3, r2, #20
 801095e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010962:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010966:	1f05      	subs	r5, r0, #4
 8010968:	42a3      	cmp	r3, r4
 801096a:	d30c      	bcc.n	8010986 <__copybits+0x36>
 801096c:	1aa3      	subs	r3, r4, r2
 801096e:	3b11      	subs	r3, #17
 8010970:	f023 0303 	bic.w	r3, r3, #3
 8010974:	3211      	adds	r2, #17
 8010976:	42a2      	cmp	r2, r4
 8010978:	bf88      	it	hi
 801097a:	2300      	movhi	r3, #0
 801097c:	4418      	add	r0, r3
 801097e:	2300      	movs	r3, #0
 8010980:	4288      	cmp	r0, r1
 8010982:	d305      	bcc.n	8010990 <__copybits+0x40>
 8010984:	bd70      	pop	{r4, r5, r6, pc}
 8010986:	f853 6b04 	ldr.w	r6, [r3], #4
 801098a:	f845 6f04 	str.w	r6, [r5, #4]!
 801098e:	e7eb      	b.n	8010968 <__copybits+0x18>
 8010990:	f840 3b04 	str.w	r3, [r0], #4
 8010994:	e7f4      	b.n	8010980 <__copybits+0x30>

08010996 <__any_on>:
 8010996:	f100 0214 	add.w	r2, r0, #20
 801099a:	6900      	ldr	r0, [r0, #16]
 801099c:	114b      	asrs	r3, r1, #5
 801099e:	4298      	cmp	r0, r3
 80109a0:	b510      	push	{r4, lr}
 80109a2:	db11      	blt.n	80109c8 <__any_on+0x32>
 80109a4:	dd0a      	ble.n	80109bc <__any_on+0x26>
 80109a6:	f011 011f 	ands.w	r1, r1, #31
 80109aa:	d007      	beq.n	80109bc <__any_on+0x26>
 80109ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80109b0:	fa24 f001 	lsr.w	r0, r4, r1
 80109b4:	fa00 f101 	lsl.w	r1, r0, r1
 80109b8:	428c      	cmp	r4, r1
 80109ba:	d10b      	bne.n	80109d4 <__any_on+0x3e>
 80109bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d803      	bhi.n	80109cc <__any_on+0x36>
 80109c4:	2000      	movs	r0, #0
 80109c6:	bd10      	pop	{r4, pc}
 80109c8:	4603      	mov	r3, r0
 80109ca:	e7f7      	b.n	80109bc <__any_on+0x26>
 80109cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109d0:	2900      	cmp	r1, #0
 80109d2:	d0f5      	beq.n	80109c0 <__any_on+0x2a>
 80109d4:	2001      	movs	r0, #1
 80109d6:	e7f6      	b.n	80109c6 <__any_on+0x30>

080109d8 <__ascii_wctomb>:
 80109d8:	4603      	mov	r3, r0
 80109da:	4608      	mov	r0, r1
 80109dc:	b141      	cbz	r1, 80109f0 <__ascii_wctomb+0x18>
 80109de:	2aff      	cmp	r2, #255	@ 0xff
 80109e0:	d904      	bls.n	80109ec <__ascii_wctomb+0x14>
 80109e2:	228a      	movs	r2, #138	@ 0x8a
 80109e4:	601a      	str	r2, [r3, #0]
 80109e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80109ea:	4770      	bx	lr
 80109ec:	700a      	strb	r2, [r1, #0]
 80109ee:	2001      	movs	r0, #1
 80109f0:	4770      	bx	lr

080109f2 <__ssputs_r>:
 80109f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f6:	688e      	ldr	r6, [r1, #8]
 80109f8:	461f      	mov	r7, r3
 80109fa:	42be      	cmp	r6, r7
 80109fc:	680b      	ldr	r3, [r1, #0]
 80109fe:	4682      	mov	sl, r0
 8010a00:	460c      	mov	r4, r1
 8010a02:	4690      	mov	r8, r2
 8010a04:	d82d      	bhi.n	8010a62 <__ssputs_r+0x70>
 8010a06:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a0a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a0e:	d026      	beq.n	8010a5e <__ssputs_r+0x6c>
 8010a10:	6965      	ldr	r5, [r4, #20]
 8010a12:	6909      	ldr	r1, [r1, #16]
 8010a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a18:	eba3 0901 	sub.w	r9, r3, r1
 8010a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a20:	1c7b      	adds	r3, r7, #1
 8010a22:	444b      	add	r3, r9
 8010a24:	106d      	asrs	r5, r5, #1
 8010a26:	429d      	cmp	r5, r3
 8010a28:	bf38      	it	cc
 8010a2a:	461d      	movcc	r5, r3
 8010a2c:	0553      	lsls	r3, r2, #21
 8010a2e:	d527      	bpl.n	8010a80 <__ssputs_r+0x8e>
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7ff fa81 	bl	800ff38 <_malloc_r>
 8010a36:	4606      	mov	r6, r0
 8010a38:	b360      	cbz	r0, 8010a94 <__ssputs_r+0xa2>
 8010a3a:	6921      	ldr	r1, [r4, #16]
 8010a3c:	464a      	mov	r2, r9
 8010a3e:	f7fe feb8 	bl	800f7b2 <memcpy>
 8010a42:	89a3      	ldrh	r3, [r4, #12]
 8010a44:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a4c:	81a3      	strh	r3, [r4, #12]
 8010a4e:	6126      	str	r6, [r4, #16]
 8010a50:	6165      	str	r5, [r4, #20]
 8010a52:	444e      	add	r6, r9
 8010a54:	eba5 0509 	sub.w	r5, r5, r9
 8010a58:	6026      	str	r6, [r4, #0]
 8010a5a:	60a5      	str	r5, [r4, #8]
 8010a5c:	463e      	mov	r6, r7
 8010a5e:	42be      	cmp	r6, r7
 8010a60:	d900      	bls.n	8010a64 <__ssputs_r+0x72>
 8010a62:	463e      	mov	r6, r7
 8010a64:	6820      	ldr	r0, [r4, #0]
 8010a66:	4632      	mov	r2, r6
 8010a68:	4641      	mov	r1, r8
 8010a6a:	f000 fb53 	bl	8011114 <memmove>
 8010a6e:	68a3      	ldr	r3, [r4, #8]
 8010a70:	1b9b      	subs	r3, r3, r6
 8010a72:	60a3      	str	r3, [r4, #8]
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	4433      	add	r3, r6
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a80:	462a      	mov	r2, r5
 8010a82:	f000 fbab 	bl	80111dc <_realloc_r>
 8010a86:	4606      	mov	r6, r0
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d1e0      	bne.n	8010a4e <__ssputs_r+0x5c>
 8010a8c:	6921      	ldr	r1, [r4, #16]
 8010a8e:	4650      	mov	r0, sl
 8010a90:	f7fe feac 	bl	800f7ec <_free_r>
 8010a94:	230c      	movs	r3, #12
 8010a96:	f8ca 3000 	str.w	r3, [sl]
 8010a9a:	89a3      	ldrh	r3, [r4, #12]
 8010a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aa0:	81a3      	strh	r3, [r4, #12]
 8010aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010aa6:	e7e9      	b.n	8010a7c <__ssputs_r+0x8a>

08010aa8 <_svfiprintf_r>:
 8010aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	4698      	mov	r8, r3
 8010aae:	898b      	ldrh	r3, [r1, #12]
 8010ab0:	061b      	lsls	r3, r3, #24
 8010ab2:	b09d      	sub	sp, #116	@ 0x74
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	4614      	mov	r4, r2
 8010aba:	d510      	bpl.n	8010ade <_svfiprintf_r+0x36>
 8010abc:	690b      	ldr	r3, [r1, #16]
 8010abe:	b973      	cbnz	r3, 8010ade <_svfiprintf_r+0x36>
 8010ac0:	2140      	movs	r1, #64	@ 0x40
 8010ac2:	f7ff fa39 	bl	800ff38 <_malloc_r>
 8010ac6:	6028      	str	r0, [r5, #0]
 8010ac8:	6128      	str	r0, [r5, #16]
 8010aca:	b930      	cbnz	r0, 8010ada <_svfiprintf_r+0x32>
 8010acc:	230c      	movs	r3, #12
 8010ace:	603b      	str	r3, [r7, #0]
 8010ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ad4:	b01d      	add	sp, #116	@ 0x74
 8010ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ada:	2340      	movs	r3, #64	@ 0x40
 8010adc:	616b      	str	r3, [r5, #20]
 8010ade:	2300      	movs	r3, #0
 8010ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ae2:	2320      	movs	r3, #32
 8010ae4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aec:	2330      	movs	r3, #48	@ 0x30
 8010aee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010c8c <_svfiprintf_r+0x1e4>
 8010af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010af6:	f04f 0901 	mov.w	r9, #1
 8010afa:	4623      	mov	r3, r4
 8010afc:	469a      	mov	sl, r3
 8010afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b02:	b10a      	cbz	r2, 8010b08 <_svfiprintf_r+0x60>
 8010b04:	2a25      	cmp	r2, #37	@ 0x25
 8010b06:	d1f9      	bne.n	8010afc <_svfiprintf_r+0x54>
 8010b08:	ebba 0b04 	subs.w	fp, sl, r4
 8010b0c:	d00b      	beq.n	8010b26 <_svfiprintf_r+0x7e>
 8010b0e:	465b      	mov	r3, fp
 8010b10:	4622      	mov	r2, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7ff ff6c 	bl	80109f2 <__ssputs_r>
 8010b1a:	3001      	adds	r0, #1
 8010b1c:	f000 80a7 	beq.w	8010c6e <_svfiprintf_r+0x1c6>
 8010b20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b22:	445a      	add	r2, fp
 8010b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b26:	f89a 3000 	ldrb.w	r3, [sl]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f000 809f 	beq.w	8010c6e <_svfiprintf_r+0x1c6>
 8010b30:	2300      	movs	r3, #0
 8010b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b3a:	f10a 0a01 	add.w	sl, sl, #1
 8010b3e:	9304      	str	r3, [sp, #16]
 8010b40:	9307      	str	r3, [sp, #28]
 8010b42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b48:	4654      	mov	r4, sl
 8010b4a:	2205      	movs	r2, #5
 8010b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b50:	484e      	ldr	r0, [pc, #312]	@ (8010c8c <_svfiprintf_r+0x1e4>)
 8010b52:	f7ef fb9d 	bl	8000290 <memchr>
 8010b56:	9a04      	ldr	r2, [sp, #16]
 8010b58:	b9d8      	cbnz	r0, 8010b92 <_svfiprintf_r+0xea>
 8010b5a:	06d0      	lsls	r0, r2, #27
 8010b5c:	bf44      	itt	mi
 8010b5e:	2320      	movmi	r3, #32
 8010b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b64:	0711      	lsls	r1, r2, #28
 8010b66:	bf44      	itt	mi
 8010b68:	232b      	movmi	r3, #43	@ 0x2b
 8010b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b74:	d015      	beq.n	8010ba2 <_svfiprintf_r+0xfa>
 8010b76:	9a07      	ldr	r2, [sp, #28]
 8010b78:	4654      	mov	r4, sl
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	f04f 0c0a 	mov.w	ip, #10
 8010b80:	4621      	mov	r1, r4
 8010b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b86:	3b30      	subs	r3, #48	@ 0x30
 8010b88:	2b09      	cmp	r3, #9
 8010b8a:	d94b      	bls.n	8010c24 <_svfiprintf_r+0x17c>
 8010b8c:	b1b0      	cbz	r0, 8010bbc <_svfiprintf_r+0x114>
 8010b8e:	9207      	str	r2, [sp, #28]
 8010b90:	e014      	b.n	8010bbc <_svfiprintf_r+0x114>
 8010b92:	eba0 0308 	sub.w	r3, r0, r8
 8010b96:	fa09 f303 	lsl.w	r3, r9, r3
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	46a2      	mov	sl, r4
 8010ba0:	e7d2      	b.n	8010b48 <_svfiprintf_r+0xa0>
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	1d19      	adds	r1, r3, #4
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	9103      	str	r1, [sp, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	bfbb      	ittet	lt
 8010bae:	425b      	neglt	r3, r3
 8010bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8010bb4:	9307      	strge	r3, [sp, #28]
 8010bb6:	9307      	strlt	r3, [sp, #28]
 8010bb8:	bfb8      	it	lt
 8010bba:	9204      	strlt	r2, [sp, #16]
 8010bbc:	7823      	ldrb	r3, [r4, #0]
 8010bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bc0:	d10a      	bne.n	8010bd8 <_svfiprintf_r+0x130>
 8010bc2:	7863      	ldrb	r3, [r4, #1]
 8010bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bc6:	d132      	bne.n	8010c2e <_svfiprintf_r+0x186>
 8010bc8:	9b03      	ldr	r3, [sp, #12]
 8010bca:	1d1a      	adds	r2, r3, #4
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	9203      	str	r2, [sp, #12]
 8010bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bd4:	3402      	adds	r4, #2
 8010bd6:	9305      	str	r3, [sp, #20]
 8010bd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c9c <_svfiprintf_r+0x1f4>
 8010bdc:	7821      	ldrb	r1, [r4, #0]
 8010bde:	2203      	movs	r2, #3
 8010be0:	4650      	mov	r0, sl
 8010be2:	f7ef fb55 	bl	8000290 <memchr>
 8010be6:	b138      	cbz	r0, 8010bf8 <_svfiprintf_r+0x150>
 8010be8:	9b04      	ldr	r3, [sp, #16]
 8010bea:	eba0 000a 	sub.w	r0, r0, sl
 8010bee:	2240      	movs	r2, #64	@ 0x40
 8010bf0:	4082      	lsls	r2, r0
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	3401      	adds	r4, #1
 8010bf6:	9304      	str	r3, [sp, #16]
 8010bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bfc:	4824      	ldr	r0, [pc, #144]	@ (8010c90 <_svfiprintf_r+0x1e8>)
 8010bfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c02:	2206      	movs	r2, #6
 8010c04:	f7ef fb44 	bl	8000290 <memchr>
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d036      	beq.n	8010c7a <_svfiprintf_r+0x1d2>
 8010c0c:	4b21      	ldr	r3, [pc, #132]	@ (8010c94 <_svfiprintf_r+0x1ec>)
 8010c0e:	bb1b      	cbnz	r3, 8010c58 <_svfiprintf_r+0x1b0>
 8010c10:	9b03      	ldr	r3, [sp, #12]
 8010c12:	3307      	adds	r3, #7
 8010c14:	f023 0307 	bic.w	r3, r3, #7
 8010c18:	3308      	adds	r3, #8
 8010c1a:	9303      	str	r3, [sp, #12]
 8010c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1e:	4433      	add	r3, r6
 8010c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c22:	e76a      	b.n	8010afa <_svfiprintf_r+0x52>
 8010c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c28:	460c      	mov	r4, r1
 8010c2a:	2001      	movs	r0, #1
 8010c2c:	e7a8      	b.n	8010b80 <_svfiprintf_r+0xd8>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	3401      	adds	r4, #1
 8010c32:	9305      	str	r3, [sp, #20]
 8010c34:	4619      	mov	r1, r3
 8010c36:	f04f 0c0a 	mov.w	ip, #10
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c40:	3a30      	subs	r2, #48	@ 0x30
 8010c42:	2a09      	cmp	r2, #9
 8010c44:	d903      	bls.n	8010c4e <_svfiprintf_r+0x1a6>
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0c6      	beq.n	8010bd8 <_svfiprintf_r+0x130>
 8010c4a:	9105      	str	r1, [sp, #20]
 8010c4c:	e7c4      	b.n	8010bd8 <_svfiprintf_r+0x130>
 8010c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c52:	4604      	mov	r4, r0
 8010c54:	2301      	movs	r3, #1
 8010c56:	e7f0      	b.n	8010c3a <_svfiprintf_r+0x192>
 8010c58:	ab03      	add	r3, sp, #12
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	462a      	mov	r2, r5
 8010c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8010c98 <_svfiprintf_r+0x1f0>)
 8010c60:	a904      	add	r1, sp, #16
 8010c62:	4638      	mov	r0, r7
 8010c64:	f3af 8000 	nop.w
 8010c68:	1c42      	adds	r2, r0, #1
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	d1d6      	bne.n	8010c1c <_svfiprintf_r+0x174>
 8010c6e:	89ab      	ldrh	r3, [r5, #12]
 8010c70:	065b      	lsls	r3, r3, #25
 8010c72:	f53f af2d 	bmi.w	8010ad0 <_svfiprintf_r+0x28>
 8010c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c78:	e72c      	b.n	8010ad4 <_svfiprintf_r+0x2c>
 8010c7a:	ab03      	add	r3, sp, #12
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	462a      	mov	r2, r5
 8010c80:	4b05      	ldr	r3, [pc, #20]	@ (8010c98 <_svfiprintf_r+0x1f0>)
 8010c82:	a904      	add	r1, sp, #16
 8010c84:	4638      	mov	r0, r7
 8010c86:	f000 f879 	bl	8010d7c <_printf_i>
 8010c8a:	e7ed      	b.n	8010c68 <_svfiprintf_r+0x1c0>
 8010c8c:	08012de8 	.word	0x08012de8
 8010c90:	08012df2 	.word	0x08012df2
 8010c94:	00000000 	.word	0x00000000
 8010c98:	080109f3 	.word	0x080109f3
 8010c9c:	08012dee 	.word	0x08012dee

08010ca0 <_printf_common>:
 8010ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca4:	4616      	mov	r6, r2
 8010ca6:	4698      	mov	r8, r3
 8010ca8:	688a      	ldr	r2, [r1, #8]
 8010caa:	690b      	ldr	r3, [r1, #16]
 8010cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	bfb8      	it	lt
 8010cb4:	4613      	movlt	r3, r2
 8010cb6:	6033      	str	r3, [r6, #0]
 8010cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010cbc:	4607      	mov	r7, r0
 8010cbe:	460c      	mov	r4, r1
 8010cc0:	b10a      	cbz	r2, 8010cc6 <_printf_common+0x26>
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	6033      	str	r3, [r6, #0]
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	0699      	lsls	r1, r3, #26
 8010cca:	bf42      	ittt	mi
 8010ccc:	6833      	ldrmi	r3, [r6, #0]
 8010cce:	3302      	addmi	r3, #2
 8010cd0:	6033      	strmi	r3, [r6, #0]
 8010cd2:	6825      	ldr	r5, [r4, #0]
 8010cd4:	f015 0506 	ands.w	r5, r5, #6
 8010cd8:	d106      	bne.n	8010ce8 <_printf_common+0x48>
 8010cda:	f104 0a19 	add.w	sl, r4, #25
 8010cde:	68e3      	ldr	r3, [r4, #12]
 8010ce0:	6832      	ldr	r2, [r6, #0]
 8010ce2:	1a9b      	subs	r3, r3, r2
 8010ce4:	42ab      	cmp	r3, r5
 8010ce6:	dc26      	bgt.n	8010d36 <_printf_common+0x96>
 8010ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010cec:	6822      	ldr	r2, [r4, #0]
 8010cee:	3b00      	subs	r3, #0
 8010cf0:	bf18      	it	ne
 8010cf2:	2301      	movne	r3, #1
 8010cf4:	0692      	lsls	r2, r2, #26
 8010cf6:	d42b      	bmi.n	8010d50 <_printf_common+0xb0>
 8010cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010cfc:	4641      	mov	r1, r8
 8010cfe:	4638      	mov	r0, r7
 8010d00:	47c8      	blx	r9
 8010d02:	3001      	adds	r0, #1
 8010d04:	d01e      	beq.n	8010d44 <_printf_common+0xa4>
 8010d06:	6823      	ldr	r3, [r4, #0]
 8010d08:	6922      	ldr	r2, [r4, #16]
 8010d0a:	f003 0306 	and.w	r3, r3, #6
 8010d0e:	2b04      	cmp	r3, #4
 8010d10:	bf02      	ittt	eq
 8010d12:	68e5      	ldreq	r5, [r4, #12]
 8010d14:	6833      	ldreq	r3, [r6, #0]
 8010d16:	1aed      	subeq	r5, r5, r3
 8010d18:	68a3      	ldr	r3, [r4, #8]
 8010d1a:	bf0c      	ite	eq
 8010d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d20:	2500      	movne	r5, #0
 8010d22:	4293      	cmp	r3, r2
 8010d24:	bfc4      	itt	gt
 8010d26:	1a9b      	subgt	r3, r3, r2
 8010d28:	18ed      	addgt	r5, r5, r3
 8010d2a:	2600      	movs	r6, #0
 8010d2c:	341a      	adds	r4, #26
 8010d2e:	42b5      	cmp	r5, r6
 8010d30:	d11a      	bne.n	8010d68 <_printf_common+0xc8>
 8010d32:	2000      	movs	r0, #0
 8010d34:	e008      	b.n	8010d48 <_printf_common+0xa8>
 8010d36:	2301      	movs	r3, #1
 8010d38:	4652      	mov	r2, sl
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	47c8      	blx	r9
 8010d40:	3001      	adds	r0, #1
 8010d42:	d103      	bne.n	8010d4c <_printf_common+0xac>
 8010d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	e7c6      	b.n	8010cde <_printf_common+0x3e>
 8010d50:	18e1      	adds	r1, r4, r3
 8010d52:	1c5a      	adds	r2, r3, #1
 8010d54:	2030      	movs	r0, #48	@ 0x30
 8010d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d5a:	4422      	add	r2, r4
 8010d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d64:	3302      	adds	r3, #2
 8010d66:	e7c7      	b.n	8010cf8 <_printf_common+0x58>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	4622      	mov	r2, r4
 8010d6c:	4641      	mov	r1, r8
 8010d6e:	4638      	mov	r0, r7
 8010d70:	47c8      	blx	r9
 8010d72:	3001      	adds	r0, #1
 8010d74:	d0e6      	beq.n	8010d44 <_printf_common+0xa4>
 8010d76:	3601      	adds	r6, #1
 8010d78:	e7d9      	b.n	8010d2e <_printf_common+0x8e>
	...

08010d7c <_printf_i>:
 8010d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	7e0f      	ldrb	r7, [r1, #24]
 8010d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d84:	2f78      	cmp	r7, #120	@ 0x78
 8010d86:	4691      	mov	r9, r2
 8010d88:	4680      	mov	r8, r0
 8010d8a:	460c      	mov	r4, r1
 8010d8c:	469a      	mov	sl, r3
 8010d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010d92:	d807      	bhi.n	8010da4 <_printf_i+0x28>
 8010d94:	2f62      	cmp	r7, #98	@ 0x62
 8010d96:	d80a      	bhi.n	8010dae <_printf_i+0x32>
 8010d98:	2f00      	cmp	r7, #0
 8010d9a:	f000 80d2 	beq.w	8010f42 <_printf_i+0x1c6>
 8010d9e:	2f58      	cmp	r7, #88	@ 0x58
 8010da0:	f000 80b9 	beq.w	8010f16 <_printf_i+0x19a>
 8010da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010dac:	e03a      	b.n	8010e24 <_printf_i+0xa8>
 8010dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010db2:	2b15      	cmp	r3, #21
 8010db4:	d8f6      	bhi.n	8010da4 <_printf_i+0x28>
 8010db6:	a101      	add	r1, pc, #4	@ (adr r1, 8010dbc <_printf_i+0x40>)
 8010db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010dbc:	08010e15 	.word	0x08010e15
 8010dc0:	08010e29 	.word	0x08010e29
 8010dc4:	08010da5 	.word	0x08010da5
 8010dc8:	08010da5 	.word	0x08010da5
 8010dcc:	08010da5 	.word	0x08010da5
 8010dd0:	08010da5 	.word	0x08010da5
 8010dd4:	08010e29 	.word	0x08010e29
 8010dd8:	08010da5 	.word	0x08010da5
 8010ddc:	08010da5 	.word	0x08010da5
 8010de0:	08010da5 	.word	0x08010da5
 8010de4:	08010da5 	.word	0x08010da5
 8010de8:	08010f29 	.word	0x08010f29
 8010dec:	08010e53 	.word	0x08010e53
 8010df0:	08010ee3 	.word	0x08010ee3
 8010df4:	08010da5 	.word	0x08010da5
 8010df8:	08010da5 	.word	0x08010da5
 8010dfc:	08010f4b 	.word	0x08010f4b
 8010e00:	08010da5 	.word	0x08010da5
 8010e04:	08010e53 	.word	0x08010e53
 8010e08:	08010da5 	.word	0x08010da5
 8010e0c:	08010da5 	.word	0x08010da5
 8010e10:	08010eeb 	.word	0x08010eeb
 8010e14:	6833      	ldr	r3, [r6, #0]
 8010e16:	1d1a      	adds	r2, r3, #4
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	6032      	str	r2, [r6, #0]
 8010e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e24:	2301      	movs	r3, #1
 8010e26:	e09d      	b.n	8010f64 <_printf_i+0x1e8>
 8010e28:	6833      	ldr	r3, [r6, #0]
 8010e2a:	6820      	ldr	r0, [r4, #0]
 8010e2c:	1d19      	adds	r1, r3, #4
 8010e2e:	6031      	str	r1, [r6, #0]
 8010e30:	0606      	lsls	r6, r0, #24
 8010e32:	d501      	bpl.n	8010e38 <_printf_i+0xbc>
 8010e34:	681d      	ldr	r5, [r3, #0]
 8010e36:	e003      	b.n	8010e40 <_printf_i+0xc4>
 8010e38:	0645      	lsls	r5, r0, #25
 8010e3a:	d5fb      	bpl.n	8010e34 <_printf_i+0xb8>
 8010e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e40:	2d00      	cmp	r5, #0
 8010e42:	da03      	bge.n	8010e4c <_printf_i+0xd0>
 8010e44:	232d      	movs	r3, #45	@ 0x2d
 8010e46:	426d      	negs	r5, r5
 8010e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e4c:	4859      	ldr	r0, [pc, #356]	@ (8010fb4 <_printf_i+0x238>)
 8010e4e:	230a      	movs	r3, #10
 8010e50:	e011      	b.n	8010e76 <_printf_i+0xfa>
 8010e52:	6821      	ldr	r1, [r4, #0]
 8010e54:	6833      	ldr	r3, [r6, #0]
 8010e56:	0608      	lsls	r0, r1, #24
 8010e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e5c:	d402      	bmi.n	8010e64 <_printf_i+0xe8>
 8010e5e:	0649      	lsls	r1, r1, #25
 8010e60:	bf48      	it	mi
 8010e62:	b2ad      	uxthmi	r5, r5
 8010e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e66:	4853      	ldr	r0, [pc, #332]	@ (8010fb4 <_printf_i+0x238>)
 8010e68:	6033      	str	r3, [r6, #0]
 8010e6a:	bf14      	ite	ne
 8010e6c:	230a      	movne	r3, #10
 8010e6e:	2308      	moveq	r3, #8
 8010e70:	2100      	movs	r1, #0
 8010e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e76:	6866      	ldr	r6, [r4, #4]
 8010e78:	60a6      	str	r6, [r4, #8]
 8010e7a:	2e00      	cmp	r6, #0
 8010e7c:	bfa2      	ittt	ge
 8010e7e:	6821      	ldrge	r1, [r4, #0]
 8010e80:	f021 0104 	bicge.w	r1, r1, #4
 8010e84:	6021      	strge	r1, [r4, #0]
 8010e86:	b90d      	cbnz	r5, 8010e8c <_printf_i+0x110>
 8010e88:	2e00      	cmp	r6, #0
 8010e8a:	d04b      	beq.n	8010f24 <_printf_i+0x1a8>
 8010e8c:	4616      	mov	r6, r2
 8010e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e92:	fb03 5711 	mls	r7, r3, r1, r5
 8010e96:	5dc7      	ldrb	r7, [r0, r7]
 8010e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e9c:	462f      	mov	r7, r5
 8010e9e:	42bb      	cmp	r3, r7
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	d9f4      	bls.n	8010e8e <_printf_i+0x112>
 8010ea4:	2b08      	cmp	r3, #8
 8010ea6:	d10b      	bne.n	8010ec0 <_printf_i+0x144>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	07df      	lsls	r7, r3, #31
 8010eac:	d508      	bpl.n	8010ec0 <_printf_i+0x144>
 8010eae:	6923      	ldr	r3, [r4, #16]
 8010eb0:	6861      	ldr	r1, [r4, #4]
 8010eb2:	4299      	cmp	r1, r3
 8010eb4:	bfde      	ittt	le
 8010eb6:	2330      	movle	r3, #48	@ 0x30
 8010eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ebc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010ec0:	1b92      	subs	r2, r2, r6
 8010ec2:	6122      	str	r2, [r4, #16]
 8010ec4:	f8cd a000 	str.w	sl, [sp]
 8010ec8:	464b      	mov	r3, r9
 8010eca:	aa03      	add	r2, sp, #12
 8010ecc:	4621      	mov	r1, r4
 8010ece:	4640      	mov	r0, r8
 8010ed0:	f7ff fee6 	bl	8010ca0 <_printf_common>
 8010ed4:	3001      	adds	r0, #1
 8010ed6:	d14a      	bne.n	8010f6e <_printf_i+0x1f2>
 8010ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010edc:	b004      	add	sp, #16
 8010ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee2:	6823      	ldr	r3, [r4, #0]
 8010ee4:	f043 0320 	orr.w	r3, r3, #32
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	4833      	ldr	r0, [pc, #204]	@ (8010fb8 <_printf_i+0x23c>)
 8010eec:	2778      	movs	r7, #120	@ 0x78
 8010eee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	6831      	ldr	r1, [r6, #0]
 8010ef6:	061f      	lsls	r7, r3, #24
 8010ef8:	f851 5b04 	ldr.w	r5, [r1], #4
 8010efc:	d402      	bmi.n	8010f04 <_printf_i+0x188>
 8010efe:	065f      	lsls	r7, r3, #25
 8010f00:	bf48      	it	mi
 8010f02:	b2ad      	uxthmi	r5, r5
 8010f04:	6031      	str	r1, [r6, #0]
 8010f06:	07d9      	lsls	r1, r3, #31
 8010f08:	bf44      	itt	mi
 8010f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8010f0e:	6023      	strmi	r3, [r4, #0]
 8010f10:	b11d      	cbz	r5, 8010f1a <_printf_i+0x19e>
 8010f12:	2310      	movs	r3, #16
 8010f14:	e7ac      	b.n	8010e70 <_printf_i+0xf4>
 8010f16:	4827      	ldr	r0, [pc, #156]	@ (8010fb4 <_printf_i+0x238>)
 8010f18:	e7e9      	b.n	8010eee <_printf_i+0x172>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	f023 0320 	bic.w	r3, r3, #32
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	e7f6      	b.n	8010f12 <_printf_i+0x196>
 8010f24:	4616      	mov	r6, r2
 8010f26:	e7bd      	b.n	8010ea4 <_printf_i+0x128>
 8010f28:	6833      	ldr	r3, [r6, #0]
 8010f2a:	6825      	ldr	r5, [r4, #0]
 8010f2c:	6961      	ldr	r1, [r4, #20]
 8010f2e:	1d18      	adds	r0, r3, #4
 8010f30:	6030      	str	r0, [r6, #0]
 8010f32:	062e      	lsls	r6, r5, #24
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	d501      	bpl.n	8010f3c <_printf_i+0x1c0>
 8010f38:	6019      	str	r1, [r3, #0]
 8010f3a:	e002      	b.n	8010f42 <_printf_i+0x1c6>
 8010f3c:	0668      	lsls	r0, r5, #25
 8010f3e:	d5fb      	bpl.n	8010f38 <_printf_i+0x1bc>
 8010f40:	8019      	strh	r1, [r3, #0]
 8010f42:	2300      	movs	r3, #0
 8010f44:	6123      	str	r3, [r4, #16]
 8010f46:	4616      	mov	r6, r2
 8010f48:	e7bc      	b.n	8010ec4 <_printf_i+0x148>
 8010f4a:	6833      	ldr	r3, [r6, #0]
 8010f4c:	1d1a      	adds	r2, r3, #4
 8010f4e:	6032      	str	r2, [r6, #0]
 8010f50:	681e      	ldr	r6, [r3, #0]
 8010f52:	6862      	ldr	r2, [r4, #4]
 8010f54:	2100      	movs	r1, #0
 8010f56:	4630      	mov	r0, r6
 8010f58:	f7ef f99a 	bl	8000290 <memchr>
 8010f5c:	b108      	cbz	r0, 8010f62 <_printf_i+0x1e6>
 8010f5e:	1b80      	subs	r0, r0, r6
 8010f60:	6060      	str	r0, [r4, #4]
 8010f62:	6863      	ldr	r3, [r4, #4]
 8010f64:	6123      	str	r3, [r4, #16]
 8010f66:	2300      	movs	r3, #0
 8010f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f6c:	e7aa      	b.n	8010ec4 <_printf_i+0x148>
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	4632      	mov	r2, r6
 8010f72:	4649      	mov	r1, r9
 8010f74:	4640      	mov	r0, r8
 8010f76:	47d0      	blx	sl
 8010f78:	3001      	adds	r0, #1
 8010f7a:	d0ad      	beq.n	8010ed8 <_printf_i+0x15c>
 8010f7c:	6823      	ldr	r3, [r4, #0]
 8010f7e:	079b      	lsls	r3, r3, #30
 8010f80:	d413      	bmi.n	8010faa <_printf_i+0x22e>
 8010f82:	68e0      	ldr	r0, [r4, #12]
 8010f84:	9b03      	ldr	r3, [sp, #12]
 8010f86:	4298      	cmp	r0, r3
 8010f88:	bfb8      	it	lt
 8010f8a:	4618      	movlt	r0, r3
 8010f8c:	e7a6      	b.n	8010edc <_printf_i+0x160>
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4632      	mov	r2, r6
 8010f92:	4649      	mov	r1, r9
 8010f94:	4640      	mov	r0, r8
 8010f96:	47d0      	blx	sl
 8010f98:	3001      	adds	r0, #1
 8010f9a:	d09d      	beq.n	8010ed8 <_printf_i+0x15c>
 8010f9c:	3501      	adds	r5, #1
 8010f9e:	68e3      	ldr	r3, [r4, #12]
 8010fa0:	9903      	ldr	r1, [sp, #12]
 8010fa2:	1a5b      	subs	r3, r3, r1
 8010fa4:	42ab      	cmp	r3, r5
 8010fa6:	dcf2      	bgt.n	8010f8e <_printf_i+0x212>
 8010fa8:	e7eb      	b.n	8010f82 <_printf_i+0x206>
 8010faa:	2500      	movs	r5, #0
 8010fac:	f104 0619 	add.w	r6, r4, #25
 8010fb0:	e7f5      	b.n	8010f9e <_printf_i+0x222>
 8010fb2:	bf00      	nop
 8010fb4:	08012df9 	.word	0x08012df9
 8010fb8:	08012e0a 	.word	0x08012e0a

08010fbc <__sflush_r>:
 8010fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc4:	0716      	lsls	r6, r2, #28
 8010fc6:	4605      	mov	r5, r0
 8010fc8:	460c      	mov	r4, r1
 8010fca:	d454      	bmi.n	8011076 <__sflush_r+0xba>
 8010fcc:	684b      	ldr	r3, [r1, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	dc02      	bgt.n	8010fd8 <__sflush_r+0x1c>
 8010fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dd48      	ble.n	801106a <__sflush_r+0xae>
 8010fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fda:	2e00      	cmp	r6, #0
 8010fdc:	d045      	beq.n	801106a <__sflush_r+0xae>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010fe4:	682f      	ldr	r7, [r5, #0]
 8010fe6:	6a21      	ldr	r1, [r4, #32]
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	d030      	beq.n	801104e <__sflush_r+0x92>
 8010fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	0759      	lsls	r1, r3, #29
 8010ff2:	d505      	bpl.n	8011000 <__sflush_r+0x44>
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	1ad2      	subs	r2, r2, r3
 8010ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ffa:	b10b      	cbz	r3, 8011000 <__sflush_r+0x44>
 8010ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ffe:	1ad2      	subs	r2, r2, r3
 8011000:	2300      	movs	r3, #0
 8011002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011004:	6a21      	ldr	r1, [r4, #32]
 8011006:	4628      	mov	r0, r5
 8011008:	47b0      	blx	r6
 801100a:	1c43      	adds	r3, r0, #1
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	d106      	bne.n	801101e <__sflush_r+0x62>
 8011010:	6829      	ldr	r1, [r5, #0]
 8011012:	291d      	cmp	r1, #29
 8011014:	d82b      	bhi.n	801106e <__sflush_r+0xb2>
 8011016:	4a2a      	ldr	r2, [pc, #168]	@ (80110c0 <__sflush_r+0x104>)
 8011018:	410a      	asrs	r2, r1
 801101a:	07d6      	lsls	r6, r2, #31
 801101c:	d427      	bmi.n	801106e <__sflush_r+0xb2>
 801101e:	2200      	movs	r2, #0
 8011020:	6062      	str	r2, [r4, #4]
 8011022:	04d9      	lsls	r1, r3, #19
 8011024:	6922      	ldr	r2, [r4, #16]
 8011026:	6022      	str	r2, [r4, #0]
 8011028:	d504      	bpl.n	8011034 <__sflush_r+0x78>
 801102a:	1c42      	adds	r2, r0, #1
 801102c:	d101      	bne.n	8011032 <__sflush_r+0x76>
 801102e:	682b      	ldr	r3, [r5, #0]
 8011030:	b903      	cbnz	r3, 8011034 <__sflush_r+0x78>
 8011032:	6560      	str	r0, [r4, #84]	@ 0x54
 8011034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011036:	602f      	str	r7, [r5, #0]
 8011038:	b1b9      	cbz	r1, 801106a <__sflush_r+0xae>
 801103a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801103e:	4299      	cmp	r1, r3
 8011040:	d002      	beq.n	8011048 <__sflush_r+0x8c>
 8011042:	4628      	mov	r0, r5
 8011044:	f7fe fbd2 	bl	800f7ec <_free_r>
 8011048:	2300      	movs	r3, #0
 801104a:	6363      	str	r3, [r4, #52]	@ 0x34
 801104c:	e00d      	b.n	801106a <__sflush_r+0xae>
 801104e:	2301      	movs	r3, #1
 8011050:	4628      	mov	r0, r5
 8011052:	47b0      	blx	r6
 8011054:	4602      	mov	r2, r0
 8011056:	1c50      	adds	r0, r2, #1
 8011058:	d1c9      	bne.n	8010fee <__sflush_r+0x32>
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d0c6      	beq.n	8010fee <__sflush_r+0x32>
 8011060:	2b1d      	cmp	r3, #29
 8011062:	d001      	beq.n	8011068 <__sflush_r+0xac>
 8011064:	2b16      	cmp	r3, #22
 8011066:	d11e      	bne.n	80110a6 <__sflush_r+0xea>
 8011068:	602f      	str	r7, [r5, #0]
 801106a:	2000      	movs	r0, #0
 801106c:	e022      	b.n	80110b4 <__sflush_r+0xf8>
 801106e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011072:	b21b      	sxth	r3, r3
 8011074:	e01b      	b.n	80110ae <__sflush_r+0xf2>
 8011076:	690f      	ldr	r7, [r1, #16]
 8011078:	2f00      	cmp	r7, #0
 801107a:	d0f6      	beq.n	801106a <__sflush_r+0xae>
 801107c:	0793      	lsls	r3, r2, #30
 801107e:	680e      	ldr	r6, [r1, #0]
 8011080:	bf08      	it	eq
 8011082:	694b      	ldreq	r3, [r1, #20]
 8011084:	600f      	str	r7, [r1, #0]
 8011086:	bf18      	it	ne
 8011088:	2300      	movne	r3, #0
 801108a:	eba6 0807 	sub.w	r8, r6, r7
 801108e:	608b      	str	r3, [r1, #8]
 8011090:	f1b8 0f00 	cmp.w	r8, #0
 8011094:	dde9      	ble.n	801106a <__sflush_r+0xae>
 8011096:	6a21      	ldr	r1, [r4, #32]
 8011098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801109a:	4643      	mov	r3, r8
 801109c:	463a      	mov	r2, r7
 801109e:	4628      	mov	r0, r5
 80110a0:	47b0      	blx	r6
 80110a2:	2800      	cmp	r0, #0
 80110a4:	dc08      	bgt.n	80110b8 <__sflush_r+0xfc>
 80110a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ae:	81a3      	strh	r3, [r4, #12]
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b8:	4407      	add	r7, r0
 80110ba:	eba8 0800 	sub.w	r8, r8, r0
 80110be:	e7e7      	b.n	8011090 <__sflush_r+0xd4>
 80110c0:	dfbffffe 	.word	0xdfbffffe

080110c4 <_fflush_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	690b      	ldr	r3, [r1, #16]
 80110c8:	4605      	mov	r5, r0
 80110ca:	460c      	mov	r4, r1
 80110cc:	b913      	cbnz	r3, 80110d4 <_fflush_r+0x10>
 80110ce:	2500      	movs	r5, #0
 80110d0:	4628      	mov	r0, r5
 80110d2:	bd38      	pop	{r3, r4, r5, pc}
 80110d4:	b118      	cbz	r0, 80110de <_fflush_r+0x1a>
 80110d6:	6a03      	ldr	r3, [r0, #32]
 80110d8:	b90b      	cbnz	r3, 80110de <_fflush_r+0x1a>
 80110da:	f7fe fa45 	bl	800f568 <__sinit>
 80110de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0f3      	beq.n	80110ce <_fflush_r+0xa>
 80110e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80110e8:	07d0      	lsls	r0, r2, #31
 80110ea:	d404      	bmi.n	80110f6 <_fflush_r+0x32>
 80110ec:	0599      	lsls	r1, r3, #22
 80110ee:	d402      	bmi.n	80110f6 <_fflush_r+0x32>
 80110f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110f2:	f7fe fb5c 	bl	800f7ae <__retarget_lock_acquire_recursive>
 80110f6:	4628      	mov	r0, r5
 80110f8:	4621      	mov	r1, r4
 80110fa:	f7ff ff5f 	bl	8010fbc <__sflush_r>
 80110fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011100:	07da      	lsls	r2, r3, #31
 8011102:	4605      	mov	r5, r0
 8011104:	d4e4      	bmi.n	80110d0 <_fflush_r+0xc>
 8011106:	89a3      	ldrh	r3, [r4, #12]
 8011108:	059b      	lsls	r3, r3, #22
 801110a:	d4e1      	bmi.n	80110d0 <_fflush_r+0xc>
 801110c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801110e:	f7fe fb4f 	bl	800f7b0 <__retarget_lock_release_recursive>
 8011112:	e7dd      	b.n	80110d0 <_fflush_r+0xc>

08011114 <memmove>:
 8011114:	4288      	cmp	r0, r1
 8011116:	b510      	push	{r4, lr}
 8011118:	eb01 0402 	add.w	r4, r1, r2
 801111c:	d902      	bls.n	8011124 <memmove+0x10>
 801111e:	4284      	cmp	r4, r0
 8011120:	4623      	mov	r3, r4
 8011122:	d807      	bhi.n	8011134 <memmove+0x20>
 8011124:	1e43      	subs	r3, r0, #1
 8011126:	42a1      	cmp	r1, r4
 8011128:	d008      	beq.n	801113c <memmove+0x28>
 801112a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801112e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011132:	e7f8      	b.n	8011126 <memmove+0x12>
 8011134:	4402      	add	r2, r0
 8011136:	4601      	mov	r1, r0
 8011138:	428a      	cmp	r2, r1
 801113a:	d100      	bne.n	801113e <memmove+0x2a>
 801113c:	bd10      	pop	{r4, pc}
 801113e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011146:	e7f7      	b.n	8011138 <memmove+0x24>

08011148 <_sbrk_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4d06      	ldr	r5, [pc, #24]	@ (8011164 <_sbrk_r+0x1c>)
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	4608      	mov	r0, r1
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	f7f3 fa5e 	bl	8004614 <_sbrk>
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	d102      	bne.n	8011162 <_sbrk_r+0x1a>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	b103      	cbz	r3, 8011162 <_sbrk_r+0x1a>
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	2001c140 	.word	0x2001c140

08011168 <__assert_func>:
 8011168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801116a:	4614      	mov	r4, r2
 801116c:	461a      	mov	r2, r3
 801116e:	4b09      	ldr	r3, [pc, #36]	@ (8011194 <__assert_func+0x2c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4605      	mov	r5, r0
 8011174:	68d8      	ldr	r0, [r3, #12]
 8011176:	b954      	cbnz	r4, 801118e <__assert_func+0x26>
 8011178:	4b07      	ldr	r3, [pc, #28]	@ (8011198 <__assert_func+0x30>)
 801117a:	461c      	mov	r4, r3
 801117c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011180:	9100      	str	r1, [sp, #0]
 8011182:	462b      	mov	r3, r5
 8011184:	4905      	ldr	r1, [pc, #20]	@ (801119c <__assert_func+0x34>)
 8011186:	f000 f857 	bl	8011238 <fiprintf>
 801118a:	f000 f867 	bl	801125c <abort>
 801118e:	4b04      	ldr	r3, [pc, #16]	@ (80111a0 <__assert_func+0x38>)
 8011190:	e7f4      	b.n	801117c <__assert_func+0x14>
 8011192:	bf00      	nop
 8011194:	20000254 	.word	0x20000254
 8011198:	08012e56 	.word	0x08012e56
 801119c:	08012e28 	.word	0x08012e28
 80111a0:	08012e1b 	.word	0x08012e1b

080111a4 <_calloc_r>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	fba1 5402 	umull	r5, r4, r1, r2
 80111aa:	b93c      	cbnz	r4, 80111bc <_calloc_r+0x18>
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7fe fec3 	bl	800ff38 <_malloc_r>
 80111b2:	4606      	mov	r6, r0
 80111b4:	b928      	cbnz	r0, 80111c2 <_calloc_r+0x1e>
 80111b6:	2600      	movs	r6, #0
 80111b8:	4630      	mov	r0, r6
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	220c      	movs	r2, #12
 80111be:	6002      	str	r2, [r0, #0]
 80111c0:	e7f9      	b.n	80111b6 <_calloc_r+0x12>
 80111c2:	462a      	mov	r2, r5
 80111c4:	4621      	mov	r1, r4
 80111c6:	f7fe fa78 	bl	800f6ba <memset>
 80111ca:	e7f5      	b.n	80111b8 <_calloc_r+0x14>

080111cc <malloc>:
 80111cc:	4b02      	ldr	r3, [pc, #8]	@ (80111d8 <malloc+0xc>)
 80111ce:	4601      	mov	r1, r0
 80111d0:	6818      	ldr	r0, [r3, #0]
 80111d2:	f7fe beb1 	b.w	800ff38 <_malloc_r>
 80111d6:	bf00      	nop
 80111d8:	20000254 	.word	0x20000254

080111dc <_realloc_r>:
 80111dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e0:	4680      	mov	r8, r0
 80111e2:	4615      	mov	r5, r2
 80111e4:	460c      	mov	r4, r1
 80111e6:	b921      	cbnz	r1, 80111f2 <_realloc_r+0x16>
 80111e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111ec:	4611      	mov	r1, r2
 80111ee:	f7fe bea3 	b.w	800ff38 <_malloc_r>
 80111f2:	b92a      	cbnz	r2, 8011200 <_realloc_r+0x24>
 80111f4:	f7fe fafa 	bl	800f7ec <_free_r>
 80111f8:	2400      	movs	r4, #0
 80111fa:	4620      	mov	r0, r4
 80111fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011200:	f000 f833 	bl	801126a <_malloc_usable_size_r>
 8011204:	4285      	cmp	r5, r0
 8011206:	4606      	mov	r6, r0
 8011208:	d802      	bhi.n	8011210 <_realloc_r+0x34>
 801120a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801120e:	d8f4      	bhi.n	80111fa <_realloc_r+0x1e>
 8011210:	4629      	mov	r1, r5
 8011212:	4640      	mov	r0, r8
 8011214:	f7fe fe90 	bl	800ff38 <_malloc_r>
 8011218:	4607      	mov	r7, r0
 801121a:	2800      	cmp	r0, #0
 801121c:	d0ec      	beq.n	80111f8 <_realloc_r+0x1c>
 801121e:	42b5      	cmp	r5, r6
 8011220:	462a      	mov	r2, r5
 8011222:	4621      	mov	r1, r4
 8011224:	bf28      	it	cs
 8011226:	4632      	movcs	r2, r6
 8011228:	f7fe fac3 	bl	800f7b2 <memcpy>
 801122c:	4621      	mov	r1, r4
 801122e:	4640      	mov	r0, r8
 8011230:	f7fe fadc 	bl	800f7ec <_free_r>
 8011234:	463c      	mov	r4, r7
 8011236:	e7e0      	b.n	80111fa <_realloc_r+0x1e>

08011238 <fiprintf>:
 8011238:	b40e      	push	{r1, r2, r3}
 801123a:	b503      	push	{r0, r1, lr}
 801123c:	4601      	mov	r1, r0
 801123e:	ab03      	add	r3, sp, #12
 8011240:	4805      	ldr	r0, [pc, #20]	@ (8011258 <fiprintf+0x20>)
 8011242:	f853 2b04 	ldr.w	r2, [r3], #4
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	9301      	str	r3, [sp, #4]
 801124a:	f000 f83f 	bl	80112cc <_vfiprintf_r>
 801124e:	b002      	add	sp, #8
 8011250:	f85d eb04 	ldr.w	lr, [sp], #4
 8011254:	b003      	add	sp, #12
 8011256:	4770      	bx	lr
 8011258:	20000254 	.word	0x20000254

0801125c <abort>:
 801125c:	b508      	push	{r3, lr}
 801125e:	2006      	movs	r0, #6
 8011260:	f000 fa08 	bl	8011674 <raise>
 8011264:	2001      	movs	r0, #1
 8011266:	f7f3 f979 	bl	800455c <_exit>

0801126a <_malloc_usable_size_r>:
 801126a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801126e:	1f18      	subs	r0, r3, #4
 8011270:	2b00      	cmp	r3, #0
 8011272:	bfbc      	itt	lt
 8011274:	580b      	ldrlt	r3, [r1, r0]
 8011276:	18c0      	addlt	r0, r0, r3
 8011278:	4770      	bx	lr

0801127a <__sfputc_r>:
 801127a:	6893      	ldr	r3, [r2, #8]
 801127c:	3b01      	subs	r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	b410      	push	{r4}
 8011282:	6093      	str	r3, [r2, #8]
 8011284:	da08      	bge.n	8011298 <__sfputc_r+0x1e>
 8011286:	6994      	ldr	r4, [r2, #24]
 8011288:	42a3      	cmp	r3, r4
 801128a:	db01      	blt.n	8011290 <__sfputc_r+0x16>
 801128c:	290a      	cmp	r1, #10
 801128e:	d103      	bne.n	8011298 <__sfputc_r+0x1e>
 8011290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011294:	f000 b932 	b.w	80114fc <__swbuf_r>
 8011298:	6813      	ldr	r3, [r2, #0]
 801129a:	1c58      	adds	r0, r3, #1
 801129c:	6010      	str	r0, [r2, #0]
 801129e:	7019      	strb	r1, [r3, #0]
 80112a0:	4608      	mov	r0, r1
 80112a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <__sfputs_r>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	4614      	mov	r4, r2
 80112b0:	18d5      	adds	r5, r2, r3
 80112b2:	42ac      	cmp	r4, r5
 80112b4:	d101      	bne.n	80112ba <__sfputs_r+0x12>
 80112b6:	2000      	movs	r0, #0
 80112b8:	e007      	b.n	80112ca <__sfputs_r+0x22>
 80112ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112be:	463a      	mov	r2, r7
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ff ffda 	bl	801127a <__sfputc_r>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	d1f3      	bne.n	80112b2 <__sfputs_r+0xa>
 80112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112cc <_vfiprintf_r>:
 80112cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d0:	460d      	mov	r5, r1
 80112d2:	b09d      	sub	sp, #116	@ 0x74
 80112d4:	4614      	mov	r4, r2
 80112d6:	4698      	mov	r8, r3
 80112d8:	4606      	mov	r6, r0
 80112da:	b118      	cbz	r0, 80112e4 <_vfiprintf_r+0x18>
 80112dc:	6a03      	ldr	r3, [r0, #32]
 80112de:	b90b      	cbnz	r3, 80112e4 <_vfiprintf_r+0x18>
 80112e0:	f7fe f942 	bl	800f568 <__sinit>
 80112e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112e6:	07d9      	lsls	r1, r3, #31
 80112e8:	d405      	bmi.n	80112f6 <_vfiprintf_r+0x2a>
 80112ea:	89ab      	ldrh	r3, [r5, #12]
 80112ec:	059a      	lsls	r2, r3, #22
 80112ee:	d402      	bmi.n	80112f6 <_vfiprintf_r+0x2a>
 80112f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112f2:	f7fe fa5c 	bl	800f7ae <__retarget_lock_acquire_recursive>
 80112f6:	89ab      	ldrh	r3, [r5, #12]
 80112f8:	071b      	lsls	r3, r3, #28
 80112fa:	d501      	bpl.n	8011300 <_vfiprintf_r+0x34>
 80112fc:	692b      	ldr	r3, [r5, #16]
 80112fe:	b99b      	cbnz	r3, 8011328 <_vfiprintf_r+0x5c>
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f000 f938 	bl	8011578 <__swsetup_r>
 8011308:	b170      	cbz	r0, 8011328 <_vfiprintf_r+0x5c>
 801130a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801130c:	07dc      	lsls	r4, r3, #31
 801130e:	d504      	bpl.n	801131a <_vfiprintf_r+0x4e>
 8011310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011314:	b01d      	add	sp, #116	@ 0x74
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131a:	89ab      	ldrh	r3, [r5, #12]
 801131c:	0598      	lsls	r0, r3, #22
 801131e:	d4f7      	bmi.n	8011310 <_vfiprintf_r+0x44>
 8011320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011322:	f7fe fa45 	bl	800f7b0 <__retarget_lock_release_recursive>
 8011326:	e7f3      	b.n	8011310 <_vfiprintf_r+0x44>
 8011328:	2300      	movs	r3, #0
 801132a:	9309      	str	r3, [sp, #36]	@ 0x24
 801132c:	2320      	movs	r3, #32
 801132e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011332:	f8cd 800c 	str.w	r8, [sp, #12]
 8011336:	2330      	movs	r3, #48	@ 0x30
 8011338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80114e8 <_vfiprintf_r+0x21c>
 801133c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011340:	f04f 0901 	mov.w	r9, #1
 8011344:	4623      	mov	r3, r4
 8011346:	469a      	mov	sl, r3
 8011348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801134c:	b10a      	cbz	r2, 8011352 <_vfiprintf_r+0x86>
 801134e:	2a25      	cmp	r2, #37	@ 0x25
 8011350:	d1f9      	bne.n	8011346 <_vfiprintf_r+0x7a>
 8011352:	ebba 0b04 	subs.w	fp, sl, r4
 8011356:	d00b      	beq.n	8011370 <_vfiprintf_r+0xa4>
 8011358:	465b      	mov	r3, fp
 801135a:	4622      	mov	r2, r4
 801135c:	4629      	mov	r1, r5
 801135e:	4630      	mov	r0, r6
 8011360:	f7ff ffa2 	bl	80112a8 <__sfputs_r>
 8011364:	3001      	adds	r0, #1
 8011366:	f000 80a7 	beq.w	80114b8 <_vfiprintf_r+0x1ec>
 801136a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801136c:	445a      	add	r2, fp
 801136e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011370:	f89a 3000 	ldrb.w	r3, [sl]
 8011374:	2b00      	cmp	r3, #0
 8011376:	f000 809f 	beq.w	80114b8 <_vfiprintf_r+0x1ec>
 801137a:	2300      	movs	r3, #0
 801137c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011384:	f10a 0a01 	add.w	sl, sl, #1
 8011388:	9304      	str	r3, [sp, #16]
 801138a:	9307      	str	r3, [sp, #28]
 801138c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011390:	931a      	str	r3, [sp, #104]	@ 0x68
 8011392:	4654      	mov	r4, sl
 8011394:	2205      	movs	r2, #5
 8011396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139a:	4853      	ldr	r0, [pc, #332]	@ (80114e8 <_vfiprintf_r+0x21c>)
 801139c:	f7ee ff78 	bl	8000290 <memchr>
 80113a0:	9a04      	ldr	r2, [sp, #16]
 80113a2:	b9d8      	cbnz	r0, 80113dc <_vfiprintf_r+0x110>
 80113a4:	06d1      	lsls	r1, r2, #27
 80113a6:	bf44      	itt	mi
 80113a8:	2320      	movmi	r3, #32
 80113aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113ae:	0713      	lsls	r3, r2, #28
 80113b0:	bf44      	itt	mi
 80113b2:	232b      	movmi	r3, #43	@ 0x2b
 80113b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113b8:	f89a 3000 	ldrb.w	r3, [sl]
 80113bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80113be:	d015      	beq.n	80113ec <_vfiprintf_r+0x120>
 80113c0:	9a07      	ldr	r2, [sp, #28]
 80113c2:	4654      	mov	r4, sl
 80113c4:	2000      	movs	r0, #0
 80113c6:	f04f 0c0a 	mov.w	ip, #10
 80113ca:	4621      	mov	r1, r4
 80113cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113d0:	3b30      	subs	r3, #48	@ 0x30
 80113d2:	2b09      	cmp	r3, #9
 80113d4:	d94b      	bls.n	801146e <_vfiprintf_r+0x1a2>
 80113d6:	b1b0      	cbz	r0, 8011406 <_vfiprintf_r+0x13a>
 80113d8:	9207      	str	r2, [sp, #28]
 80113da:	e014      	b.n	8011406 <_vfiprintf_r+0x13a>
 80113dc:	eba0 0308 	sub.w	r3, r0, r8
 80113e0:	fa09 f303 	lsl.w	r3, r9, r3
 80113e4:	4313      	orrs	r3, r2
 80113e6:	9304      	str	r3, [sp, #16]
 80113e8:	46a2      	mov	sl, r4
 80113ea:	e7d2      	b.n	8011392 <_vfiprintf_r+0xc6>
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	1d19      	adds	r1, r3, #4
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	9103      	str	r1, [sp, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	bfbb      	ittet	lt
 80113f8:	425b      	neglt	r3, r3
 80113fa:	f042 0202 	orrlt.w	r2, r2, #2
 80113fe:	9307      	strge	r3, [sp, #28]
 8011400:	9307      	strlt	r3, [sp, #28]
 8011402:	bfb8      	it	lt
 8011404:	9204      	strlt	r2, [sp, #16]
 8011406:	7823      	ldrb	r3, [r4, #0]
 8011408:	2b2e      	cmp	r3, #46	@ 0x2e
 801140a:	d10a      	bne.n	8011422 <_vfiprintf_r+0x156>
 801140c:	7863      	ldrb	r3, [r4, #1]
 801140e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011410:	d132      	bne.n	8011478 <_vfiprintf_r+0x1ac>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	1d1a      	adds	r2, r3, #4
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	9203      	str	r2, [sp, #12]
 801141a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801141e:	3402      	adds	r4, #2
 8011420:	9305      	str	r3, [sp, #20]
 8011422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114f8 <_vfiprintf_r+0x22c>
 8011426:	7821      	ldrb	r1, [r4, #0]
 8011428:	2203      	movs	r2, #3
 801142a:	4650      	mov	r0, sl
 801142c:	f7ee ff30 	bl	8000290 <memchr>
 8011430:	b138      	cbz	r0, 8011442 <_vfiprintf_r+0x176>
 8011432:	9b04      	ldr	r3, [sp, #16]
 8011434:	eba0 000a 	sub.w	r0, r0, sl
 8011438:	2240      	movs	r2, #64	@ 0x40
 801143a:	4082      	lsls	r2, r0
 801143c:	4313      	orrs	r3, r2
 801143e:	3401      	adds	r4, #1
 8011440:	9304      	str	r3, [sp, #16]
 8011442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011446:	4829      	ldr	r0, [pc, #164]	@ (80114ec <_vfiprintf_r+0x220>)
 8011448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801144c:	2206      	movs	r2, #6
 801144e:	f7ee ff1f 	bl	8000290 <memchr>
 8011452:	2800      	cmp	r0, #0
 8011454:	d03f      	beq.n	80114d6 <_vfiprintf_r+0x20a>
 8011456:	4b26      	ldr	r3, [pc, #152]	@ (80114f0 <_vfiprintf_r+0x224>)
 8011458:	bb1b      	cbnz	r3, 80114a2 <_vfiprintf_r+0x1d6>
 801145a:	9b03      	ldr	r3, [sp, #12]
 801145c:	3307      	adds	r3, #7
 801145e:	f023 0307 	bic.w	r3, r3, #7
 8011462:	3308      	adds	r3, #8
 8011464:	9303      	str	r3, [sp, #12]
 8011466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011468:	443b      	add	r3, r7
 801146a:	9309      	str	r3, [sp, #36]	@ 0x24
 801146c:	e76a      	b.n	8011344 <_vfiprintf_r+0x78>
 801146e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011472:	460c      	mov	r4, r1
 8011474:	2001      	movs	r0, #1
 8011476:	e7a8      	b.n	80113ca <_vfiprintf_r+0xfe>
 8011478:	2300      	movs	r3, #0
 801147a:	3401      	adds	r4, #1
 801147c:	9305      	str	r3, [sp, #20]
 801147e:	4619      	mov	r1, r3
 8011480:	f04f 0c0a 	mov.w	ip, #10
 8011484:	4620      	mov	r0, r4
 8011486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801148a:	3a30      	subs	r2, #48	@ 0x30
 801148c:	2a09      	cmp	r2, #9
 801148e:	d903      	bls.n	8011498 <_vfiprintf_r+0x1cc>
 8011490:	2b00      	cmp	r3, #0
 8011492:	d0c6      	beq.n	8011422 <_vfiprintf_r+0x156>
 8011494:	9105      	str	r1, [sp, #20]
 8011496:	e7c4      	b.n	8011422 <_vfiprintf_r+0x156>
 8011498:	fb0c 2101 	mla	r1, ip, r1, r2
 801149c:	4604      	mov	r4, r0
 801149e:	2301      	movs	r3, #1
 80114a0:	e7f0      	b.n	8011484 <_vfiprintf_r+0x1b8>
 80114a2:	ab03      	add	r3, sp, #12
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	462a      	mov	r2, r5
 80114a8:	4b12      	ldr	r3, [pc, #72]	@ (80114f4 <_vfiprintf_r+0x228>)
 80114aa:	a904      	add	r1, sp, #16
 80114ac:	4630      	mov	r0, r6
 80114ae:	f3af 8000 	nop.w
 80114b2:	4607      	mov	r7, r0
 80114b4:	1c78      	adds	r0, r7, #1
 80114b6:	d1d6      	bne.n	8011466 <_vfiprintf_r+0x19a>
 80114b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114ba:	07d9      	lsls	r1, r3, #31
 80114bc:	d405      	bmi.n	80114ca <_vfiprintf_r+0x1fe>
 80114be:	89ab      	ldrh	r3, [r5, #12]
 80114c0:	059a      	lsls	r2, r3, #22
 80114c2:	d402      	bmi.n	80114ca <_vfiprintf_r+0x1fe>
 80114c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114c6:	f7fe f973 	bl	800f7b0 <__retarget_lock_release_recursive>
 80114ca:	89ab      	ldrh	r3, [r5, #12]
 80114cc:	065b      	lsls	r3, r3, #25
 80114ce:	f53f af1f 	bmi.w	8011310 <_vfiprintf_r+0x44>
 80114d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114d4:	e71e      	b.n	8011314 <_vfiprintf_r+0x48>
 80114d6:	ab03      	add	r3, sp, #12
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	462a      	mov	r2, r5
 80114dc:	4b05      	ldr	r3, [pc, #20]	@ (80114f4 <_vfiprintf_r+0x228>)
 80114de:	a904      	add	r1, sp, #16
 80114e0:	4630      	mov	r0, r6
 80114e2:	f7ff fc4b 	bl	8010d7c <_printf_i>
 80114e6:	e7e4      	b.n	80114b2 <_vfiprintf_r+0x1e6>
 80114e8:	08012de8 	.word	0x08012de8
 80114ec:	08012df2 	.word	0x08012df2
 80114f0:	00000000 	.word	0x00000000
 80114f4:	080112a9 	.word	0x080112a9
 80114f8:	08012dee 	.word	0x08012dee

080114fc <__swbuf_r>:
 80114fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fe:	460e      	mov	r6, r1
 8011500:	4614      	mov	r4, r2
 8011502:	4605      	mov	r5, r0
 8011504:	b118      	cbz	r0, 801150e <__swbuf_r+0x12>
 8011506:	6a03      	ldr	r3, [r0, #32]
 8011508:	b90b      	cbnz	r3, 801150e <__swbuf_r+0x12>
 801150a:	f7fe f82d 	bl	800f568 <__sinit>
 801150e:	69a3      	ldr	r3, [r4, #24]
 8011510:	60a3      	str	r3, [r4, #8]
 8011512:	89a3      	ldrh	r3, [r4, #12]
 8011514:	071a      	lsls	r2, r3, #28
 8011516:	d501      	bpl.n	801151c <__swbuf_r+0x20>
 8011518:	6923      	ldr	r3, [r4, #16]
 801151a:	b943      	cbnz	r3, 801152e <__swbuf_r+0x32>
 801151c:	4621      	mov	r1, r4
 801151e:	4628      	mov	r0, r5
 8011520:	f000 f82a 	bl	8011578 <__swsetup_r>
 8011524:	b118      	cbz	r0, 801152e <__swbuf_r+0x32>
 8011526:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801152a:	4638      	mov	r0, r7
 801152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	6922      	ldr	r2, [r4, #16]
 8011532:	1a98      	subs	r0, r3, r2
 8011534:	6963      	ldr	r3, [r4, #20]
 8011536:	b2f6      	uxtb	r6, r6
 8011538:	4283      	cmp	r3, r0
 801153a:	4637      	mov	r7, r6
 801153c:	dc05      	bgt.n	801154a <__swbuf_r+0x4e>
 801153e:	4621      	mov	r1, r4
 8011540:	4628      	mov	r0, r5
 8011542:	f7ff fdbf 	bl	80110c4 <_fflush_r>
 8011546:	2800      	cmp	r0, #0
 8011548:	d1ed      	bne.n	8011526 <__swbuf_r+0x2a>
 801154a:	68a3      	ldr	r3, [r4, #8]
 801154c:	3b01      	subs	r3, #1
 801154e:	60a3      	str	r3, [r4, #8]
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	1c5a      	adds	r2, r3, #1
 8011554:	6022      	str	r2, [r4, #0]
 8011556:	701e      	strb	r6, [r3, #0]
 8011558:	6962      	ldr	r2, [r4, #20]
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	429a      	cmp	r2, r3
 801155e:	d004      	beq.n	801156a <__swbuf_r+0x6e>
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	07db      	lsls	r3, r3, #31
 8011564:	d5e1      	bpl.n	801152a <__swbuf_r+0x2e>
 8011566:	2e0a      	cmp	r6, #10
 8011568:	d1df      	bne.n	801152a <__swbuf_r+0x2e>
 801156a:	4621      	mov	r1, r4
 801156c:	4628      	mov	r0, r5
 801156e:	f7ff fda9 	bl	80110c4 <_fflush_r>
 8011572:	2800      	cmp	r0, #0
 8011574:	d0d9      	beq.n	801152a <__swbuf_r+0x2e>
 8011576:	e7d6      	b.n	8011526 <__swbuf_r+0x2a>

08011578 <__swsetup_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4b29      	ldr	r3, [pc, #164]	@ (8011620 <__swsetup_r+0xa8>)
 801157c:	4605      	mov	r5, r0
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	460c      	mov	r4, r1
 8011582:	b118      	cbz	r0, 801158c <__swsetup_r+0x14>
 8011584:	6a03      	ldr	r3, [r0, #32]
 8011586:	b90b      	cbnz	r3, 801158c <__swsetup_r+0x14>
 8011588:	f7fd ffee 	bl	800f568 <__sinit>
 801158c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011590:	0719      	lsls	r1, r3, #28
 8011592:	d422      	bmi.n	80115da <__swsetup_r+0x62>
 8011594:	06da      	lsls	r2, r3, #27
 8011596:	d407      	bmi.n	80115a8 <__swsetup_r+0x30>
 8011598:	2209      	movs	r2, #9
 801159a:	602a      	str	r2, [r5, #0]
 801159c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115a0:	81a3      	strh	r3, [r4, #12]
 80115a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115a6:	e033      	b.n	8011610 <__swsetup_r+0x98>
 80115a8:	0758      	lsls	r0, r3, #29
 80115aa:	d512      	bpl.n	80115d2 <__swsetup_r+0x5a>
 80115ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80115ae:	b141      	cbz	r1, 80115c2 <__swsetup_r+0x4a>
 80115b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115b4:	4299      	cmp	r1, r3
 80115b6:	d002      	beq.n	80115be <__swsetup_r+0x46>
 80115b8:	4628      	mov	r0, r5
 80115ba:	f7fe f917 	bl	800f7ec <_free_r>
 80115be:	2300      	movs	r3, #0
 80115c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80115c2:	89a3      	ldrh	r3, [r4, #12]
 80115c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80115c8:	81a3      	strh	r3, [r4, #12]
 80115ca:	2300      	movs	r3, #0
 80115cc:	6063      	str	r3, [r4, #4]
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	89a3      	ldrh	r3, [r4, #12]
 80115d4:	f043 0308 	orr.w	r3, r3, #8
 80115d8:	81a3      	strh	r3, [r4, #12]
 80115da:	6923      	ldr	r3, [r4, #16]
 80115dc:	b94b      	cbnz	r3, 80115f2 <__swsetup_r+0x7a>
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80115e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115e8:	d003      	beq.n	80115f2 <__swsetup_r+0x7a>
 80115ea:	4621      	mov	r1, r4
 80115ec:	4628      	mov	r0, r5
 80115ee:	f000 f883 	bl	80116f8 <__smakebuf_r>
 80115f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f6:	f013 0201 	ands.w	r2, r3, #1
 80115fa:	d00a      	beq.n	8011612 <__swsetup_r+0x9a>
 80115fc:	2200      	movs	r2, #0
 80115fe:	60a2      	str	r2, [r4, #8]
 8011600:	6962      	ldr	r2, [r4, #20]
 8011602:	4252      	negs	r2, r2
 8011604:	61a2      	str	r2, [r4, #24]
 8011606:	6922      	ldr	r2, [r4, #16]
 8011608:	b942      	cbnz	r2, 801161c <__swsetup_r+0xa4>
 801160a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801160e:	d1c5      	bne.n	801159c <__swsetup_r+0x24>
 8011610:	bd38      	pop	{r3, r4, r5, pc}
 8011612:	0799      	lsls	r1, r3, #30
 8011614:	bf58      	it	pl
 8011616:	6962      	ldrpl	r2, [r4, #20]
 8011618:	60a2      	str	r2, [r4, #8]
 801161a:	e7f4      	b.n	8011606 <__swsetup_r+0x8e>
 801161c:	2000      	movs	r0, #0
 801161e:	e7f7      	b.n	8011610 <__swsetup_r+0x98>
 8011620:	20000254 	.word	0x20000254

08011624 <_raise_r>:
 8011624:	291f      	cmp	r1, #31
 8011626:	b538      	push	{r3, r4, r5, lr}
 8011628:	4605      	mov	r5, r0
 801162a:	460c      	mov	r4, r1
 801162c:	d904      	bls.n	8011638 <_raise_r+0x14>
 801162e:	2316      	movs	r3, #22
 8011630:	6003      	str	r3, [r0, #0]
 8011632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801163a:	b112      	cbz	r2, 8011642 <_raise_r+0x1e>
 801163c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011640:	b94b      	cbnz	r3, 8011656 <_raise_r+0x32>
 8011642:	4628      	mov	r0, r5
 8011644:	f000 f830 	bl	80116a8 <_getpid_r>
 8011648:	4622      	mov	r2, r4
 801164a:	4601      	mov	r1, r0
 801164c:	4628      	mov	r0, r5
 801164e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011652:	f000 b817 	b.w	8011684 <_kill_r>
 8011656:	2b01      	cmp	r3, #1
 8011658:	d00a      	beq.n	8011670 <_raise_r+0x4c>
 801165a:	1c59      	adds	r1, r3, #1
 801165c:	d103      	bne.n	8011666 <_raise_r+0x42>
 801165e:	2316      	movs	r3, #22
 8011660:	6003      	str	r3, [r0, #0]
 8011662:	2001      	movs	r0, #1
 8011664:	e7e7      	b.n	8011636 <_raise_r+0x12>
 8011666:	2100      	movs	r1, #0
 8011668:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801166c:	4620      	mov	r0, r4
 801166e:	4798      	blx	r3
 8011670:	2000      	movs	r0, #0
 8011672:	e7e0      	b.n	8011636 <_raise_r+0x12>

08011674 <raise>:
 8011674:	4b02      	ldr	r3, [pc, #8]	@ (8011680 <raise+0xc>)
 8011676:	4601      	mov	r1, r0
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f7ff bfd3 	b.w	8011624 <_raise_r>
 801167e:	bf00      	nop
 8011680:	20000254 	.word	0x20000254

08011684 <_kill_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	4d07      	ldr	r5, [pc, #28]	@ (80116a4 <_kill_r+0x20>)
 8011688:	2300      	movs	r3, #0
 801168a:	4604      	mov	r4, r0
 801168c:	4608      	mov	r0, r1
 801168e:	4611      	mov	r1, r2
 8011690:	602b      	str	r3, [r5, #0]
 8011692:	f7f2 ff53 	bl	800453c <_kill>
 8011696:	1c43      	adds	r3, r0, #1
 8011698:	d102      	bne.n	80116a0 <_kill_r+0x1c>
 801169a:	682b      	ldr	r3, [r5, #0]
 801169c:	b103      	cbz	r3, 80116a0 <_kill_r+0x1c>
 801169e:	6023      	str	r3, [r4, #0]
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	2001c140 	.word	0x2001c140

080116a8 <_getpid_r>:
 80116a8:	f7f2 bf40 	b.w	800452c <_getpid>

080116ac <__swhatbuf_r>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	460c      	mov	r4, r1
 80116b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116b4:	2900      	cmp	r1, #0
 80116b6:	b096      	sub	sp, #88	@ 0x58
 80116b8:	4615      	mov	r5, r2
 80116ba:	461e      	mov	r6, r3
 80116bc:	da0d      	bge.n	80116da <__swhatbuf_r+0x2e>
 80116be:	89a3      	ldrh	r3, [r4, #12]
 80116c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80116c4:	f04f 0100 	mov.w	r1, #0
 80116c8:	bf14      	ite	ne
 80116ca:	2340      	movne	r3, #64	@ 0x40
 80116cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80116d0:	2000      	movs	r0, #0
 80116d2:	6031      	str	r1, [r6, #0]
 80116d4:	602b      	str	r3, [r5, #0]
 80116d6:	b016      	add	sp, #88	@ 0x58
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	466a      	mov	r2, sp
 80116dc:	f000 f848 	bl	8011770 <_fstat_r>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	dbec      	blt.n	80116be <__swhatbuf_r+0x12>
 80116e4:	9901      	ldr	r1, [sp, #4]
 80116e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116ee:	4259      	negs	r1, r3
 80116f0:	4159      	adcs	r1, r3
 80116f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116f6:	e7eb      	b.n	80116d0 <__swhatbuf_r+0x24>

080116f8 <__smakebuf_r>:
 80116f8:	898b      	ldrh	r3, [r1, #12]
 80116fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116fc:	079d      	lsls	r5, r3, #30
 80116fe:	4606      	mov	r6, r0
 8011700:	460c      	mov	r4, r1
 8011702:	d507      	bpl.n	8011714 <__smakebuf_r+0x1c>
 8011704:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	6123      	str	r3, [r4, #16]
 801170c:	2301      	movs	r3, #1
 801170e:	6163      	str	r3, [r4, #20]
 8011710:	b003      	add	sp, #12
 8011712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011714:	ab01      	add	r3, sp, #4
 8011716:	466a      	mov	r2, sp
 8011718:	f7ff ffc8 	bl	80116ac <__swhatbuf_r>
 801171c:	9f00      	ldr	r7, [sp, #0]
 801171e:	4605      	mov	r5, r0
 8011720:	4639      	mov	r1, r7
 8011722:	4630      	mov	r0, r6
 8011724:	f7fe fc08 	bl	800ff38 <_malloc_r>
 8011728:	b948      	cbnz	r0, 801173e <__smakebuf_r+0x46>
 801172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801172e:	059a      	lsls	r2, r3, #22
 8011730:	d4ee      	bmi.n	8011710 <__smakebuf_r+0x18>
 8011732:	f023 0303 	bic.w	r3, r3, #3
 8011736:	f043 0302 	orr.w	r3, r3, #2
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	e7e2      	b.n	8011704 <__smakebuf_r+0xc>
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	6020      	str	r0, [r4, #0]
 8011742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011746:	81a3      	strh	r3, [r4, #12]
 8011748:	9b01      	ldr	r3, [sp, #4]
 801174a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801174e:	b15b      	cbz	r3, 8011768 <__smakebuf_r+0x70>
 8011750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011754:	4630      	mov	r0, r6
 8011756:	f000 f81d 	bl	8011794 <_isatty_r>
 801175a:	b128      	cbz	r0, 8011768 <__smakebuf_r+0x70>
 801175c:	89a3      	ldrh	r3, [r4, #12]
 801175e:	f023 0303 	bic.w	r3, r3, #3
 8011762:	f043 0301 	orr.w	r3, r3, #1
 8011766:	81a3      	strh	r3, [r4, #12]
 8011768:	89a3      	ldrh	r3, [r4, #12]
 801176a:	431d      	orrs	r5, r3
 801176c:	81a5      	strh	r5, [r4, #12]
 801176e:	e7cf      	b.n	8011710 <__smakebuf_r+0x18>

08011770 <_fstat_r>:
 8011770:	b538      	push	{r3, r4, r5, lr}
 8011772:	4d07      	ldr	r5, [pc, #28]	@ (8011790 <_fstat_r+0x20>)
 8011774:	2300      	movs	r3, #0
 8011776:	4604      	mov	r4, r0
 8011778:	4608      	mov	r0, r1
 801177a:	4611      	mov	r1, r2
 801177c:	602b      	str	r3, [r5, #0]
 801177e:	f7f2 ff21 	bl	80045c4 <_fstat>
 8011782:	1c43      	adds	r3, r0, #1
 8011784:	d102      	bne.n	801178c <_fstat_r+0x1c>
 8011786:	682b      	ldr	r3, [r5, #0]
 8011788:	b103      	cbz	r3, 801178c <_fstat_r+0x1c>
 801178a:	6023      	str	r3, [r4, #0]
 801178c:	bd38      	pop	{r3, r4, r5, pc}
 801178e:	bf00      	nop
 8011790:	2001c140 	.word	0x2001c140

08011794 <_isatty_r>:
 8011794:	b538      	push	{r3, r4, r5, lr}
 8011796:	4d06      	ldr	r5, [pc, #24]	@ (80117b0 <_isatty_r+0x1c>)
 8011798:	2300      	movs	r3, #0
 801179a:	4604      	mov	r4, r0
 801179c:	4608      	mov	r0, r1
 801179e:	602b      	str	r3, [r5, #0]
 80117a0:	f7f2 ff20 	bl	80045e4 <_isatty>
 80117a4:	1c43      	adds	r3, r0, #1
 80117a6:	d102      	bne.n	80117ae <_isatty_r+0x1a>
 80117a8:	682b      	ldr	r3, [r5, #0]
 80117aa:	b103      	cbz	r3, 80117ae <_isatty_r+0x1a>
 80117ac:	6023      	str	r3, [r4, #0]
 80117ae:	bd38      	pop	{r3, r4, r5, pc}
 80117b0:	2001c140 	.word	0x2001c140

080117b4 <sqrt>:
 80117b4:	b538      	push	{r3, r4, r5, lr}
 80117b6:	ed2d 8b02 	vpush	{d8}
 80117ba:	ec55 4b10 	vmov	r4, r5, d0
 80117be:	f000 f825 	bl	801180c <__ieee754_sqrt>
 80117c2:	4622      	mov	r2, r4
 80117c4:	462b      	mov	r3, r5
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	eeb0 8a40 	vmov.f32	s16, s0
 80117ce:	eef0 8a60 	vmov.f32	s17, s1
 80117d2:	f7ef fa03 	bl	8000bdc <__aeabi_dcmpun>
 80117d6:	b990      	cbnz	r0, 80117fe <sqrt+0x4a>
 80117d8:	2200      	movs	r2, #0
 80117da:	2300      	movs	r3, #0
 80117dc:	4620      	mov	r0, r4
 80117de:	4629      	mov	r1, r5
 80117e0:	f7ef f9d4 	bl	8000b8c <__aeabi_dcmplt>
 80117e4:	b158      	cbz	r0, 80117fe <sqrt+0x4a>
 80117e6:	f7fd ffb7 	bl	800f758 <__errno>
 80117ea:	2321      	movs	r3, #33	@ 0x21
 80117ec:	6003      	str	r3, [r0, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	2300      	movs	r3, #0
 80117f2:	4610      	mov	r0, r2
 80117f4:	4619      	mov	r1, r3
 80117f6:	f7ef f881 	bl	80008fc <__aeabi_ddiv>
 80117fa:	ec41 0b18 	vmov	d8, r0, r1
 80117fe:	eeb0 0a48 	vmov.f32	s0, s16
 8011802:	eef0 0a68 	vmov.f32	s1, s17
 8011806:	ecbd 8b02 	vpop	{d8}
 801180a:	bd38      	pop	{r3, r4, r5, pc}

0801180c <__ieee754_sqrt>:
 801180c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	4a68      	ldr	r2, [pc, #416]	@ (80119b4 <__ieee754_sqrt+0x1a8>)
 8011812:	ec55 4b10 	vmov	r4, r5, d0
 8011816:	43aa      	bics	r2, r5
 8011818:	462b      	mov	r3, r5
 801181a:	4621      	mov	r1, r4
 801181c:	d110      	bne.n	8011840 <__ieee754_sqrt+0x34>
 801181e:	4622      	mov	r2, r4
 8011820:	4620      	mov	r0, r4
 8011822:	4629      	mov	r1, r5
 8011824:	f7ee ff40 	bl	80006a8 <__aeabi_dmul>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4620      	mov	r0, r4
 801182e:	4629      	mov	r1, r5
 8011830:	f7ee fd84 	bl	800033c <__adddf3>
 8011834:	4604      	mov	r4, r0
 8011836:	460d      	mov	r5, r1
 8011838:	ec45 4b10 	vmov	d0, r4, r5
 801183c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011840:	2d00      	cmp	r5, #0
 8011842:	dc0e      	bgt.n	8011862 <__ieee754_sqrt+0x56>
 8011844:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011848:	4322      	orrs	r2, r4
 801184a:	d0f5      	beq.n	8011838 <__ieee754_sqrt+0x2c>
 801184c:	b19d      	cbz	r5, 8011876 <__ieee754_sqrt+0x6a>
 801184e:	4622      	mov	r2, r4
 8011850:	4620      	mov	r0, r4
 8011852:	4629      	mov	r1, r5
 8011854:	f7ee fd70 	bl	8000338 <__aeabi_dsub>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	f7ef f84e 	bl	80008fc <__aeabi_ddiv>
 8011860:	e7e8      	b.n	8011834 <__ieee754_sqrt+0x28>
 8011862:	152a      	asrs	r2, r5, #20
 8011864:	d115      	bne.n	8011892 <__ieee754_sqrt+0x86>
 8011866:	2000      	movs	r0, #0
 8011868:	e009      	b.n	801187e <__ieee754_sqrt+0x72>
 801186a:	0acb      	lsrs	r3, r1, #11
 801186c:	3a15      	subs	r2, #21
 801186e:	0549      	lsls	r1, r1, #21
 8011870:	2b00      	cmp	r3, #0
 8011872:	d0fa      	beq.n	801186a <__ieee754_sqrt+0x5e>
 8011874:	e7f7      	b.n	8011866 <__ieee754_sqrt+0x5a>
 8011876:	462a      	mov	r2, r5
 8011878:	e7fa      	b.n	8011870 <__ieee754_sqrt+0x64>
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	3001      	adds	r0, #1
 801187e:	02dc      	lsls	r4, r3, #11
 8011880:	d5fb      	bpl.n	801187a <__ieee754_sqrt+0x6e>
 8011882:	1e44      	subs	r4, r0, #1
 8011884:	1b12      	subs	r2, r2, r4
 8011886:	f1c0 0420 	rsb	r4, r0, #32
 801188a:	fa21 f404 	lsr.w	r4, r1, r4
 801188e:	4323      	orrs	r3, r4
 8011890:	4081      	lsls	r1, r0
 8011892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011896:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801189a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801189e:	07d2      	lsls	r2, r2, #31
 80118a0:	bf5c      	itt	pl
 80118a2:	005b      	lslpl	r3, r3, #1
 80118a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80118a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118ac:	bf58      	it	pl
 80118ae:	0049      	lslpl	r1, r1, #1
 80118b0:	2600      	movs	r6, #0
 80118b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80118b6:	106d      	asrs	r5, r5, #1
 80118b8:	0049      	lsls	r1, r1, #1
 80118ba:	2016      	movs	r0, #22
 80118bc:	4632      	mov	r2, r6
 80118be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80118c2:	1917      	adds	r7, r2, r4
 80118c4:	429f      	cmp	r7, r3
 80118c6:	bfde      	ittt	le
 80118c8:	193a      	addle	r2, r7, r4
 80118ca:	1bdb      	suble	r3, r3, r7
 80118cc:	1936      	addle	r6, r6, r4
 80118ce:	0fcf      	lsrs	r7, r1, #31
 80118d0:	3801      	subs	r0, #1
 80118d2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80118d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80118de:	d1f0      	bne.n	80118c2 <__ieee754_sqrt+0xb6>
 80118e0:	4604      	mov	r4, r0
 80118e2:	2720      	movs	r7, #32
 80118e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80118e8:	429a      	cmp	r2, r3
 80118ea:	eb00 0e0c 	add.w	lr, r0, ip
 80118ee:	db02      	blt.n	80118f6 <__ieee754_sqrt+0xea>
 80118f0:	d113      	bne.n	801191a <__ieee754_sqrt+0x10e>
 80118f2:	458e      	cmp	lr, r1
 80118f4:	d811      	bhi.n	801191a <__ieee754_sqrt+0x10e>
 80118f6:	f1be 0f00 	cmp.w	lr, #0
 80118fa:	eb0e 000c 	add.w	r0, lr, ip
 80118fe:	da42      	bge.n	8011986 <__ieee754_sqrt+0x17a>
 8011900:	2800      	cmp	r0, #0
 8011902:	db40      	blt.n	8011986 <__ieee754_sqrt+0x17a>
 8011904:	f102 0801 	add.w	r8, r2, #1
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	458e      	cmp	lr, r1
 801190c:	bf88      	it	hi
 801190e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8011912:	eba1 010e 	sub.w	r1, r1, lr
 8011916:	4464      	add	r4, ip
 8011918:	4642      	mov	r2, r8
 801191a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801191e:	3f01      	subs	r7, #1
 8011920:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011924:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011928:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801192c:	d1dc      	bne.n	80118e8 <__ieee754_sqrt+0xdc>
 801192e:	4319      	orrs	r1, r3
 8011930:	d01b      	beq.n	801196a <__ieee754_sqrt+0x15e>
 8011932:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80119b8 <__ieee754_sqrt+0x1ac>
 8011936:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80119bc <__ieee754_sqrt+0x1b0>
 801193a:	e9da 0100 	ldrd	r0, r1, [sl]
 801193e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011942:	f7ee fcf9 	bl	8000338 <__aeabi_dsub>
 8011946:	e9da 8900 	ldrd	r8, r9, [sl]
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	4640      	mov	r0, r8
 8011950:	4649      	mov	r1, r9
 8011952:	f7ef f925 	bl	8000ba0 <__aeabi_dcmple>
 8011956:	b140      	cbz	r0, 801196a <__ieee754_sqrt+0x15e>
 8011958:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801195c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011960:	e9db 2300 	ldrd	r2, r3, [fp]
 8011964:	d111      	bne.n	801198a <__ieee754_sqrt+0x17e>
 8011966:	3601      	adds	r6, #1
 8011968:	463c      	mov	r4, r7
 801196a:	1072      	asrs	r2, r6, #1
 801196c:	0863      	lsrs	r3, r4, #1
 801196e:	07f1      	lsls	r1, r6, #31
 8011970:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011974:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011978:	bf48      	it	mi
 801197a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801197e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011982:	4618      	mov	r0, r3
 8011984:	e756      	b.n	8011834 <__ieee754_sqrt+0x28>
 8011986:	4690      	mov	r8, r2
 8011988:	e7be      	b.n	8011908 <__ieee754_sqrt+0xfc>
 801198a:	f7ee fcd7 	bl	800033c <__adddf3>
 801198e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011992:	4602      	mov	r2, r0
 8011994:	460b      	mov	r3, r1
 8011996:	4640      	mov	r0, r8
 8011998:	4649      	mov	r1, r9
 801199a:	f7ef f8f7 	bl	8000b8c <__aeabi_dcmplt>
 801199e:	b120      	cbz	r0, 80119aa <__ieee754_sqrt+0x19e>
 80119a0:	1ca0      	adds	r0, r4, #2
 80119a2:	bf08      	it	eq
 80119a4:	3601      	addeq	r6, #1
 80119a6:	3402      	adds	r4, #2
 80119a8:	e7df      	b.n	801196a <__ieee754_sqrt+0x15e>
 80119aa:	1c63      	adds	r3, r4, #1
 80119ac:	f023 0401 	bic.w	r4, r3, #1
 80119b0:	e7db      	b.n	801196a <__ieee754_sqrt+0x15e>
 80119b2:	bf00      	nop
 80119b4:	7ff00000 	.word	0x7ff00000
 80119b8:	200002b0 	.word	0x200002b0
 80119bc:	200002a8 	.word	0x200002a8

080119c0 <_init>:
 80119c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c2:	bf00      	nop
 80119c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119c6:	bc08      	pop	{r3}
 80119c8:	469e      	mov	lr, r3
 80119ca:	4770      	bx	lr

080119cc <_fini>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	bf00      	nop
 80119d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d2:	bc08      	pop	{r3}
 80119d4:	469e      	mov	lr, r3
 80119d6:	4770      	bx	lr
