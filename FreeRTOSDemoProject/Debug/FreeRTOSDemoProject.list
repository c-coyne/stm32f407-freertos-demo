
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800abcc  0800abcc  0000bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b69c  0800b69c  0000d0cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b69c  0800b69c  0000c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6a4  0800b6a4  0000d0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6a4  0800b6a4  0000c6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b6a8  0800b6a8  0000c6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0800b6ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0cc  2**0
                  CONTENTS
 10 .bss          0001951c  200000cc  200000cc  0000d0cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200195e8  200195e8  0000d0cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019741  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004083  00000000  00000000  0002683d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0002a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001147  00000000  00000000  0002bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025567  00000000  00000000  0002d04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd2a  00000000  00000000  000525b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc69  00000000  00000000  0006e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014bf49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062c0  00000000  00000000  0014bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0015224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abb4 	.word	0x0800abb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800abb4 	.word	0x0800abb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <acc_task>:
 * - xQueueSend(): Sends messages to a queue for printing messages to the user.						   *
 * - xEventGroupSetBits(): Sets event group bits for synchronizing with the LED task.				   *
 ******************************************************************************************************/

void acc_task(void* param)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags
 8000d84:	4b80      	ldr	r3, [pc, #512]	@ (8000f88 <acc_task+0x20c>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	81bb      	strh	r3, [r7, #12]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f007 ffa0 	bl	8008ce0 <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 8000da0:	4b7a      	ldr	r3, [pc, #488]	@ (8000f8c <acc_task+0x210>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000daa:	4979      	ldr	r1, [pc, #484]	@ (8000f90 <acc_task+0x214>)
 8000dac:	f006 f9ce 	bl	800714c <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	9200      	str	r2, [sp, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f007 ff8e 	bl	8008ce0 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	61fb      	str	r3, [r7, #28]

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dcc:	e008      	b.n	8000de0 <acc_task+0x64>
			acc_flag[i] = 0;
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	4413      	add	r3, r2
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++) {
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	ddf3      	ble.n	8000dce <acc_task+0x52>
		}

		// Process command
		if(msg->len <= 4) {
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	f200 80b5 	bhi.w	8000f5a <acc_task+0x1de>
			if(!strcmp((char*)msg->payload, "X")) {
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	4968      	ldr	r1, [pc, #416]	@ (8000f94 <acc_task+0x218>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9eb 	bl	80001d0 <strcmp>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d115      	bne.n	8000e2c <acc_task+0xb0>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f901 	bl	800100c <accelerometer_read>
				acc_flag[0] = 1; 									// Set X-axis new data flag
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	733b      	strb	r3, [r7, #12]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000e0e:	f107 020c 	add.w	r2, r7, #12
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f93d 	bl	8001098 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);	// Set X-axis event group bit for LED task synchronization
 8000e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000f98 <acc_task+0x21c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 ff3f 	bl	8006ca8 <xEventGroupSetBits>
 8000e2a:	e09e      	b.n	8000f6a <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Y")) {
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	495b      	ldr	r1, [pc, #364]	@ (8000f9c <acc_task+0x220>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f9cd 	bl	80001d0 <strcmp>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d115      	bne.n	8000e68 <acc_task+0xec>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f8e3 	bl	800100c <accelerometer_read>
				acc_flag[1] = 1; 									// Set Y-axis new data flag
 8000e46:	2301      	movs	r3, #1
 8000e48:	737b      	strb	r3, [r7, #13]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f91f 	bl	8001098 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT); 	// Set Y-axis event group bit for LED task synchronization
 8000e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f98 <acc_task+0x21c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 ff21 	bl	8006ca8 <xEventGroupSetBits>
 8000e66:	e080      	b.n	8000f6a <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Z")) {
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	494d      	ldr	r1, [pc, #308]	@ (8000fa0 <acc_task+0x224>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9af 	bl	80001d0 <strcmp>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d115      	bne.n	8000ea4 <acc_task+0x128>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f8c5 	bl	800100c <accelerometer_read>
				acc_flag[2] = 1; 									// Set Z-axis new data flag
 8000e82:	2301      	movs	r3, #1
 8000e84:	73bb      	strb	r3, [r7, #14]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000e86:	f107 020c 	add.w	r2, r7, #12
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f901 	bl	8001098 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);	// Set Z-axis event group bit for LED task synchronization
 8000e96:	4b40      	ldr	r3, [pc, #256]	@ (8000f98 <acc_task+0x21c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 ff03 	bl	8006ca8 <xEventGroupSetBits>
 8000ea2:	e062      	b.n	8000f6a <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "All")) {
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	493f      	ldr	r1, [pc, #252]	@ (8000fa4 <acc_task+0x228>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff f991 	bl	80001d0 <strcmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d12e      	bne.n	8000f12 <acc_task+0x196>
				accelerometer_read(acc_data);						// Read data
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f8a7 	bl	800100c <accelerometer_read>
				for(int i=0; i<3; i++) acc_flag[i] = 1; 			// Set new data flags for all axes
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	e008      	b.n	8000ed6 <acc_task+0x15a>
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	4413      	add	r3, r2
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	ddf3      	ble.n	8000ec4 <acc_task+0x148>
				show_acc_data(acc_data, acc_flag);					// Show data
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f8d6 	bl	8001098 <show_acc_data>
				// Set all event group bits for LED task synchronization
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <acc_task+0x21c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 fed8 	bl	8006ca8 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT);
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <acc_task+0x21c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fed2 	bl	8006ca8 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <acc_task+0x21c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fecc 	bl	8006ca8 <xEventGroupSetBits>
 8000f10:	e02b      	b.n	8000f6a <acc_task+0x1ee>
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4924      	ldr	r1, [pc, #144]	@ (8000fa8 <acc_task+0x22c>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f95a 	bl	80001d0 <strcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d112      	bne.n	8000f48 <acc_task+0x1cc>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <acc_task+0x230>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

				// Set event group bit to turn off all LEDs upon exiting accelerometer menu
				xEventGroupSetBits(ledEventGroup, TURN_OFF_LEDS_BIT);
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <acc_task+0x21c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 feba 	bl	8006ca8 <xEventGroupSetBits>

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <acc_task+0x234>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	f007 ff4d 	bl	8008de0 <xTaskGenericNotify>
 8000f46:	e010      	b.n	8000f6a <acc_task+0x1ee>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <acc_task+0x210>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f52:	4918      	ldr	r1, [pc, #96]	@ (8000fb4 <acc_task+0x238>)
 8000f54:	f006 f8fa 	bl	800714c <xQueueGenericSend>
 8000f58:	e007      	b.n	8000f6a <acc_task+0x1ee>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <acc_task+0x210>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f64:	4913      	ldr	r1, [pc, #76]	@ (8000fb4 <acc_task+0x238>)
 8000f66:	f006 f8f1 	bl	800714c <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <acc_task+0x230>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	f47f af0d 	bne.w	8000d8e <acc_task+0x12>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <acc_task+0x23c>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	f007 ff2d 	bl	8008de0 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f86:	e702      	b.n	8000d8e <acc_task+0x12>
 8000f88:	0800ad24 	.word	0x0800ad24
 8000f8c:	20000280 	.word	0x20000280
 8000f90:	20000004 	.word	0x20000004
 8000f94:	0800ad0c 	.word	0x0800ad0c
 8000f98:	20000298 	.word	0x20000298
 8000f9c:	0800ad10 	.word	0x0800ad10
 8000fa0:	0800ad14 	.word	0x0800ad14
 8000fa4:	0800ad18 	.word	0x0800ad18
 8000fa8:	0800ad1c 	.word	0x0800ad1c
 8000fac:	200002a5 	.word	0x200002a5
 8000fb0:	20000268 	.word	0x20000268
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	2000027c 	.word	0x2000027c

08000fbc <accelerometer_init>:
 * - Sends the configuration data over SPI to set the desired settings.								   *
 * - Pulls the chip select (CS) pin high to de-select the device.									   *
 ******************************************************************************************************/

void accelerometer_init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
 8000fc2:	2357      	movs	r3, #87	@ 0x57
 8000fc4:	71fb      	strb	r3, [r7, #7]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2108      	movs	r1, #8
 8000fca:	480e      	ldr	r0, [pc, #56]	@ (8001004 <accelerometer_init+0x48>)
 8000fcc:	f002 fbc8 	bl	8003760 <HAL_GPIO_WritePin>

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
 8000fd0:	2320      	movs	r3, #32
 8000fd2:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000fd4:	1db9      	adds	r1, r7, #6
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fda:	2201      	movs	r2, #1
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <accelerometer_init+0x4c>)
 8000fde:	f003 fd34 	bl	8004a4a <HAL_SPI_Transmit>

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);
 8000fe2:	1df9      	adds	r1, r7, #7
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4807      	ldr	r0, [pc, #28]	@ (8001008 <accelerometer_init+0x4c>)
 8000fec:	f003 fd2d 	bl	8004a4a <HAL_SPI_Transmit>

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <accelerometer_init+0x48>)
 8000ff6:	f002 fbb3 	bl	8003760 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	200001c8 	.word	0x200001c8

0800100c <accelerometer_read>:
 * - Converts the received byte data to 16-bit integer values for each axis and stores them in the 	   *
 *   provided array.																				   *
 ******************************************************************************************************/

void accelerometer_read(int16_t *acc_data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;
 8001014:	23a8      	movs	r3, #168	@ 0xa8
 8001016:	73fb      	strb	r3, [r7, #15]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	481c      	ldr	r0, [pc, #112]	@ (8001090 <accelerometer_read+0x84>)
 800101e:	f002 fb9f 	bl	8003760 <HAL_GPIO_WritePin>

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8001022:	f107 010f 	add.w	r1, r7, #15
 8001026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102a:	2201      	movs	r2, #1
 800102c:	4819      	ldr	r0, [pc, #100]	@ (8001094 <accelerometer_read+0x88>)
 800102e:	f003 fd0c 	bl	8004a4a <HAL_SPI_Transmit>

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);
 8001032:	f107 0110 	add.w	r1, r7, #16
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103a:	2206      	movs	r2, #6
 800103c:	4815      	ldr	r0, [pc, #84]	@ (8001094 <accelerometer_read+0x88>)
 800103e:	f003 fe47 	bl	8004cd0 <HAL_SPI_Receive>

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2108      	movs	r1, #8
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <accelerometer_read+0x84>)
 8001048:	f002 fb8a 	bl	8003760 <HAL_GPIO_WritePin>

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
 800104c:	7c7b      	ldrb	r3, [r7, #17]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b219      	sxth	r1, r3
 8001064:	7cbb      	ldrb	r3, [r7, #18]
 8001066:	b21a      	sxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	430a      	orrs	r2, r1
 800106e:	b212      	sxth	r2, r2
 8001070:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b219      	sxth	r1, r3
 8001078:	7d3b      	ldrb	r3, [r7, #20]
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3304      	adds	r3, #4
 8001080:	430a      	orrs	r2, r1
 8001082:	b212      	sxth	r2, r2
 8001084:	801a      	strh	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	200001c8 	.word	0x200001c8

08001098 <show_acc_data>:
 * - Formats and displays data in g values for the available axes based on flags.					   *
 * - Sends the formatted data to the print queue for display.										   *
 ******************************************************************************************************/

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b097      	sub	sp, #92	@ 0x5c
 800109c:	af08      	add	r7, sp, #32
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	// Set up buffer
	static char showacc[80];
	static char* acc = showacc;

	// Convert from raw sensor value to milli-g's [mg], using +/- 2g sensitivity
	int16_t x_mg = acc_data[0] * 2000 / 32768;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	461a      	mov	r2, r3
 80010aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da02      	bge.n	80010bc <show_acc_data+0x24>
 80010b6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80010ba:	337f      	adds	r3, #127	@ 0x7f
 80010bc:	13db      	asrs	r3, r3, #15
 80010be:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y_mg = acc_data[1] * 2000 / 32768;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3302      	adds	r3, #2
 80010c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c8:	461a      	mov	r2, r3
 80010ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da02      	bge.n	80010dc <show_acc_data+0x44>
 80010d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80010da:	337f      	adds	r3, #127	@ 0x7f
 80010dc:	13db      	asrs	r3, r3, #15
 80010de:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t z_mg = acc_data[2] * 2000 / 32768;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3304      	adds	r3, #4
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da02      	bge.n	80010fc <show_acc_data+0x64>
 80010f6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80010fa:	337f      	adds	r3, #127	@ 0x7f
 80010fc:	13db      	asrs	r3, r3, #15
 80010fe:	867b      	strh	r3, [r7, #50]	@ 0x32

	// Variables to simulate floating point numbers
	int x_i, x_d, y_i, y_d, z_i, z_d;
	char x_s[2] = {"+"};
 8001100:	232b      	movs	r3, #43	@ 0x2b
 8001102:	82bb      	strh	r3, [r7, #20]
	char y_s[2] = {"+"};
 8001104:	232b      	movs	r3, #43	@ 0x2b
 8001106:	823b      	strh	r3, [r7, #16]
	char z_s[2] = {"+"};
 8001108:	232b      	movs	r3, #43	@ 0x2b
 800110a:	81bb      	strh	r3, [r7, #12]

	// Display the data that's available
	// All axes
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d141      	bne.n	8001198 <show_acc_data+0x100>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d13c      	bne.n	8001198 <show_acc_data+0x100>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3302      	adds	r3, #2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d137      	bne.n	8001198 <show_acc_data+0x100>
		split_integer(x_mg, x_s, &x_i, &x_d);
 8001128:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 800112c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001130:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	f000 f894 	bl	8001264 <split_integer>
		split_integer(y_mg, y_s, &y_i, &y_d);
 800113c:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001148:	f107 0110 	add.w	r1, r7, #16
 800114c:	f000 f88a 	bl	8001264 <split_integer>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001150:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	f107 021c 	add.w	r2, r7, #28
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	f000 f880 	bl	8001264 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g, Y = %s%d.%d g, Z = %s%d.%d g\r\n", x_s, x_i, x_d, y_s, y_i, y_d, z_s, z_i, z_d);
 8001164:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	69bc      	ldr	r4, [r7, #24]
 8001170:	f107 0514 	add.w	r5, r7, #20
 8001174:	9406      	str	r4, [sp, #24]
 8001176:	9005      	str	r0, [sp, #20]
 8001178:	f107 000c 	add.w	r0, r7, #12
 800117c:	9004      	str	r0, [sp, #16]
 800117e:	9103      	str	r1, [sp, #12]
 8001180:	9202      	str	r2, [sp, #8]
 8001182:	f107 0210 	add.w	r2, r7, #16
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4633      	mov	r3, r6
 800118c:	462a      	mov	r2, r5
 800118e:	492e      	ldr	r1, [pc, #184]	@ (8001248 <show_acc_data+0x1b0>)
 8001190:	482e      	ldr	r0, [pc, #184]	@ (800124c <show_acc_data+0x1b4>)
 8001192:	f009 f86f 	bl	800a274 <siprintf>
 8001196:	e04b      	b.n	8001230 <show_acc_data+0x198>
	}
	// X-axis only
	else if (acc_flag[0] == 1) {
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d114      	bne.n	80011ca <show_acc_data+0x132>
		split_integer(x_mg, x_s, &x_i, &x_d);
 80011a0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80011a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011ac:	f107 0114 	add.w	r1, r7, #20
 80011b0:	f000 f858 	bl	8001264 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g\r\n", x_s, x_i, x_d);
 80011b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b8:	f107 0214 	add.w	r2, r7, #20
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	460b      	mov	r3, r1
 80011c0:	4923      	ldr	r1, [pc, #140]	@ (8001250 <show_acc_data+0x1b8>)
 80011c2:	4822      	ldr	r0, [pc, #136]	@ (800124c <show_acc_data+0x1b4>)
 80011c4:	f009 f856 	bl	800a274 <siprintf>
 80011c8:	e032      	b.n	8001230 <show_acc_data+0x198>
	}
	// Y-axis only
	else if (acc_flag[1] == 1) {
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d114      	bne.n	80011fe <show_acc_data+0x166>
		split_integer(y_mg, y_s, &y_i, &y_d);
 80011d4:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011e0:	f107 0110 	add.w	r1, r7, #16
 80011e4:	f000 f83e 	bl	8001264 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Y = %s%d.%d g\r\n", y_s, y_i, y_d);
 80011e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f107 0210 	add.w	r2, r7, #16
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	4917      	ldr	r1, [pc, #92]	@ (8001254 <show_acc_data+0x1bc>)
 80011f6:	4815      	ldr	r0, [pc, #84]	@ (800124c <show_acc_data+0x1b4>)
 80011f8:	f009 f83c 	bl	800a274 <siprintf>
 80011fc:	e018      	b.n	8001230 <show_acc_data+0x198>
	}
	// Z-axis only
	else if (acc_flag[2] == 1) {
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3302      	adds	r3, #2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d113      	bne.n	8001230 <show_acc_data+0x198>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001208:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	f107 021c 	add.w	r2, r7, #28
 8001214:	f107 010c 	add.w	r1, r7, #12
 8001218:	f000 f824 	bl	8001264 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Z = %s%d.%d g\r\n", z_s, z_i, z_d);
 800121c:	69f9      	ldr	r1, [r7, #28]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	460b      	mov	r3, r1
 8001228:	490b      	ldr	r1, [pc, #44]	@ (8001258 <show_acc_data+0x1c0>)
 800122a:	4808      	ldr	r0, [pc, #32]	@ (800124c <show_acc_data+0x1b4>)
 800122c:	f009 f822 	bl	800a274 <siprintf>
	}

	// Populate the print queue
	xQueueSend(q_print, &acc, portMAX_DELAY);
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <show_acc_data+0x1c4>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800123a:	4909      	ldr	r1, [pc, #36]	@ (8001260 <show_acc_data+0x1c8>)
 800123c:	f005 ff86 	bl	800714c <xQueueGenericSend>
}
 8001240:	bf00      	nop
 8001242:	373c      	adds	r7, #60	@ 0x3c
 8001244:	46bd      	mov	sp, r7
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001248:	0800ad28 	.word	0x0800ad28
 800124c:	200000e8 	.word	0x200000e8
 8001250:	0800ad70 	.word	0x0800ad70
 8001254:	0800ad98 	.word	0x0800ad98
 8001258:	0800adc0 	.word	0x0800adc0
 800125c:	20000280 	.word	0x20000280
 8001260:	20000008 	.word	0x20000008

08001264 <split_integer>:
 * the hundreds part is always positive. If the hundreds part rounds up to exactly 1000, the 		   *
 * thousands part is incremented and the hundreds part is reset to 0.								   *
 ******************************************************************************************************/

void split_integer(int value, char* sign, int *thousands_part, int *hundreds_part)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
	// Evaluate the sign
	if(value < 0) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da06      	bge.n	8001286 <split_integer+0x22>
		strcpy(sign, "-");
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4925      	ldr	r1, [pc, #148]	@ (8001310 <split_integer+0xac>)
 800127c:	461a      	mov	r2, r3
 800127e:	460b      	mov	r3, r1
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	8013      	strh	r3, [r2, #0]
 8001284:	e005      	b.n	8001292 <split_integer+0x2e>
	}
	else {
		strcpy(sign, "+");
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	4922      	ldr	r1, [pc, #136]	@ (8001314 <split_integer+0xb0>)
 800128a:	461a      	mov	r2, r3
 800128c:	460b      	mov	r3, r1
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	8013      	strh	r3, [r2, #0]
	}

	// Calculate how many thousands
    *thousands_part = abs(value / 1000);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <split_integer+0xb4>)
 8001296:	fb82 1203 	smull	r1, r2, r2, r3
 800129a:	1192      	asrs	r2, r2, #6
 800129c:	17db      	asrs	r3, r3, #31
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]

    // Calculate the remaining hundreds
    int remainder = value % 1000;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <split_integer+0xb4>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1191      	asrs	r1, r2, #6
 80012b6:	17da      	asrs	r2, r3, #31
 80012b8:	1a8a      	subs	r2, r1, r2
 80012ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012be:	fb01 f202 	mul.w	r2, r1, r2
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

    // Ensure hundreds_part is positive
    *hundreds_part = abs((int)(remainder / 100.0));
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff f93c 	bl	8000544 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <split_integer+0xb8>)
 80012d2:	f7ff facb 	bl	800086c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbad 	bl	8000a3c <__aeabi_d2iz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]

    // Adjust thousands_part if rounding up results in exactly 1000
    if (*hundreds_part == 10) {
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b0a      	cmp	r3, #10
 80012f6:	d107      	bne.n	8001308 <split_integer+0xa4>
        *thousands_part += 1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
        *hundreds_part = 0;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
    }
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	0800ade8 	.word	0x0800ade8
 8001314:	0800adec 	.word	0x0800adec
 8001318:	10624dd3 	.word	0x10624dd3
 800131c:	40590000 	.word	0x40590000

08001320 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af02      	add	r7, sp, #8
 8001326:	6078      	str	r0, [r7, #4]
	// Communication variables
	uint32_t msg_addr;
	message_t *msg;

	// LED timer parameters
	int freq = 2; // Frequency in Hz
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
	int period = 500; // Period in ms
 800132c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24

	// FreeRTOS variables
	const TickType_t xTicksToWait = pdMS_TO_TICKS(EVENT_GROUP_WAIT_TIME); // Wait period for the event group
 8001332:	2364      	movs	r3, #100	@ 0x64
 8001334:	623b      	str	r3, [r7, #32]
	uint32_t notificationValue;
	EventBits_t eventBits;

	while(1) {
		// Wait for task notification or timeout =========================================================================
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4613      	mov	r3, r2
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f007 fccb 	bl	8008ce0 <xTaskGenericNotifyWait>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 817a 	bne.w	8001646 <led_task+0x326>
																														//
			// Display LED menu for the user																			//
			xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);															//
 8001352:	4b9a      	ldr	r3, [pc, #616]	@ (80015bc <led_task+0x29c>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800135c:	4998      	ldr	r1, [pc, #608]	@ (80015c0 <led_task+0x2a0>)
 800135e:	f005 fef5 	bl	800714c <xQueueGenericSend>
																														//
			// Wait for the user to select their desired LED effect														//
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);															//
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f007 fcb5 	bl	8008ce0 <xTaskGenericNotifyWait>
			msg = (message_t*)msg_addr;																					//
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	61fb      	str	r3, [r7, #28]
																														//
			// Process command, adjust LED state, and set software timers accordingly									//
			if(msg->len <= 4) {																							//
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b04      	cmp	r3, #4
 8001380:	f200 814c 	bhi.w	800161c <led_task+0x2fc>
				if(!strcmp((char*)msg->payload, "None"))			// No effect										//
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	498f      	ldr	r1, [pc, #572]	@ (80015c4 <led_task+0x2a4>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff21 	bl	80001d0 <strcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <led_task+0x88>
				{																										//
					set_led_timer(effectNone);																			//
 8001394:	2004      	movs	r0, #4
 8001396:	f000 fa25 	bl	80017e4 <set_led_timer>
					curr_led_state = sNone;																				//
 800139a:	4b8b      	ldr	r3, [pc, #556]	@ (80015c8 <led_task+0x2a8>)
 800139c:	2204      	movs	r2, #4
 800139e:	701a      	strb	r2, [r3, #0]
					control_all_leds(LED_OFF);																			//
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 fa51 	bl	8001848 <control_all_leds>
 80013a6:	e141      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect										//
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	4988      	ldr	r1, [pc, #544]	@ (80015cc <led_task+0x2ac>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff0f 	bl	80001d0 <strcmp>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d106      	bne.n	80013c6 <led_task+0xa6>
					curr_led_state = sEffectE1;																			//
 80013b8:	4b83      	ldr	r3, [pc, #524]	@ (80015c8 <led_task+0x2a8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE1);																			//
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 fa10 	bl	80017e4 <set_led_timer>
 80013c4:	e132      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect										//
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4981      	ldr	r1, [pc, #516]	@ (80015d0 <led_task+0x2b0>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe ff00 	bl	80001d0 <strcmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <led_task+0xc4>
					curr_led_state = sEffectE2;																			//
 80013d6:	4b7c      	ldr	r3, [pc, #496]	@ (80015c8 <led_task+0x2a8>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE2);																			//
 80013dc:	2001      	movs	r0, #1
 80013de:	f000 fa01 	bl	80017e4 <set_led_timer>
 80013e2:	e123      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect										//
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	497b      	ldr	r1, [pc, #492]	@ (80015d4 <led_task+0x2b4>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe fef1 	bl	80001d0 <strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d106      	bne.n	8001402 <led_task+0xe2>
					curr_led_state = sEffectE3;																			//
 80013f4:	4b74      	ldr	r3, [pc, #464]	@ (80015c8 <led_task+0x2a8>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE3);																			//
 80013fa:	2002      	movs	r0, #2
 80013fc:	f000 f9f2 	bl	80017e4 <set_led_timer>
 8001400:	e114      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect										//
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4974      	ldr	r1, [pc, #464]	@ (80015d8 <led_task+0x2b8>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fee2 	bl	80001d0 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <led_task+0x100>
					curr_led_state = sEffectE4;																			//
 8001412:	4b6d      	ldr	r3, [pc, #436]	@ (80015c8 <led_task+0x2a8>)
 8001414:	2203      	movs	r2, #3
 8001416:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE4);																			//
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f9e3 	bl	80017e4 <set_led_timer>
 800141e:	e105      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "Tor")) {		// Toggle orange LED								//
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	496e      	ldr	r1, [pc, #440]	@ (80015dc <led_task+0x2bc>)
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fed3 	bl	80001d0 <strcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10b      	bne.n	8001448 <led_task+0x128>
					set_led_timer(effectNone);																			//
 8001430:	2004      	movs	r0, #4
 8001432:	f000 f9d7 	bl	80017e4 <set_led_timer>
					curr_led_state = sNone;																				//
 8001436:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <led_task+0x2a8>)
 8001438:	2204      	movs	r2, #4
 800143a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(ORANGE_LED_PORT, ORANGE_LED_PIN);												//
 800143c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001440:	4867      	ldr	r0, [pc, #412]	@ (80015e0 <led_task+0x2c0>)
 8001442:	f002 f9a6 	bl	8003792 <HAL_GPIO_TogglePin>
 8001446:	e0f1      	b.n	800162c <led_task+0x30c>
				}																										// N
				else if (!strcmp((char*)msg->payload, "Tgr")) {		// Toggle green LED									// O
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4966      	ldr	r1, [pc, #408]	@ (80015e4 <led_task+0x2c4>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe febf 	bl	80001d0 <strcmp>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <led_task+0x150>
					set_led_timer(effectNone);																			// T
 8001458:	2004      	movs	r0, #4
 800145a:	f000 f9c3 	bl	80017e4 <set_led_timer>
					curr_led_state = sNone;																				// I
 800145e:	4b5a      	ldr	r3, [pc, #360]	@ (80015c8 <led_task+0x2a8>)
 8001460:	2204      	movs	r2, #4
 8001462:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);													// F
 8001464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001468:	485d      	ldr	r0, [pc, #372]	@ (80015e0 <led_task+0x2c0>)
 800146a:	f002 f992 	bl	8003792 <HAL_GPIO_TogglePin>
 800146e:	e0dd      	b.n	800162c <led_task+0x30c>
				}																										// I
				else if (!strcmp((char*)msg->payload, "Tbl")) {		// Toggle blue LED									// C
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	495d      	ldr	r1, [pc, #372]	@ (80015e8 <led_task+0x2c8>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe feab 	bl	80001d0 <strcmp>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10b      	bne.n	8001498 <led_task+0x178>
					set_led_timer(effectNone);																			// A
 8001480:	2004      	movs	r0, #4
 8001482:	f000 f9af 	bl	80017e4 <set_led_timer>
					curr_led_state = sNone;																				// T
 8001486:	4b50      	ldr	r3, [pc, #320]	@ (80015c8 <led_task+0x2a8>)
 8001488:	2204      	movs	r2, #4
 800148a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);													// I
 800148c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001490:	4853      	ldr	r0, [pc, #332]	@ (80015e0 <led_task+0x2c0>)
 8001492:	f002 f97e 	bl	8003792 <HAL_GPIO_TogglePin>
 8001496:	e0c9      	b.n	800162c <led_task+0x30c>
				}																										// O
				else if (!strcmp((char*)msg->payload, "Tre")) {		// Toggle red LED									// N
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4954      	ldr	r1, [pc, #336]	@ (80015ec <led_task+0x2cc>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fe97 	bl	80001d0 <strcmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <led_task+0x1a0>
					set_led_timer(effectNone);																			//
 80014a8:	2004      	movs	r0, #4
 80014aa:	f000 f99b 	bl	80017e4 <set_led_timer>
					curr_led_state = sNone;																				//
 80014ae:	4b46      	ldr	r3, [pc, #280]	@ (80015c8 <led_task+0x2a8>)
 80014b0:	2204      	movs	r2, #4
 80014b2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);														//
 80014b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014b8:	4849      	ldr	r0, [pc, #292]	@ (80015e0 <led_task+0x2c0>)
 80014ba:	f002 f96a 	bl	8003792 <HAL_GPIO_TogglePin>
 80014be:	e0b5      	b.n	800162c <led_task+0x30c>
				}																										//
				else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment								//
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	69f8      	ldr	r0, [r7, #28]
 80014c8:	f000 fab2 	bl	8001a30 <parse_freq_string>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d055      	beq.n	800157e <led_task+0x25e>
					// Check that there is an active effect																//
					if(sNone == curr_led_state) {																		//
 80014d2:	4b3d      	ldr	r3, [pc, #244]	@ (80015c8 <led_task+0x2a8>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d108      	bne.n	80014ec <led_task+0x1cc>
						xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);										//
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <led_task+0x29c>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014e4:	4942      	ldr	r1, [pc, #264]	@ (80015f0 <led_task+0x2d0>)
 80014e6:	f005 fe31 	bl	800714c <xQueueGenericSend>
 80014ea:	e09f      	b.n	800162c <led_task+0x30c>
					}																									//
					// Check that frequency is between 1 and 10 Hz														//
					else if(freq > 10) {																				//
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b0a      	cmp	r3, #10
 80014f0:	dd08      	ble.n	8001504 <led_task+0x1e4>
						xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);												//
 80014f2:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <led_task+0x29c>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014fc:	493d      	ldr	r1, [pc, #244]	@ (80015f4 <led_task+0x2d4>)
 80014fe:	f005 fe25 	bl	800714c <xQueueGenericSend>
 8001502:	e093      	b.n	800162c <led_task+0x30c>
					}																									//
					// Change timer frequency																			//
					else {																								//
						period = (1.0 / freq) * 1000;																	//
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f81c 	bl	8000544 <__aeabi_i2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	f04f 0000 	mov.w	r0, #0
 8001514:	4938      	ldr	r1, [pc, #224]	@ (80015f8 <led_task+0x2d8>)
 8001516:	f7ff f9a9 	bl	800086c <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <led_task+0x2dc>)
 8001528:	f7ff f876 	bl	8000618 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fa82 	bl	8000a3c <__aeabi_d2iz>
 8001538:	4603      	mov	r3, r0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
						if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {	//
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <led_task+0x2a8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <led_task+0x2e0>)
 8001544:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <led_task+0x2e4>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099a      	lsrs	r2, r3, #6
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	2104      	movs	r1, #4
 8001562:	f007 ff1f 	bl	80093a4 <xTimerGenericCommand>
 8001566:	4603      	mov	r3, r0
 8001568:	2b01      	cmp	r3, #1
 800156a:	d05f      	beq.n	800162c <led_task+0x30c>
							// If frequency update was not successful, notify the user									//
							xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);											//
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <led_task+0x29c>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001576:	4924      	ldr	r1, [pc, #144]	@ (8001608 <led_task+0x2e8>)
 8001578:	f005 fde8 	bl	800714c <xQueueGenericSend>
 800157c:	e056      	b.n	800162c <led_task+0x30c>
						}																								//
					}																									//
				}																										//
				else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu								//
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4922      	ldr	r1, [pc, #136]	@ (800160c <led_task+0x2ec>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fe24 	bl	80001d0 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <led_task+0x288>
					// Update the system state																			//
					curr_sys_state = sMainMenu;																			//
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <led_task+0x2f0>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
																														//
					// Notify the main menu task																		//
					xTaskNotify(handle_main_menu_task, 0, eNoAction);													//
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <led_task+0x2f4>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	f007 fc1d 	bl	8008de0 <xTaskGenericNotify>
 80015a6:	e041      	b.n	800162c <led_task+0x30c>
				}																										//
				else												// Invalid response									//
					xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);													//
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <led_task+0x29c>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b2:	4919      	ldr	r1, [pc, #100]	@ (8001618 <led_task+0x2f8>)
 80015b4:	f005 fdca 	bl	800714c <xQueueGenericSend>
 80015b8:	e038      	b.n	800162c <led_task+0x30c>
 80015ba:	bf00      	nop
 80015bc:	20000280 	.word	0x20000280
 80015c0:	2000001c 	.word	0x2000001c
 80015c4:	0800b0a8 	.word	0x0800b0a8
 80015c8:	20000020 	.word	0x20000020
 80015cc:	0800b0b0 	.word	0x0800b0b0
 80015d0:	0800b0b4 	.word	0x0800b0b4
 80015d4:	0800b0b8 	.word	0x0800b0b8
 80015d8:	0800b0bc 	.word	0x0800b0bc
 80015dc:	0800b0c0 	.word	0x0800b0c0
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	0800b0c4 	.word	0x0800b0c4
 80015e8:	0800b0c8 	.word	0x0800b0c8
 80015ec:	0800b0cc 	.word	0x0800b0cc
 80015f0:	20000010 	.word	0x20000010
 80015f4:	20000018 	.word	0x20000018
 80015f8:	3ff00000 	.word	0x3ff00000
 80015fc:	408f4000 	.word	0x408f4000
 8001600:	20000288 	.word	0x20000288
 8001604:	10624dd3 	.word	0x10624dd3
 8001608:	20000014 	.word	0x20000014
 800160c:	0800b0d0 	.word	0x0800b0d0
 8001610:	200002a5 	.word	0x200002a5
 8001614:	20000268 	.word	0x20000268
 8001618:	2000000c 	.word	0x2000000c
			}																											//
			else {																										//
				// If user input is longer than 4 characters, notify user of invalid response							//
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);														//
 800161c:	4b5f      	ldr	r3, [pc, #380]	@ (800179c <led_task+0x47c>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001626:	495e      	ldr	r1, [pc, #376]	@ (80017a0 <led_task+0x480>)
 8001628:	f005 fd90 	bl	800714c <xQueueGenericSend>
			}																											//
																														//
			// Notify self / led task if not returning to the main menu													//
			if (sLedMenu == curr_sys_state)																				//
 800162c:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <led_task+0x484>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <led_task+0x326>
				xTaskNotify(handle_led_task, 0, eNoAction);																//
 8001634:	4b5c      	ldr	r3, [pc, #368]	@ (80017a8 <led_task+0x488>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	f007 fbcd 	bl	8008de0 <xTaskGenericNotify>
		}	// ===========================================================================================================
		// If timeout, check for any LED event group bits set ------------------------------------------------------------
		eventBits =  xEventGroupWaitBits(																				//
 8001646:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <led_task+0x48c>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2300      	movs	r3, #0
 8001650:	2201      	movs	r2, #1
 8001652:	210f      	movs	r1, #15
 8001654:	f005 fa56 	bl	8006b04 <xEventGroupWaitBits>
 8001658:	61b8      	str	r0, [r7, #24]
		             ACCEL_READ_X_BIT | ACCEL_READ_Y_BIT | ACCEL_READ_Z_BIT | TURN_OFF_LEDS_BIT,						//
		             pdTRUE,  // Clear bits on exit																		//
		             pdFALSE, // Wait for any bit to be set																//
		             0);      // Do not block																			//
																														//
		if ((eventBits & ACCEL_READ_X_BIT) && (eventBits & ACCEL_READ_Y_BIT) && (eventBits & ACCEL_READ_Z_BIT)) {		//
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d022      	beq.n	80016aa <led_task+0x38a>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01d      	beq.n	80016aa <led_task+0x38a>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d018      	beq.n	80016aa <led_task+0x38a>
			// Light all LED for x-, y-, and z-axis success																//
			set_led_timer(effectNone);																					//
 8001678:	2004      	movs	r0, #4
 800167a:	f000 f8b3 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						//
 800167e:	4b4c      	ldr	r3, [pc, #304]	@ (80017b0 <led_task+0x490>)
 8001680:	2204      	movs	r2, #4
 8001682:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168a:	484a      	ldr	r0, [pc, #296]	@ (80017b4 <led_task+0x494>)
 800168c:	f002 f868 	bl	8003760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001696:	4847      	ldr	r0, [pc, #284]	@ (80017b4 <led_task+0x494>)
 8001698:	f002 f862 	bl	8003760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016a2:	4844      	ldr	r0, [pc, #272]	@ (80017b4 <led_task+0x494>)
 80016a4:	f002 f85c 	bl	8003760 <HAL_GPIO_WritePin>
 80016a8:	e04c      	b.n	8001744 <led_task+0x424>
		}																												//
		else if (eventBits & TURN_OFF_LEDS_BIT) {																		// E
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <led_task+0x3a8>
			// Turn off all LEDs																						// V
			set_led_timer(effectNone);																					// E
 80016b4:	2004      	movs	r0, #4
 80016b6:	f000 f895 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						// N
 80016ba:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <led_task+0x490>)
 80016bc:	2204      	movs	r2, #4
 80016be:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// T
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f8c1 	bl	8001848 <control_all_leds>
 80016c6:	e03d      	b.n	8001744 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_X_BIT) {																		// G
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00f      	beq.n	80016f2 <led_task+0x3d2>
			// Light orange LED for x-axis success																		// R
			set_led_timer(effectNone);																					// O
 80016d2:	2004      	movs	r0, #4
 80016d4:	f000 f886 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						// U
 80016d8:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <led_task+0x490>)
 80016da:	2204      	movs	r2, #4
 80016dc:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f8b2 	bl	8001848 <control_all_leds>
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ea:	4832      	ldr	r0, [pc, #200]	@ (80017b4 <led_task+0x494>)
 80016ec:	f002 f838 	bl	8003760 <HAL_GPIO_WritePin>
 80016f0:	e028      	b.n	8001744 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Y_BIT) {																		//
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00f      	beq.n	800171c <led_task+0x3fc>
			// Light blue LED for y-axis success																		//
			set_led_timer(effectNone);																					//
 80016fc:	2004      	movs	r0, #4
 80016fe:	f000 f871 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						//
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <led_task+0x490>)
 8001704:	2204      	movs	r2, #4
 8001706:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001708:	2000      	movs	r0, #0
 800170a:	f000 f89d 	bl	8001848 <control_all_leds>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001714:	4827      	ldr	r0, [pc, #156]	@ (80017b4 <led_task+0x494>)
 8001716:	f002 f823 	bl	8003760 <HAL_GPIO_WritePin>
 800171a:	e013      	b.n	8001744 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Z_BIT) {																		//
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00e      	beq.n	8001744 <led_task+0x424>
			// Light green LED for z-axis success																		//
			set_led_timer(effectNone);																					//
 8001726:	2004      	movs	r0, #4
 8001728:	f000 f85c 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						//
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <led_task+0x490>)
 800172e:	2204      	movs	r2, #4
 8001730:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f888 	bl	8001848 <control_all_leds>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173e:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <led_task+0x494>)
 8001740:	f002 f80e 	bl	8003760 <HAL_GPIO_WritePin>
		}	// -----------------------------------------------------------------------------------------------------------
		// ===============================================================================================================
		// Check if rtcSemaphore is available																			//
		if (xSemaphoreTake(rtcSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {											//
 8001744:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <led_task+0x498>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	210a      	movs	r1, #10
 800174a:	4618      	mov	r0, r3
 800174c:	f005 ff90 	bl	8007670 <xQueueSemaphoreTake>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10e      	bne.n	8001774 <led_task+0x454>
			// Light red LED to indicate successful RTC configuration													//
			set_led_timer(effectNone);																					//
 8001756:	2004      	movs	r0, #4
 8001758:	f000 f844 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						//
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <led_task+0x490>)
 800175e:	2204      	movs	r2, #4
 8001760:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f870 	bl	8001848 <control_all_leds>
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET);															//
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <led_task+0x494>)
 8001770:	f001 fff6 	bl	8003760 <HAL_GPIO_WritePin>
		} 																												//
		if (xSemaphoreTake(ledOffSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {										//
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <led_task+0x49c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	210a      	movs	r1, #10
 800177a:	4618      	mov	r0, r3
 800177c:	f005 ff78 	bl	8007670 <xQueueSemaphoreTake>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	f47f add7 	bne.w	8001336 <led_task+0x16>
			// Turn off all LEDs																						//
			set_led_timer(effectNone);																					//
 8001788:	2004      	movs	r0, #4
 800178a:	f000 f82b 	bl	80017e4 <set_led_timer>
			curr_led_state = sNone;																						//
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <led_task+0x490>)
 8001790:	2204      	movs	r2, #4
 8001792:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f857 	bl	8001848 <control_all_leds>
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 800179a:	e5cc      	b.n	8001336 <led_task+0x16>
 800179c:	20000280 	.word	0x20000280
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	200002a5 	.word	0x200002a5
 80017a8:	20000274 	.word	0x20000274
 80017ac:	20000298 	.word	0x20000298
 80017b0:	20000020 	.word	0x20000020
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	2000029c 	.word	0x2000029c
 80017bc:	200002a0 	.word	0x200002a0

080017c0 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f008 f8d5 	bl	8009978 <pvTimerGetTimerID>
 80017ce:	4603      	mov	r3, r0
 80017d0:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f000 f8c4 	bl	8001964 <execute_led_effect>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e00e      	b.n	8001812 <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80017f4:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <set_led_timer+0x60>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2103      	movs	r1, #3
 8001808:	f007 fdcc 	bl	80093a4 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b03      	cmp	r3, #3
 8001816:	dded      	ble.n	80017f4 <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b04      	cmp	r3, #4
 800181c:	d00e      	beq.n	800183c <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <set_led_timer+0x60>)
 8001822:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001826:	f006 fcd5 	bl	80081d4 <xTaskGetTickCount>
 800182a:	4602      	mov	r2, r0
 800182c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	2101      	movs	r1, #1
 8001836:	4620      	mov	r0, r4
 8001838:	f007 fdb4 	bl	80093a4 <xTimerGenericCommand>
	}
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	20000288 	.word	0x20000288

08001848 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185a:	480f      	ldr	r0, [pc, #60]	@ (8001898 <control_all_leds+0x50>)
 800185c:	f001 ff80 	bl	8003760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186a:	480b      	ldr	r0, [pc, #44]	@ (8001898 <control_all_leds+0x50>)
 800186c:	f001 ff78 	bl	8003760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <control_all_leds+0x50>)
 800187c:	f001 ff70 	bl	8003760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800188a:	4803      	ldr	r0, [pc, #12]	@ (8001898 <control_all_leds+0x50>)
 800188c:	f001 ff68 	bl	8003760 <HAL_GPIO_WritePin>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40020c00 	.word	0x40020c00

0800189c <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b0:	4818      	ldr	r0, [pc, #96]	@ (8001914 <control_led_group+0x78>)
 80018b2:	f001 ff55 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018bc:	4815      	ldr	r0, [pc, #84]	@ (8001914 <control_led_group+0x78>)
 80018be:	f001 ff4f 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018c8:	4812      	ldr	r0, [pc, #72]	@ (8001914 <control_led_group+0x78>)
 80018ca:	f001 ff49 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018d4:	480f      	ldr	r0, [pc, #60]	@ (8001914 <control_led_group+0x78>)
 80018d6:	f001 ff43 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 80018da:	e017      	b.n	800190c <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e2:	480c      	ldr	r0, [pc, #48]	@ (8001914 <control_led_group+0x78>)
 80018e4:	f001 ff3c 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ee:	4809      	ldr	r0, [pc, #36]	@ (8001914 <control_led_group+0x78>)
 80018f0:	f001 ff36 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018fa:	4806      	ldr	r0, [pc, #24]	@ (8001914 <control_led_group+0x78>)
 80018fc:	f001 ff30 	bl	8003760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001906:	4803      	ldr	r0, [pc, #12]	@ (8001914 <control_led_group+0x78>)
 8001908:	f001 ff2a 	bl	8003760 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40020c00 	.word	0x40020c00

08001918 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e014      	b.n	8001950 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 8001926:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	b299      	uxth	r1, r3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	fa42 f303 	asr.w	r3, r2, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4806      	ldr	r0, [pc, #24]	@ (8001960 <control_single_led+0x48>)
 8001946:	f001 ff0b 	bl	8003760 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	dde7      	ble.n	8001926 <control_single_led+0xe>
	}
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020c00 	.word	0x40020c00

08001964 <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d854      	bhi.n	8001a1c <execute_led_effect+0xb8>
 8001972:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <execute_led_effect+0x14>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001989 	.word	0x08001989
 800197c:	080019ad 	.word	0x080019ad
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019f7 	.word	0x080019f7
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001988:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <execute_led_effect+0xc4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f083 0301 	eor.w	r3, r3, #1
 8001990:	4a25      	ldr	r2, [pc, #148]	@ (8001a28 <execute_led_effect+0xc4>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <execute_led_effect+0xc4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <execute_led_effect+0x40>
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff ff53 	bl	8001848 <control_all_leds>
			break;
 80019a2:	e03c      	b.n	8001a1e <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ff4f 	bl	8001848 <control_all_leds>
			break;
 80019aa:	e038      	b.n	8001a1e <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80019ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <execute_led_effect+0xc4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <execute_led_effect+0xc4>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <execute_led_effect+0xc4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <execute_led_effect+0x64>
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff ff6b 	bl	800189c <control_led_group>
			break;
 80019c6:	e02a      	b.n	8001a1e <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff ff67 	bl	800189c <control_led_group>
			break;
 80019ce:	e026      	b.n	8001a1e <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <execute_led_effect+0xc8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	4915      	ldr	r1, [pc, #84]	@ (8001a2c <execute_led_effect+0xc8>)
 80019d8:	600a      	str	r2, [r1, #0]
 80019da:	425a      	negs	r2, r3
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	bf58      	it	pl
 80019e6:	4253      	negpl	r3, r2
 80019e8:	2201      	movs	r2, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff92 	bl	8001918 <control_single_led>
			break;
 80019f4:	e013      	b.n	8001a1e <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <execute_led_effect+0xc8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	490b      	ldr	r1, [pc, #44]	@ (8001a2c <execute_led_effect+0xc8>)
 80019fe:	600a      	str	r2, [r1, #0]
 8001a00:	425a      	negs	r2, r3
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	bf58      	it	pl
 8001a0c:	4253      	negpl	r3, r2
 8001a0e:	2208      	movs	r2, #8
 8001a10:	fa42 f303 	asr.w	r3, r2, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff7f 	bl	8001918 <control_single_led>
			break;
 8001a1a:	e000      	b.n	8001a1e <execute_led_effect+0xba>
		default:
			break;
 8001a1c:	bf00      	nop
	}
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000024 	.word	0x20000024
 8001a2c:	20000138 	.word	0x20000138

08001a30 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fbd1 	bl	80001e4 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	dd02      	ble.n	8001a52 <parse_freq_string+0x22>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	dd01      	ble.n	8001a56 <parse_freq_string+0x26>
 8001a52:	2300      	movs	r3, #0
 8001a54:	e025      	b.n	8001aa2 <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b46      	cmp	r3, #70	@ 0x46
 8001a5c:	d001      	beq.n	8001a62 <parse_freq_string+0x32>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e01f      	b.n	8001aa2 <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 8001a62:	2301      	movs	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e010      	b.n	8001a8a <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <parse_freq_string+0x7c>)
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <parse_freq_string+0x54>
 8001a80:	2300      	movs	r3, #0
 8001a82:	e00e      	b.n	8001aa2 <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbea      	blt.n	8001a68 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f80b 	bl	8001ab0 <freq_str_to_int>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	601a      	str	r2, [r3, #0]
    return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	0800b568 	.word	0x0800b568

08001ab0 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 8001abe:	2301      	movs	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	e00f      	b.n	8001ae4 <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4619      	mov	r1, r3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3b30      	subs	r3, #48	@ 0x30
 8001ada:	440b      	add	r3, r1
 8001adc:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbeb      	blt.n	8001ac4 <freq_str_to_int+0x14>
	}

	return ret;
 8001aec:	68fb      	ldr	r3, [r7, #12]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2000      	movs	r0, #0
 8001b12:	f007 f8e5 	bl	8008ce0 <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 8001b16:	e218      	b.n	8001f4a <rtc_task+0x44e>

			switch(curr_sys_state) {
 8001b18:	4bb5      	ldr	r3, [pc, #724]	@ (8001df0 <rtc_task+0x2f4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	f000 8132 	beq.w	8001d86 <rtc_task+0x28a>
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	f300 81fb 	bgt.w	8001f1e <rtc_task+0x422>
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d003      	beq.n	8001b34 <rtc_task+0x38>
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	f000 8089 	beq.w	8001c44 <rtc_task+0x148>
 8001b32:	e1f4      	b.n	8001f1e <rtc_task+0x422>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 8001b34:	4baf      	ldr	r3, [pc, #700]	@ (8001df4 <rtc_task+0x2f8>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b3e:	49ae      	ldr	r1, [pc, #696]	@ (8001df8 <rtc_task+0x2fc>)
 8001b40:	f005 fb04 	bl	800714c <xQueueGenericSend>
					show_time_date();
 8001b44:	f000 faa4 	bl	8002090 <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 8001b48:	4baa      	ldr	r3, [pc, #680]	@ (8001df4 <rtc_task+0x2f8>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b52:	49aa      	ldr	r1, [pc, #680]	@ (8001dfc <rtc_task+0x300>)
 8001b54:	f005 fafa 	bl	800714c <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2000      	movs	r0, #0
 8001b68:	f007 f8ba 	bl	8008ce0 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d859      	bhi.n	8001c2c <rtc_task+0x130>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	49a1      	ldr	r1, [pc, #644]	@ (8001e00 <rtc_task+0x304>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb27 	bl	80001d0 <strcmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10b      	bne.n	8001ba0 <rtc_task+0xa4>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 8001b88:	4b99      	ldr	r3, [pc, #612]	@ (8001df0 <rtc_task+0x2f4>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001b8e:	4b99      	ldr	r3, [pc, #612]	@ (8001df4 <rtc_task+0x2f8>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b98:	499a      	ldr	r1, [pc, #616]	@ (8001e04 <rtc_task+0x308>)
 8001b9a:	f005 fad7 	bl	800714c <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 8001b9e:	e1d4      	b.n	8001f4a <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	4999      	ldr	r1, [pc, #612]	@ (8001e08 <rtc_task+0x30c>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb13 	bl	80001d0 <strcmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <rtc_task+0xcc>
							curr_sys_state = sRtcTimeConfig;
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8001df0 <rtc_task+0x2f4>)
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8001bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8001df4 <rtc_task+0x2f8>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc0:	4992      	ldr	r1, [pc, #584]	@ (8001e0c <rtc_task+0x310>)
 8001bc2:	f005 fac3 	bl	800714c <xQueueGenericSend>
					break;
 8001bc6:	e1c0      	b.n	8001f4a <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4991      	ldr	r1, [pc, #580]	@ (8001e10 <rtc_task+0x314>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe faff 	bl	80001d0 <strcmp>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <rtc_task+0xe4>
							curr_sys_state = sRtcMenu;
 8001bd8:	4b85      	ldr	r3, [pc, #532]	@ (8001df0 <rtc_task+0x2f4>)
 8001bda:	2203      	movs	r2, #3
 8001bdc:	701a      	strb	r2, [r3, #0]
					break;
 8001bde:	e1b4      	b.n	8001f4a <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	498c      	ldr	r1, [pc, #560]	@ (8001e14 <rtc_task+0x318>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe faf3 	bl	80001d0 <strcmp>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <rtc_task+0x10a>
							curr_sys_state = sMainMenu;
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <rtc_task+0x2f4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
							xSemaphoreGive(ledOffSemaphore);
 8001bf6:	4b88      	ldr	r3, [pc, #544]	@ (8001e18 <rtc_task+0x31c>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	f005 faa4 	bl	800714c <xQueueGenericSend>
					break;
 8001c04:	e1a1      	b.n	8001f4a <rtc_task+0x44e>
							curr_sys_state = sMainMenu;
 8001c06:	4b7a      	ldr	r3, [pc, #488]	@ (8001df0 <rtc_task+0x2f4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001c0c:	4b79      	ldr	r3, [pc, #484]	@ (8001df4 <rtc_task+0x2f8>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	2300      	movs	r3, #0
 8001c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c16:	4981      	ldr	r1, [pc, #516]	@ (8001e1c <rtc_task+0x320>)
 8001c18:	f005 fa98 	bl	800714c <xQueueGenericSend>
							xSemaphoreGive(ledOffSemaphore);
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e18 <rtc_task+0x31c>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	f005 fa91 	bl	800714c <xQueueGenericSend>
					break;
 8001c2a:	e18e      	b.n	8001f4a <rtc_task+0x44e>
						curr_sys_state = sMainMenu;
 8001c2c:	4b70      	ldr	r3, [pc, #448]	@ (8001df0 <rtc_task+0x2f4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001c32:	4b70      	ldr	r3, [pc, #448]	@ (8001df4 <rtc_task+0x2f8>)
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c3c:	4977      	ldr	r1, [pc, #476]	@ (8001e1c <rtc_task+0x320>)
 8001c3e:	f005 fa85 	bl	800714c <xQueueGenericSend>
					break;
 8001c42:	e182      	b.n	8001f4a <rtc_task+0x44e>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f007 f844 	bl	8008ce0 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 8001c5c:	4b70      	ldr	r3, [pc, #448]	@ (8001e20 <rtc_task+0x324>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	f200 816f 	bhi.w	8001f44 <rtc_task+0x448>
 8001c66:	a201      	add	r2, pc, #4	@ (adr r2, 8001c6c <rtc_task+0x170>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001cad 	.word	0x08001cad
 8001c74:	08001cdd 	.word	0x08001cdd
 8001c78:	08001d0d 	.word	0x08001d0d
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f000 f985 	bl	8001f94 <getnumber>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 8001c8e:	4a65      	ldr	r2, [pc, #404]	@ (8001e24 <rtc_task+0x328>)
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8001c94:	4b62      	ldr	r3, [pc, #392]	@ (8001e20 <rtc_task+0x324>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001c9a:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <rtc_task+0x2f8>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ca4:	4960      	ldr	r1, [pc, #384]	@ (8001e28 <rtc_task+0x32c>)
 8001ca6:	f005 fa51 	bl	800714c <xQueueGenericSend>
							break;
 8001caa:	e06b      	b.n	8001d84 <rtc_task+0x288>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 f96d 	bl	8001f94 <getnumber>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 8001cbe:	4a59      	ldr	r2, [pc, #356]	@ (8001e24 <rtc_task+0x328>)
 8001cc0:	7b7b      	ldrb	r3, [r7, #13]
 8001cc2:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 8001cc4:	4b56      	ldr	r3, [pc, #344]	@ (8001e20 <rtc_task+0x324>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001cca:	4b4a      	ldr	r3, [pc, #296]	@ (8001df4 <rtc_task+0x2f8>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cd4:	4955      	ldr	r1, [pc, #340]	@ (8001e2c <rtc_task+0x330>)
 8001cd6:	f005 fa39 	bl	800714c <xQueueGenericSend>
							break;
 8001cda:	e053      	b.n	8001d84 <rtc_task+0x288>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f000 f955 	bl	8001f94 <getnumber>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 8001cee:	4a4d      	ldr	r2, [pc, #308]	@ (8001e24 <rtc_task+0x328>)
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e20 <rtc_task+0x324>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001df4 <rtc_task+0x2f8>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d04:	494a      	ldr	r1, [pc, #296]	@ (8001e30 <rtc_task+0x334>)
 8001d06:	f005 fa21 	bl	800714c <xQueueGenericSend>
							break;
 8001d0a:	e03b      	b.n	8001d84 <rtc_task+0x288>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f000 f93d 	bl	8001f94 <getnumber>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 8001d1e:	4a41      	ldr	r2, [pc, #260]	@ (8001e24 <rtc_task+0x328>)
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8001d24:	493f      	ldr	r1, [pc, #252]	@ (8001e24 <rtc_task+0x328>)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f955 	bl	8001fd6 <validate_rtc_information>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <rtc_task+0x25c>
								rtc_configure_date(&date); // Configure date
 8001d32:	483c      	ldr	r0, [pc, #240]	@ (8001e24 <rtc_task+0x328>)
 8001d34:	f000 f99c 	bl	8002070 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <rtc_task+0x2f8>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d42:	493c      	ldr	r1, [pc, #240]	@ (8001e34 <rtc_task+0x338>)
 8001d44:	f005 fa02 	bl	800714c <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <rtc_task+0x33c>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	f005 f9fb 	bl	800714c <xQueueGenericSend>
 8001d56:	e00e      	b.n	8001d76 <rtc_task+0x27a>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <rtc_task+0x2f8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d62:	492e      	ldr	r1, [pc, #184]	@ (8001e1c <rtc_task+0x320>)
 8001d64:	f005 f9f2 	bl	800714c <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <rtc_task+0x31c>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	f005 f9eb 	bl	800714c <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <rtc_task+0x2f4>)
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <rtc_task+0x324>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
							break;
 8001d82:	bf00      	nop
					}
					break;
 8001d84:	e0de      	b.n	8001f44 <rtc_task+0x448>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2000      	movs	r0, #0
 8001d96:	f006 ffa3 	bl	8008ce0 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <rtc_task+0x324>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	f200 80d0 	bhi.w	8001f48 <rtc_task+0x44c>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <rtc_task+0x2b4>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001e45 	.word	0x08001e45
 8001db8:	08001e75 	.word	0x08001e75
 8001dbc:	08001ea5 	.word	0x08001ea5
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f000 f8e3 	bl	8001f94 <getnumber>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <rtc_task+0x340>)
 8001dd4:	7c3b      	ldrb	r3, [r7, #16]
 8001dd6:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <rtc_task+0x324>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <rtc_task+0x2f8>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001de8:	4915      	ldr	r1, [pc, #84]	@ (8001e40 <rtc_task+0x344>)
 8001dea:	f005 f9af 	bl	800714c <xQueueGenericSend>
							break;
 8001dee:	e095      	b.n	8001f1c <rtc_task+0x420>
 8001df0:	200002a5 	.word	0x200002a5
 8001df4:	20000280 	.word	0x20000280
 8001df8:	20000050 	.word	0x20000050
 8001dfc:	20000054 	.word	0x20000054
 8001e00:	0800b2f8 	.word	0x0800b2f8
 8001e04:	20000040 	.word	0x20000040
 8001e08:	0800b300 	.word	0x0800b300
 8001e0c:	20000030 	.word	0x20000030
 8001e10:	0800b308 	.word	0x0800b308
 8001e14:	0800b310 	.word	0x0800b310
 8001e18:	200002a0 	.word	0x200002a0
 8001e1c:	20000028 	.word	0x20000028
 8001e20:	2000013c 	.word	0x2000013c
 8001e24:	20000154 	.word	0x20000154
 8001e28:	20000044 	.word	0x20000044
 8001e2c:	20000048 	.word	0x20000048
 8001e30:	2000004c 	.word	0x2000004c
 8001e34:	2000002c 	.word	0x2000002c
 8001e38:	2000029c 	.word	0x2000029c
 8001e3c:	20000140 	.word	0x20000140
 8001e40:	20000034 	.word	0x20000034
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f000 f8a1 	bl	8001f94 <getnumber>
 8001e52:	4603      	mov	r3, r0
 8001e54:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 8001e56:	4a44      	ldr	r2, [pc, #272]	@ (8001f68 <rtc_task+0x46c>)
 8001e58:	7c7b      	ldrb	r3, [r7, #17]
 8001e5a:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 8001e5c:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <rtc_task+0x470>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001e62:	4b43      	ldr	r3, [pc, #268]	@ (8001f70 <rtc_task+0x474>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e6c:	4941      	ldr	r1, [pc, #260]	@ (8001f74 <rtc_task+0x478>)
 8001e6e:	f005 f96d 	bl	800714c <xQueueGenericSend>
							break;
 8001e72:	e053      	b.n	8001f1c <rtc_task+0x420>
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f000 f889 	bl	8001f94 <getnumber>
 8001e82:	4603      	mov	r3, r0
 8001e84:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8001e86:	4a38      	ldr	r2, [pc, #224]	@ (8001f68 <rtc_task+0x46c>)
 8001e88:	7cbb      	ldrb	r3, [r7, #18]
 8001e8a:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	@ (8001f6c <rtc_task+0x470>)
 8001e8e:	2203      	movs	r2, #3
 8001e90:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 8001e92:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <rtc_task+0x474>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e9c:	4936      	ldr	r1, [pc, #216]	@ (8001f78 <rtc_task+0x47c>)
 8001e9e:	f005 f955 	bl	800714c <xQueueGenericSend>
							break;
 8001ea2:	e03b      	b.n	8001f1c <rtc_task+0x420>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f000 f871 	bl	8001f94 <getnumber>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 8001eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f68 <rtc_task+0x46c>)
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	482a      	ldr	r0, [pc, #168]	@ (8001f68 <rtc_task+0x46c>)
 8001ec0:	f000 f889 	bl	8001fd6 <validate_rtc_information>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d112      	bne.n	8001ef0 <rtc_task+0x3f4>
								rtc_configure_time(&time); // Configure time
 8001eca:	4827      	ldr	r0, [pc, #156]	@ (8001f68 <rtc_task+0x46c>)
 8001ecc:	f000 f8ba 	bl	8002044 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8001ed0:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <rtc_task+0x474>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eda:	4928      	ldr	r1, [pc, #160]	@ (8001f7c <rtc_task+0x480>)
 8001edc:	f005 f936 	bl	800714c <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <rtc_task+0x484>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f005 f92f 	bl	800714c <xQueueGenericSend>
 8001eee:	e00e      	b.n	8001f0e <rtc_task+0x412>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <rtc_task+0x474>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001efa:	4922      	ldr	r1, [pc, #136]	@ (8001f84 <rtc_task+0x488>)
 8001efc:	f005 f926 	bl	800714c <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8001f00:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <rtc_task+0x48c>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f005 f91f 	bl	800714c <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <rtc_task+0x490>)
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <rtc_task+0x470>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
							break;
 8001f1a:	bf00      	nop
					}
					break;
 8001f1c:	e014      	b.n	8001f48 <rtc_task+0x44c>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <rtc_task+0x490>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <rtc_task+0x474>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f2e:	4915      	ldr	r1, [pc, #84]	@ (8001f84 <rtc_task+0x488>)
 8001f30:	f005 f90c 	bl	800714c <xQueueGenericSend>
					// Give semaphore for led_task to turn LEDs off
					xSemaphoreGive(ledOffSemaphore);
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <rtc_task+0x48c>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f005 f905 	bl	800714c <xQueueGenericSend>
					break;
 8001f42:	e002      	b.n	8001f4a <rtc_task+0x44e>
					break;
 8001f44:	bf00      	nop
 8001f46:	e000      	b.n	8001f4a <rtc_task+0x44e>
					break;
 8001f48:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <rtc_task+0x490>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f ade2 	bne.w	8001b18 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <rtc_task+0x494>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	f006 ff3d 	bl	8008de0 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001f66:	e5cd      	b.n	8001b04 <rtc_task+0x8>
 8001f68:	20000140 	.word	0x20000140
 8001f6c:	2000013c 	.word	0x2000013c
 8001f70:	20000280 	.word	0x20000280
 8001f74:	20000038 	.word	0x20000038
 8001f78:	2000003c 	.word	0x2000003c
 8001f7c:	2000002c 	.word	0x2000002c
 8001f80:	2000029c 	.word	0x2000029c
 8001f84:	20000028 	.word	0x20000028
 8001f88:	200002a0 	.word	0x200002a0
 8001f8c:	200002a5 	.word	0x200002a5
 8001f90:	20000268 	.word	0x20000268

08001f94 <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	dd0e      	ble.n	8001fc2 <getnumber+0x2e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3b10      	subs	r3, #16
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	e003      	b.n	8001fca <getnumber+0x36>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	3b30      	subs	r3, #48	@ 0x30
 8001fc8:	b2db      	uxtb	r3, r3
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
	if(time) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d80b      	bhi.n	8002006 <validate_rtc_information+0x30>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ff4:	d807      	bhi.n	8002006 <validate_rtc_information+0x30>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	789b      	ldrb	r3, [r3, #2]
 8001ffa:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ffc:	d803      	bhi.n	8002006 <validate_rtc_information+0x30>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	78db      	ldrb	r3, [r3, #3]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d901      	bls.n	800200a <validate_rtc_information+0x34>
			return 1;
 8002006:	2301      	movs	r3, #1
 8002008:	e015      	b.n	8002036 <validate_rtc_information+0x60>
	}
	if(date) {
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d011      	beq.n	8002034 <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	2b1f      	cmp	r3, #31
 8002016:	d80b      	bhi.n	8002030 <validate_rtc_information+0x5a>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b07      	cmp	r3, #7
 800201e:	d807      	bhi.n	8002030 <validate_rtc_information+0x5a>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b63      	cmp	r3, #99	@ 0x63
 8002026:	d803      	bhi.n	8002030 <validate_rtc_information+0x5a>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d901      	bls.n	8002034 <validate_rtc_information+0x5e>
			return 1;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <validate_rtc_information+0x60>
	}

	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4803      	ldr	r0, [pc, #12]	@ (800206c <rtc_configure_time+0x28>)
 800205e:	f002 f9e2 	bl	8004426 <HAL_RTC_SetTime>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200001a8 	.word	0x200001a8

08002070 <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4803      	ldr	r0, [pc, #12]	@ (800208c <rtc_configure_date+0x1c>)
 800207e:	f002 faca 	bl	8004616 <HAL_RTC_SetDate>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200001a8 	.word	0x200001a8

08002090 <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2204      	movs	r2, #4
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f008 f908 	bl	800a2b4 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 80020a4:	463b      	mov	r3, r7
 80020a6:	2214      	movs	r2, #20
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f008 f902 	bl	800a2b4 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	4837      	ldr	r0, [pc, #220]	@ (8002194 <show_time_date+0x104>)
 80020b8:	f002 fa4f 	bl	800455a <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4833      	ldr	r0, [pc, #204]	@ (8002194 <show_time_date+0x104>)
 80020c6:	f002 fb2a 	bl	800471e <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <show_time_date+0x44>
 80020d0:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <show_time_date+0x108>)
 80020d2:	e000      	b.n	80020d6 <show_time_date+0x46>
 80020d4:	4b31      	ldr	r3, [pc, #196]	@ (800219c <show_time_date+0x10c>)
 80020d6:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 80020d8:	783b      	ldrb	r3, [r7, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	461a      	mov	r2, r3
 80020e0:	78bb      	ldrb	r3, [r7, #2]
 80020e2:	4619      	mov	r1, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	9101      	str	r1, [sp, #4]
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <show_time_date+0x110>)
 80020f0:	492c      	ldr	r1, [pc, #176]	@ (80021a4 <show_time_date+0x114>)
 80020f2:	482d      	ldr	r0, [pc, #180]	@ (80021a8 <show_time_date+0x118>)
 80020f4:	f008 f8be 	bl	800a274 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <show_time_date+0x11c>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002102:	492b      	ldr	r1, [pc, #172]	@ (80021b0 <show_time_date+0x120>)
 8002104:	f005 f822 	bl	800714c <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 8002108:	7d3b      	ldrb	r3, [r7, #20]
 800210a:	3b01      	subs	r3, #1
 800210c:	2b06      	cmp	r3, #6
 800210e:	d826      	bhi.n	800215e <show_time_date+0xce>
 8002110:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <show_time_date+0x88>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002135 	.word	0x08002135
 800211c:	0800213b 	.word	0x0800213b
 8002120:	08002141 	.word	0x08002141
 8002124:	08002147 	.word	0x08002147
 8002128:	0800214d 	.word	0x0800214d
 800212c:	08002153 	.word	0x08002153
 8002130:	08002159 	.word	0x08002159
		case 1:
			weekday = "Sunday";
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <show_time_date+0x124>)
 8002136:	61fb      	str	r3, [r7, #28]
			break;
 8002138:	e011      	b.n	800215e <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <show_time_date+0x128>)
 800213c:	61fb      	str	r3, [r7, #28]
			break;
 800213e:	e00e      	b.n	800215e <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 8002140:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <show_time_date+0x12c>)
 8002142:	61fb      	str	r3, [r7, #28]
			break;
 8002144:	e00b      	b.n	800215e <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <show_time_date+0x130>)
 8002148:	61fb      	str	r3, [r7, #28]
			break;
 800214a:	e008      	b.n	800215e <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <show_time_date+0x134>)
 800214e:	61fb      	str	r3, [r7, #28]
			break;
 8002150:	e005      	b.n	800215e <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 8002152:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <show_time_date+0x138>)
 8002154:	61fb      	str	r3, [r7, #28]
			break;
 8002156:	e002      	b.n	800215e <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <show_time_date+0x13c>)
 800215a:	61fb      	str	r3, [r7, #28]
			break;
 800215c:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 800215e:	7d7b      	ldrb	r3, [r7, #21]
 8002160:	4619      	mov	r1, r3
 8002162:	7dbb      	ldrb	r3, [r7, #22]
 8002164:	461a      	mov	r2, r3
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	460b      	mov	r3, r1
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <show_time_date+0x140>)
 8002176:	4817      	ldr	r0, [pc, #92]	@ (80021d4 <show_time_date+0x144>)
 8002178:	f008 f87c 	bl	800a274 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <show_time_date+0x11c>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002186:	4914      	ldr	r1, [pc, #80]	@ (80021d8 <show_time_date+0x148>)
 8002188:	f004 ffe0 	bl	800714c <xQueueGenericSend>
}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200001a8 	.word	0x200001a8
 8002198:	0800b318 	.word	0x0800b318
 800219c:	0800b31c 	.word	0x0800b31c
 80021a0:	0800b320 	.word	0x0800b320
 80021a4:	0800b338 	.word	0x0800b338
 80021a8:	20000158 	.word	0x20000158
 80021ac:	20000280 	.word	0x20000280
 80021b0:	20000058 	.word	0x20000058
 80021b4:	0800b350 	.word	0x0800b350
 80021b8:	0800b358 	.word	0x0800b358
 80021bc:	0800b360 	.word	0x0800b360
 80021c0:	0800b368 	.word	0x0800b368
 80021c4:	0800b374 	.word	0x0800b374
 80021c8:	0800b380 	.word	0x0800b380
 80021cc:	0800b388 	.word	0x0800b388
 80021d0:	0800b394 	.word	0x0800b394
 80021d4:	20000180 	.word	0x20000180
 80021d8:	2000005c 	.word	0x2000005c

080021dc <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80021e4:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <main_menu_task+0xe0>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021ee:	4934      	ldr	r1, [pc, #208]	@ (80022c0 <main_menu_task+0xe4>)
 80021f0:	f004 ffac 	bl	800714c <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021fc:	9200      	str	r2, [sp, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2000      	movs	r0, #0
 8002204:	f006 fd6c 	bl	8008ce0 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d140      	bne.n	8002296 <main_menu_task+0xba>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3b30      	subs	r3, #48	@ 0x30
 800221a:	613b      	str	r3, [r7, #16]
			switch(option) {
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d023      	beq.n	800226a <main_menu_task+0x8e>
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b02      	cmp	r3, #2
 8002226:	dc2d      	bgt.n	8002284 <main_menu_task+0xa8>
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <main_menu_task+0x5a>
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d00d      	beq.n	8002250 <main_menu_task+0x74>
 8002234:	e026      	b.n	8002284 <main_menu_task+0xa8>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8002236:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <main_menu_task+0xe8>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main_menu_task+0xec>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	f006 fdc9 	bl	8008de0 <xTaskGenericNotify>
					break;
 800224e:	e02b      	b.n	80022a8 <main_menu_task+0xcc>
				case 1:
					curr_sys_state = sRtcMenu;
 8002250:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <main_menu_task+0xe8>)
 8002252:	2203      	movs	r2, #3
 8002254:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <main_menu_task+0xf0>)
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	f006 fdbc 	bl	8008de0 <xTaskGenericNotify>
					break;
 8002268:	e01e      	b.n	80022a8 <main_menu_task+0xcc>
				case 2:
					curr_sys_state = sAccMenu;
 800226a:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <main_menu_task+0xe8>)
 800226c:	2202      	movs	r2, #2
 800226e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <main_menu_task+0xf4>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	f006 fdaf 	bl	8008de0 <xTaskGenericNotify>
					break;
 8002282:	e011      	b.n	80022a8 <main_menu_task+0xcc>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8002284:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <main_menu_task+0xe0>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800228e:	4911      	ldr	r1, [pc, #68]	@ (80022d4 <main_menu_task+0xf8>)
 8002290:	f004 ff5c 	bl	800714c <xQueueGenericSend>
					continue;
 8002294:	e011      	b.n	80022ba <main_menu_task+0xde>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <main_menu_task+0xe0>)
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022a0:	490c      	ldr	r1, [pc, #48]	@ (80022d4 <main_menu_task+0xf8>)
 80022a2:	f004 ff53 	bl	800714c <xQueueGenericSend>
			continue;
 80022a6:	e008      	b.n	80022ba <main_menu_task+0xde>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2000      	movs	r0, #0
 80022b6:	f006 fd13 	bl	8008ce0 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80022ba:	e793      	b.n	80021e4 <main_menu_task+0x8>
 80022bc:	20000280 	.word	0x20000280
 80022c0:	20000064 	.word	0x20000064
 80022c4:	200002a5 	.word	0x200002a5
 80022c8:	20000274 	.word	0x20000274
 80022cc:	20000278 	.word	0x20000278
 80022d0:	2000027c 	.word	0x2000027c
 80022d4:	20000060 	.word	0x20000060

080022d8 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2000      	movs	r0, #0
 80022ee:	f006 fcf7 	bl	8008ce0 <xTaskGenericNotifyWait>
 80022f2:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d1f2      	bne.n	80022e0 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f822 	bl	8002348 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002304:	e7ec      	b.n	80022e0 <message_handler_task+0x8>
	...

08002308 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <print_task+0x38>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f107 010c 	add.w	r1, r7, #12
 8002318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800231c:	4618      	mov	r0, r3
 800231e:	f005 f8c5 	bl	80074ac <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8002322:	68fc      	ldr	r4, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fd ff5c 	bl	80001e4 <strlen>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002334:	4621      	mov	r1, r4
 8002336:	4803      	ldr	r0, [pc, #12]	@ (8002344 <print_task+0x3c>)
 8002338:	f003 fbc6 	bl	8005ac8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800233c:	bf00      	nop
 800233e:	e7e7      	b.n	8002310 <print_task+0x8>
 8002340:	20000280 	.word	0x20000280
 8002344:	20000220 	.word	0x20000220

08002348 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f84b 	bl	80023ec <extract_command>

	switch(curr_sys_state) {
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <process_message+0x90>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d836      	bhi.n	80023cc <process_message+0x84>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <process_message+0x1c>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	0800237d 	.word	0x0800237d
 8002368:	08002391 	.word	0x08002391
 800236c:	080023a5 	.word	0x080023a5
 8002370:	080023b9 	.word	0x080023b9
 8002374:	080023b9 	.word	0x080023b9
 8002378:	080023b9 	.word	0x080023b9
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <process_message+0x94>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2303      	movs	r3, #3
 8002388:	2100      	movs	r1, #0
 800238a:	f006 fd29 	bl	8008de0 <xTaskGenericNotify>
			break;
 800238e:	e01e      	b.n	80023ce <process_message+0x86>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <process_message+0x98>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	2300      	movs	r3, #0
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2303      	movs	r3, #3
 800239c:	2100      	movs	r1, #0
 800239e:	f006 fd1f 	bl	8008de0 <xTaskGenericNotify>
			break;
 80023a2:	e014      	b.n	80023ce <process_message+0x86>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <process_message+0x9c>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2100      	movs	r1, #0
 80023b2:	f006 fd15 	bl	8008de0 <xTaskGenericNotify>
			break;
 80023b6:	e00a      	b.n	80023ce <process_message+0x86>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <process_message+0xa0>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2303      	movs	r3, #3
 80023c4:	2100      	movs	r1, #0
 80023c6:	f006 fd0b 	bl	8008de0 <xTaskGenericNotify>
			break;
 80023ca:	e000      	b.n	80023ce <process_message+0x86>
		default:
			break;
 80023cc:	bf00      	nop
	}
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002a5 	.word	0x200002a5
 80023dc:	20000268 	.word	0x20000268
 80023e0:	20000274 	.word	0x20000274
 80023e4:	2000027c 	.word	0x2000027c
 80023e8:	20000278 	.word	0x20000278

080023ec <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <extract_command+0x70>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f005 fadb 	bl	80079b4 <uxQueueMessagesWaiting>
 80023fe:	4603      	mov	r3, r0
 8002400:	613b      	str	r3, [r7, #16]
	if(!status) {
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <extract_command+0x22>
		return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800240c:	e022      	b.n	8002454 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <extract_command+0x70>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f107 010f 	add.w	r1, r7, #15
 800241a:	2200      	movs	r2, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f845 	bl	80074ac <xQueueReceive>
 8002422:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d106      	bne.n	8002438 <extract_command+0x4c>
			msg->payload[i++] = item;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	75fa      	strb	r2, [r7, #23]
 8002430:	461a      	mov	r2, r3
 8002432:	7bf9      	ldrb	r1, [r7, #15]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d1e9      	bne.n	8002412 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	3b01      	subs	r3, #1
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	2100      	movs	r1, #0
 8002446:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	3b01      	subs	r3, #1
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60da      	str	r2, [r3, #12]

	return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000284 	.word	0x20000284

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b090      	sub	sp, #64	@ 0x40
 8002464:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002466:	f000 fe29 	bl	80030bc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246a:	f000 f973 	bl	8002754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246e:	f000 fa63 	bl	8002938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002472:	f000 fa37 	bl	80028e4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002476:	f000 f9d9 	bl	800282c <MX_RTC_Init>
  MX_SPI1_Init();
 800247a:	f000 f9fd 	bl	8002878 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  accelerometer_init();
 800247e:	f7fe fd9d 	bl	8000fbc <accelerometer_init>

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8002482:	4b98      	ldr	r3, [pc, #608]	@ (80026e4 <main+0x284>)
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2302      	movs	r3, #2
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	22fa      	movs	r2, #250	@ 0xfa
 800248e:	4996      	ldr	r1, [pc, #600]	@ (80026e8 <main+0x288>)
 8002490:	4896      	ldr	r0, [pc, #600]	@ (80026ec <main+0x28c>)
 8002492:	f005 fc5b 	bl	8007d4c <xTaskCreate>
 8002496:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	2b01      	cmp	r3, #1
 800249c:	d00b      	beq.n	80024b6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	e7fd      	b.n	80024b2 <main+0x52>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80024b6:	4b8e      	ldr	r3, [pc, #568]	@ (80026f0 <main+0x290>)
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	2302      	movs	r3, #2
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2300      	movs	r3, #0
 80024c0:	22fa      	movs	r2, #250	@ 0xfa
 80024c2:	498c      	ldr	r1, [pc, #560]	@ (80026f4 <main+0x294>)
 80024c4:	488c      	ldr	r0, [pc, #560]	@ (80026f8 <main+0x298>)
 80024c6:	f005 fc41 	bl	8007d4c <xTaskCreate>
 80024ca:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d00b      	beq.n	80024ea <main+0x8a>
        __asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <main+0x86>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80024ea:	4b84      	ldr	r3, [pc, #528]	@ (80026fc <main+0x29c>)
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	2302      	movs	r3, #2
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	22fa      	movs	r2, #250	@ 0xfa
 80024f6:	4982      	ldr	r1, [pc, #520]	@ (8002700 <main+0x2a0>)
 80024f8:	4882      	ldr	r0, [pc, #520]	@ (8002704 <main+0x2a4>)
 80024fa:	f005 fc27 	bl	8007d4c <xTaskCreate>
 80024fe:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	2b01      	cmp	r3, #1
 8002504:	d00b      	beq.n	800251e <main+0xbe>
        __asm volatile
 8002506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250a:	f383 8811 	msr	BASEPRI, r3
 800250e:	f3bf 8f6f 	isb	sy
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	e7fd      	b.n	800251a <main+0xba>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800251e:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <main+0x2a8>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	2302      	movs	r3, #2
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2300      	movs	r3, #0
 8002528:	22fa      	movs	r2, #250	@ 0xfa
 800252a:	4978      	ldr	r1, [pc, #480]	@ (800270c <main+0x2ac>)
 800252c:	4878      	ldr	r0, [pc, #480]	@ (8002710 <main+0x2b0>)
 800252e:	f005 fc0d 	bl	8007d4c <xTaskCreate>
 8002532:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	2b01      	cmp	r3, #1
 8002538:	d00b      	beq.n	8002552 <main+0xf2>
        __asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	623b      	str	r3, [r7, #32]
    }
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	e7fd      	b.n	800254e <main+0xee>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <main+0x2b4>)
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2302      	movs	r3, #2
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	22fa      	movs	r2, #250	@ 0xfa
 800255e:	496e      	ldr	r1, [pc, #440]	@ (8002718 <main+0x2b8>)
 8002560:	486e      	ldr	r0, [pc, #440]	@ (800271c <main+0x2bc>)
 8002562:	f005 fbf3 	bl	8007d4c <xTaskCreate>
 8002566:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00b      	beq.n	8002586 <main+0x126>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	61fb      	str	r3, [r7, #28]
    }
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <main+0x122>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 8002586:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <main+0x2c0>)
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	2302      	movs	r3, #2
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	22fa      	movs	r2, #250	@ 0xfa
 8002592:	4964      	ldr	r1, [pc, #400]	@ (8002724 <main+0x2c4>)
 8002594:	4864      	ldr	r0, [pc, #400]	@ (8002728 <main+0x2c8>)
 8002596:	f005 fbd9 	bl	8007d4c <xTaskCreate>
 800259a:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d00b      	beq.n	80025ba <main+0x15a>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	61bb      	str	r3, [r7, #24]
    }
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <main+0x156>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 80025ba:	2200      	movs	r2, #0
 80025bc:	2101      	movs	r1, #1
 80025be:	200a      	movs	r0, #10
 80025c0:	f004 fd3e 	bl	8007040 <xQueueGenericCreate>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a59      	ldr	r2, [pc, #356]	@ (800272c <main+0x2cc>)
 80025c8:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 80025ca:	4b58      	ldr	r3, [pc, #352]	@ (800272c <main+0x2cc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <main+0x18a>
        __asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	617b      	str	r3, [r7, #20]
    }
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <main+0x186>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 80025ea:	2200      	movs	r2, #0
 80025ec:	2104      	movs	r1, #4
 80025ee:	200a      	movs	r0, #10
 80025f0:	f004 fd26 	bl	8007040 <xQueueGenericCreate>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002730 <main+0x2d0>)
 80025f8:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 80025fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <main+0x2d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <main+0x1ba>
        __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	613b      	str	r3, [r7, #16]
    }
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <main+0x1b6>

  // Create an event group to synchronize accelerometer readings and LED triggers
  ledEventGroup = xEventGroupCreate();
 800261a:	f004 fa5b 	bl	8006ad4 <xEventGroupCreate>
 800261e:	4603      	mov	r3, r0
 8002620:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <main+0x2d4>)
 8002622:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledEventGroup);
 8002624:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <main+0x2d4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <main+0x1e4>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60fb      	str	r3, [r7, #12]
    }
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <main+0x1e0>

  // Create a binary semaphore to synchronize RTC configuration and LED triggers
  rtcSemaphore = xSemaphoreCreateBinary();
 8002644:	2203      	movs	r2, #3
 8002646:	2100      	movs	r1, #0
 8002648:	2001      	movs	r0, #1
 800264a:	f004 fcf9 	bl	8007040 <xQueueGenericCreate>
 800264e:	4603      	mov	r3, r0
 8002650:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <main+0x2d8>)
 8002652:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != rtcSemaphore);
 8002654:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <main+0x2d8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <main+0x214>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	60bb      	str	r3, [r7, #8]
    }
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <main+0x210>

  // Create a binary semaphore to synchronize LEDs off after exiting RTC menu
  ledOffSemaphore = xSemaphoreCreateBinary();
 8002674:	2203      	movs	r2, #3
 8002676:	2100      	movs	r1, #0
 8002678:	2001      	movs	r0, #1
 800267a:	f004 fce1 	bl	8007040 <xQueueGenericCreate>
 800267e:	4603      	mov	r3, r0
 8002680:	4a2e      	ldr	r2, [pc, #184]	@ (800273c <main+0x2dc>)
 8002682:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledOffSemaphore);
 8002684:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <main+0x2dc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <main+0x244>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	607b      	str	r3, [r7, #4]
    }
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <main+0x240>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a8:	e010      	b.n	80026cc <main+0x26c>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	4a24      	ldr	r2, [pc, #144]	@ (8002740 <main+0x2e0>)
 80026ae:	9200      	str	r2, [sp, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80026b6:	4823      	ldr	r0, [pc, #140]	@ (8002744 <main+0x2e4>)
 80026b8:	f006 fe16 	bl	80092e8 <xTimerCreate>
 80026bc:	4602      	mov	r2, r0
 80026be:	4922      	ldr	r1, [pc, #136]	@ (8002748 <main+0x2e8>)
 80026c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80026c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c8:	3301      	adds	r3, #1
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	ddeb      	ble.n	80026aa <main+0x24a>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	491d      	ldr	r1, [pc, #116]	@ (800274c <main+0x2ec>)
 80026d6:	481e      	ldr	r0, [pc, #120]	@ (8002750 <main+0x2f0>)
 80026d8:	f003 fa81 	bl	8005bde <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 80026dc:	f005 fc7c 	bl	8007fd8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <main+0x280>
 80026e4:	20000268 	.word	0x20000268
 80026e8:	0800b4d8 	.word	0x0800b4d8
 80026ec:	080021dd 	.word	0x080021dd
 80026f0:	2000026c 	.word	0x2000026c
 80026f4:	0800b4e8 	.word	0x0800b4e8
 80026f8:	080022d9 	.word	0x080022d9
 80026fc:	20000270 	.word	0x20000270
 8002700:	0800b4f4 	.word	0x0800b4f4
 8002704:	08002309 	.word	0x08002309
 8002708:	20000274 	.word	0x20000274
 800270c:	0800b500 	.word	0x0800b500
 8002710:	08001321 	.word	0x08001321
 8002714:	20000278 	.word	0x20000278
 8002718:	0800b50c 	.word	0x0800b50c
 800271c:	08001afd 	.word	0x08001afd
 8002720:	2000027c 	.word	0x2000027c
 8002724:	0800b518 	.word	0x0800b518
 8002728:	08000d7d 	.word	0x08000d7d
 800272c:	20000284 	.word	0x20000284
 8002730:	20000280 	.word	0x20000280
 8002734:	20000298 	.word	0x20000298
 8002738:	2000029c 	.word	0x2000029c
 800273c:	200002a0 	.word	0x200002a0
 8002740:	080017c1 	.word	0x080017c1
 8002744:	0800b52c 	.word	0x0800b52c
 8002748:	20000288 	.word	0x20000288
 800274c:	200002a4 	.word	0x200002a4
 8002750:	20000220 	.word	0x20000220

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b094      	sub	sp, #80	@ 0x50
 8002758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	2230      	movs	r2, #48	@ 0x30
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f007 fda6 	bl	800a2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	4b29      	ldr	r3, [pc, #164]	@ (8002824 <SystemClock_Config+0xd0>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <SystemClock_Config+0xd0>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	@ 0x40
 8002788:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <SystemClock_Config+0xd0>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <SystemClock_Config+0xd4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a22      	ldr	r2, [pc, #136]	@ (8002828 <SystemClock_Config+0xd4>)
 800279e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <SystemClock_Config+0xd4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027b0:	230a      	movs	r3, #10
 80027b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b8:	2310      	movs	r3, #16
 80027ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027bc:	2301      	movs	r3, #1
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c0:	2302      	movs	r3, #2
 80027c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027c8:	2308      	movs	r3, #8
 80027ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80027cc:	2332      	movs	r3, #50	@ 0x32
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027d0:	2304      	movs	r3, #4
 80027d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027d4:	2307      	movs	r3, #7
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d8:	f107 0320 	add.w	r3, r7, #32
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fff3 	bl	80037c8 <HAL_RCC_OscConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027e8:	f000 fa5a 	bl	8002ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ec:	230f      	movs	r3, #15
 80027ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f0:	2302      	movs	r3, #2
 80027f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fa54 	bl	8003cb8 <HAL_RCC_ClockConfig>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002816:	f000 fa43 	bl	8002ca0 <Error_Handler>
  }
}
 800281a:	bf00      	nop
 800281c:	3750      	adds	r7, #80	@ 0x50
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000

0800282c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <MX_RTC_Init+0x44>)
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <MX_RTC_Init+0x48>)
 8002834:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002836:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <MX_RTC_Init+0x44>)
 8002838:	2240      	movs	r2, #64	@ 0x40
 800283a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <MX_RTC_Init+0x44>)
 800283e:	227f      	movs	r2, #127	@ 0x7f
 8002840:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002842:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <MX_RTC_Init+0x44>)
 8002844:	22ff      	movs	r2, #255	@ 0xff
 8002846:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <MX_RTC_Init+0x44>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <MX_RTC_Init+0x44>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <MX_RTC_Init+0x44>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800285a:	4805      	ldr	r0, [pc, #20]	@ (8002870 <MX_RTC_Init+0x44>)
 800285c:	f001 fd60 	bl	8004320 <HAL_RTC_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002866:	f000 fa1b 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200001a8 	.word	0x200001a8
 8002874:	40002800 	.word	0x40002800

08002878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800287c:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <MX_SPI1_Init+0x64>)
 800287e:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <MX_SPI1_Init+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002882:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <MX_SPI1_Init+0x64>)
 8002884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800288a:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <MX_SPI1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_SPI1_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028c4:	220a      	movs	r2, #10
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	@ (80028dc <MX_SPI1_Init+0x64>)
 80028ca:	f002 f835 	bl	8004938 <HAL_SPI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028d4:	f000 f9e4 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200001c8 	.word	0x200001c8
 80028e0:	40013000 	.word	0x40013000

080028e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <MX_USART2_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 800291c:	f003 f884 	bl	8005a28 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f000 f9bb 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000220 	.word	0x20000220
 8002934:	40004400 	.word	0x40004400

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	@ 0x30
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	4b9a      	ldr	r3, [pc, #616]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a99      	ldr	r2, [pc, #612]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002958:	f043 0310 	orr.w	r3, r3, #16
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b97      	ldr	r3, [pc, #604]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	4b93      	ldr	r3, [pc, #588]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a92      	ldr	r2, [pc, #584]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b90      	ldr	r3, [pc, #576]	@ (8002bbc <MX_GPIO_Init+0x284>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <MX_GPIO_Init+0x284>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a8b      	ldr	r2, [pc, #556]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <MX_GPIO_Init+0x284>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a84      	ldr	r2, [pc, #528]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b77      	ldr	r3, [pc, #476]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a76      	ldr	r2, [pc, #472]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b74      	ldr	r3, [pc, #464]	@ (8002bbc <MX_GPIO_Init+0x284>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2108      	movs	r1, #8
 80029fa:	4871      	ldr	r0, [pc, #452]	@ (8002bc0 <MX_GPIO_Init+0x288>)
 80029fc:	f000 feb0 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2101      	movs	r1, #1
 8002a04:	486f      	ldr	r0, [pc, #444]	@ (8002bc4 <MX_GPIO_Init+0x28c>)
 8002a06:	f000 feab 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002a10:	486d      	ldr	r0, [pc, #436]	@ (8002bc8 <MX_GPIO_Init+0x290>)
 8002a12:	f000 fea5 	bl	8003760 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002a16:	2308      	movs	r3, #8
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4864      	ldr	r0, [pc, #400]	@ (8002bc0 <MX_GPIO_Init+0x288>)
 8002a2e:	f000 fcfb 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	485e      	ldr	r0, [pc, #376]	@ (8002bc4 <MX_GPIO_Init+0x28c>)
 8002a4a:	f000 fced 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002a4e:	2308      	movs	r3, #8
 8002a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4856      	ldr	r0, [pc, #344]	@ (8002bc4 <MX_GPIO_Init+0x28c>)
 8002a6a:	f000 fcdd 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4852      	ldr	r0, [pc, #328]	@ (8002bcc <MX_GPIO_Init+0x294>)
 8002a84:	f000 fcd0 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002a88:	2310      	movs	r3, #16
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a98:	2306      	movs	r3, #6
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	484a      	ldr	r0, [pc, #296]	@ (8002bcc <MX_GPIO_Init+0x294>)
 8002aa4:	f000 fcc0 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4845      	ldr	r0, [pc, #276]	@ (8002bd0 <MX_GPIO_Init+0x298>)
 8002abc:	f000 fcb4 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	483c      	ldr	r0, [pc, #240]	@ (8002bd0 <MX_GPIO_Init+0x298>)
 8002ade:	f000 fca3 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002ae2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002ae6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	4619      	mov	r1, r3
 8002afa:	4833      	ldr	r0, [pc, #204]	@ (8002bc8 <MX_GPIO_Init+0x290>)
 8002afc:	f000 fc94 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002b00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b12:	2306      	movs	r3, #6
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4829      	ldr	r0, [pc, #164]	@ (8002bc4 <MX_GPIO_Init+0x28c>)
 8002b1e:	f000 fc83 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4825      	ldr	r0, [pc, #148]	@ (8002bcc <MX_GPIO_Init+0x294>)
 8002b38:	f000 fc76 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002b3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b4e:	230a      	movs	r3, #10
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	481c      	ldr	r0, [pc, #112]	@ (8002bcc <MX_GPIO_Init+0x294>)
 8002b5a:	f000 fc65 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4815      	ldr	r0, [pc, #84]	@ (8002bc8 <MX_GPIO_Init+0x290>)
 8002b72:	f000 fc59 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002b76:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7c:	2312      	movs	r3, #18
 8002b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	4619      	mov	r1, r3
 8002b92:	480f      	ldr	r0, [pc, #60]	@ (8002bd0 <MX_GPIO_Init+0x298>)
 8002b94:	f000 fc48 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b9c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	4804      	ldr	r0, [pc, #16]	@ (8002bc0 <MX_GPIO_Init+0x288>)
 8002bae:	f000 fc3b 	bl	8003428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	@ 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e002      	b.n	8002be8 <HAL_UART_RxCpltCallback+0x14>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002bee:	d3f8      	bcc.n	8002be2 <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <HAL_UART_RxCpltCallback+0x98>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 f824 	bl	8007c42 <xQueueIsQueueFullFromISR>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002c00:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <HAL_UART_RxCpltCallback+0x98>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	2200      	movs	r2, #0
 8002c08:	4919      	ldr	r1, [pc, #100]	@ (8002c70 <HAL_UART_RxCpltCallback+0x9c>)
 8002c0a:	f004 fba1 	bl	8007350 <xQueueGenericSendFromISR>
 8002c0e:	e013      	b.n	8002c38 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8002c10:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <HAL_UART_RxCpltCallback+0x9c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b0a      	cmp	r3, #10
 8002c18:	d10e      	bne.n	8002c38 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <HAL_UART_RxCpltCallback+0x98>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f107 010b 	add.w	r1, r7, #11
 8002c22:	2200      	movs	r2, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fe33 	bl	8007890 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_UART_RxCpltCallback+0x98>)
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2200      	movs	r2, #0
 8002c32:	490f      	ldr	r1, [pc, #60]	@ (8002c70 <HAL_UART_RxCpltCallback+0x9c>)
 8002c34:	f004 fb8c 	bl	8007350 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_UART_RxCpltCallback+0x9c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b0a      	cmp	r3, #10
 8002c40:	d10a      	bne.n	8002c58 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8002c42:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_UART_RxCpltCallback+0xa0>)
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	f006 f9a8 	bl	8008fa8 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4905      	ldr	r1, [pc, #20]	@ (8002c70 <HAL_UART_RxCpltCallback+0x9c>)
 8002c5c:	4806      	ldr	r0, [pc, #24]	@ (8002c78 <HAL_UART_RxCpltCallback+0xa4>)
 8002c5e:	f002 ffbe 	bl	8005bde <HAL_UART_Receive_IT>

}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000284 	.word	0x20000284
 8002c70:	200002a4 	.word	0x200002a4
 8002c74:	2000026c 	.word	0x2000026c
 8002c78:	20000220 	.word	0x20000220

08002c7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c8e:	f000 fa37 	bl	8003100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40001000 	.word	0x40001000

08002ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <Error_Handler+0x8>

08002cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d04:	f107 0308 	add.w	r3, r7, #8
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_RTC_MspInit+0x4c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d111      	bne.n	8002d40 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d24:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fa16 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002d36:	f7ff ffb3 	bl	8002ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <HAL_RTC_MspInit+0x50>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d40:	bf00      	nop
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40002800 	.word	0x40002800
 8002d4c:	42470e3c 	.word	0x42470e3c

08002d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	@ 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_SPI_MspInit+0x84>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002daa:	23e0      	movs	r3, #224	@ 0xe0
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dba:	2305      	movs	r3, #5
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	@ (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002dc6:	f000 fb2f 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40013000 	.word	0x40013000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <HAL_UART_MspInit+0x94>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d133      	bne.n	8002e6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_UART_MspInit+0x98>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4809      	ldr	r0, [pc, #36]	@ (8002e7c <HAL_UART_MspInit+0x9c>)
 8002e56:	f000 fae7 	bl	8003428 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2106      	movs	r1, #6
 8002e5e:	2026      	movs	r0, #38	@ 0x26
 8002e60:	f000 fa26 	bl	80032b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e64:	2026      	movs	r0, #38	@ 0x26
 8002e66:	f000 fa3f 	bl	80032e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	@ 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40004400 	.word	0x40004400
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000

08002e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	@ 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_InitTick+0xe4>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <HAL_InitTick+0xe4>)
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea0:	4b30      	ldr	r3, [pc, #192]	@ (8002f64 <HAL_InitTick+0xe4>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002eac:	f107 0210 	add.w	r2, r7, #16
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 f91e 	bl	80040f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ec6:	f001 f8ef 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8002eca:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ecc:	e004      	b.n	8002ed8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ece:	f001 f8eb 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eda:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_InitTick+0xe8>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9b      	lsrs	r3, r3, #18
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_InitTick+0xec>)
 8002ee8:	4a21      	ldr	r2, [pc, #132]	@ (8002f70 <HAL_InitTick+0xf0>)
 8002eea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <HAL_InitTick+0xec>)
 8002eee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ef2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_InitTick+0xec>)
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002efa:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <HAL_InitTick+0xec>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_InitTick+0xec>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f06:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_InitTick+0xec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f0c:	4817      	ldr	r0, [pc, #92]	@ (8002f6c <HAL_InitTick+0xec>)
 8002f0e:	f002 fae9 	bl	80054e4 <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002f18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11b      	bne.n	8002f58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f20:	4812      	ldr	r0, [pc, #72]	@ (8002f6c <HAL_InitTick+0xec>)
 8002f22:	f002 fb39 	bl	8005598 <HAL_TIM_Base_Start_IT>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d111      	bne.n	8002f58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f34:	2036      	movs	r0, #54	@ 0x36
 8002f36:	f000 f9d7 	bl	80032e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d808      	bhi.n	8002f52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	2036      	movs	r0, #54	@ 0x36
 8002f46:	f000 f9b3 	bl	80032b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <HAL_InitTick+0xf4>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e002      	b.n	8002f58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3738      	adds	r7, #56	@ 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	200002a8 	.word	0x200002a8
 8002f70:	40001000 	.word	0x40001000
 8002f74:	2000006c 	.word	0x2000006c

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <NMI_Handler+0x4>

08002f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <MemManage_Handler+0x4>

08002f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <BusFault_Handler+0x4>

08002f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <UsageFault_Handler+0x4>

08002fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fb4:	4802      	ldr	r0, [pc, #8]	@ (8002fc0 <USART2_IRQHandler+0x10>)
 8002fb6:	f002 fe37 	bl	8005c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000220 	.word	0x20000220

08002fc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc8:	4802      	ldr	r0, [pc, #8]	@ (8002fd4 <TIM6_DAC_IRQHandler+0x10>)
 8002fca:	f002 fb55 	bl	8005678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200002a8 	.word	0x200002a8

08002fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <_sbrk+0x5c>)
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <_sbrk+0x60>)
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <_sbrk+0x64>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	@ (8003040 <_sbrk+0x68>)
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d207      	bcs.n	8003018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003008:	f007 f95c 	bl	800a2c4 <__errno>
 800300c:	4603      	mov	r3, r0
 800300e:	220c      	movs	r2, #12
 8003010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003016:	e009      	b.n	800302c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <_sbrk+0x64>)
 8003028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20020000 	.word	0x20020000
 8003038:	00000400 	.word	0x00000400
 800303c:	200002f0 	.word	0x200002f0
 8003040:	200195e8 	.word	0x200195e8

08003044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <SystemInit+0x20>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <SystemInit+0x20>)
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800306c:	f7ff ffea 	bl	8003044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003070:	480c      	ldr	r0, [pc, #48]	@ (80030a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003072:	490d      	ldr	r1, [pc, #52]	@ (80030a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003074:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003088:	4c0a      	ldr	r4, [pc, #40]	@ (80030b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003096:	f007 f91b 	bl	800a2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309a:	f7ff f9e1 	bl	8002460 <main>
  bx  lr    
 800309e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80030ac:	0800b6ac 	.word	0x0800b6ac
  ldr r2, =_sbss
 80030b0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80030b4:	200195e8 	.word	0x200195e8

080030b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	@ (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 f8d8 	bl	800329a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f7ff fec8 	bl	8002e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7ff fddc 	bl	8002cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	@ (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000070 	.word	0x20000070
 8003124:	200002f4 	.word	0x200002f4

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200002f4 	.word	0x200002f4

08003140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <__NVIC_GetPriorityGrouping+0x18>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 0307 	and.w	r3, r3, #7
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0b      	blt.n	80031ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4907      	ldr	r1, [pc, #28]	@ (80031dc <__NVIC_EnableIRQ+0x38>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	@ (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff4c 	bl	8003140 <__NVIC_SetPriorityGrouping>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c2:	f7ff ff61 	bl	8003188 <__NVIC_GetPriorityGrouping>
 80032c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f7ff ffb1 	bl	8003234 <NVIC_EncodePriority>
 80032d2:	4602      	mov	r2, r0
 80032d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff80 	bl	80031e0 <__NVIC_SetPriority>
}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff54 	bl	80031a4 <__NVIC_EnableIRQ>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003312:	f7ff ff09 	bl	8003128 <HAL_GetTick>
 8003316:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e052      	b.n	80033dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0216 	bic.w	r2, r2, #22
 8003344:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003354:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_DMA_Abort+0x62>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0208 	bic.w	r2, r2, #8
 8003374:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003386:	e013      	b.n	80033b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003388:	f7ff fece 	bl	8003128 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b05      	cmp	r3, #5
 8003394:	d90c      	bls.n	80033b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2203      	movs	r2, #3
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e015      	b.n	80033dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e4      	bne.n	8003388 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	223f      	movs	r2, #63	@ 0x3f
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e00c      	b.n	800341c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2205      	movs	r2, #5
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e16b      	b.n	800371c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 815a 	bne.w	8003716 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d005      	beq.n	800347a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	2b02      	cmp	r3, #2
 8003478:	d130      	bne.n	80034dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0201 	and.w	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d017      	beq.n	8003518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80b4 	beq.w	8003716 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b60      	ldr	r3, [pc, #384]	@ (8003734 <HAL_GPIO_Init+0x30c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003734 <HAL_GPIO_Init+0x30c>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035be:	4b5d      	ldr	r3, [pc, #372]	@ (8003734 <HAL_GPIO_Init+0x30c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003738 <HAL_GPIO_Init+0x310>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_GPIO_Init+0x314>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d02b      	beq.n	800364e <HAL_GPIO_Init+0x226>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a51      	ldr	r2, [pc, #324]	@ (8003740 <HAL_GPIO_Init+0x318>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d025      	beq.n	800364a <HAL_GPIO_Init+0x222>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a50      	ldr	r2, [pc, #320]	@ (8003744 <HAL_GPIO_Init+0x31c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01f      	beq.n	8003646 <HAL_GPIO_Init+0x21e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4f      	ldr	r2, [pc, #316]	@ (8003748 <HAL_GPIO_Init+0x320>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d019      	beq.n	8003642 <HAL_GPIO_Init+0x21a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4e      	ldr	r2, [pc, #312]	@ (800374c <HAL_GPIO_Init+0x324>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x216>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4d      	ldr	r2, [pc, #308]	@ (8003750 <HAL_GPIO_Init+0x328>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00d      	beq.n	800363a <HAL_GPIO_Init+0x212>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4c      	ldr	r2, [pc, #304]	@ (8003754 <HAL_GPIO_Init+0x32c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <HAL_GPIO_Init+0x20e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <HAL_GPIO_Init+0x330>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_GPIO_Init+0x20a>
 800362e:	2307      	movs	r3, #7
 8003630:	e00e      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003632:	2308      	movs	r3, #8
 8003634:	e00c      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003636:	2306      	movs	r3, #6
 8003638:	e00a      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800363a:	2305      	movs	r3, #5
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800363e:	2304      	movs	r3, #4
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800364e:	2300      	movs	r3, #0
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	@ (8003738 <HAL_GPIO_Init+0x310>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_GPIO_Init+0x334>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a32      	ldr	r2, [pc, #200]	@ (800375c <HAL_GPIO_Init+0x334>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b30      	ldr	r3, [pc, #192]	@ (800375c <HAL_GPIO_Init+0x334>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a27      	ldr	r2, [pc, #156]	@ (800375c <HAL_GPIO_Init+0x334>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036c2:	4b26      	ldr	r3, [pc, #152]	@ (800375c <HAL_GPIO_Init+0x334>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e6:	4a1d      	ldr	r2, [pc, #116]	@ (800375c <HAL_GPIO_Init+0x334>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_GPIO_Init+0x334>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003710:	4a12      	ldr	r2, [pc, #72]	@ (800375c <HAL_GPIO_Init+0x334>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	f67f ae90 	bls.w	8003444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40021400 	.word	0x40021400
 8003754:	40021800 	.word	0x40021800
 8003758:	40021c00 	.word	0x40021c00
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037a4:	887a      	ldrh	r2, [r7, #2]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4013      	ands	r3, r2
 80037aa:	041a      	lsls	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	400b      	ands	r3, r1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e267      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d075      	beq.n	80038d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e6:	4b88      	ldr	r3, [pc, #544]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b85      	ldr	r3, [pc, #532]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d112      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b82      	ldr	r3, [pc, #520]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e242      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x74>
 800382e:	4b76      	ldr	r3, [pc, #472]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a75      	ldr	r2, [pc, #468]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x98>
 8003846:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6d      	ldr	r3, [pc, #436]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6c      	ldr	r2, [pc, #432]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 8003860:	4b69      	ldr	r3, [pc, #420]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a68      	ldr	r2, [pc, #416]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7ff fc52 	bl	8003128 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003888:	f7ff fc4e 	bl	8003128 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e207      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xc0>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7ff fc3e 	bl	8003128 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7ff fc3a 	bl	8003128 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1f3      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b51      	ldr	r3, [pc, #324]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe8>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038de:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b44      	ldr	r3, [pc, #272]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c7      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4937      	ldr	r1, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b34      	ldr	r3, [pc, #208]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7ff fbf3 	bl	8003128 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003946:	f7ff fbef 	bl	8003128 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a8      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4925      	ldr	r1, [pc, #148]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7ff fbd2 	bl	8003128 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003988:	f7ff fbce 	bl	8003128 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e187      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d036      	beq.n	8003a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7ff fbb2 	bl	8003128 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c8:	f7ff fbae 	bl	8003128 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e167      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x200>
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7ff fb9b 	bl	8003128 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	e00e      	b.n	8003a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f6:	f7ff fb97 	bl	8003128 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d907      	bls.n	8003a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e150      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ea      	bne.n	80039f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b81      	ldr	r3, [pc, #516]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	4b7d      	ldr	r3, [pc, #500]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a7c      	ldr	r2, [pc, #496]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b77      	ldr	r3, [pc, #476]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b74      	ldr	r3, [pc, #464]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a73      	ldr	r2, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7ff fb57 	bl	8003128 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7ff fb53 	bl	8003128 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e10c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b6a      	ldr	r3, [pc, #424]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2ea>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x30c>
 8003aba:	4b5f      	ldr	r3, [pc, #380]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a5e      	ldr	r2, [pc, #376]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a5b      	ldr	r2, [pc, #364]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ad4:	4b58      	ldr	r3, [pc, #352]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a57      	ldr	r2, [pc, #348]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae0:	4b55      	ldr	r3, [pc, #340]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7ff fb18 	bl	8003128 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7ff fb14 	bl	8003128 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0cb      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x334>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7ff fb02 	bl	8003128 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7ff fafe 	bl	8003128 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0b5      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	4a38      	ldr	r2, [pc, #224]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a1 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b66:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d05c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d141      	bne.n	8003bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff fad2 	bl	8003128 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7ff face 	bl	8003128 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e087      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	491b      	ldr	r1, [pc, #108]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7ff faa7 	bl	8003128 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bde:	f7ff faa3 	bl	8003128 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e05c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x416>
 8003bfc:	e054      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7ff fa90 	bl	8003128 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7ff fa8c 	bl	8003128 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e045      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x444>
 8003c2a:	e03d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e038      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4ec>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d121      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0cc      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b65      	ldr	r3, [pc, #404]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b8      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a58      	ldr	r2, [pc, #352]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a52      	ldr	r2, [pc, #328]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b50      	ldr	r3, [pc, #320]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	494d      	ldr	r1, [pc, #308]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d044      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d119      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e067      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4934      	ldr	r1, [pc, #208]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7ff f9be 	bl	8003128 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7ff f9ba 	bl	8003128 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e04f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d20c      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e032      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	490e      	ldr	r1, [pc, #56]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490a      	ldr	r1, [pc, #40]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a09      	ldr	r2, [pc, #36]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f80e 	bl	8002e80 <HAL_InitTick>

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	0800b550 	.word	0x0800b550
 8003e7c:	20000068 	.word	0x20000068
 8003e80:	2000006c 	.word	0x2000006c

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b094      	sub	sp, #80	@ 0x50
 8003e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e90:	2300      	movs	r3, #0
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e94:	2300      	movs	r3, #0
 8003e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9c:	4b79      	ldr	r3, [pc, #484]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	f200 80e1 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb6:	e0db      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b73      	ldr	r3, [pc, #460]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ebc:	e0db      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ebe:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec2:	e0d8      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b6d      	ldr	r3, [pc, #436]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b6a      	ldr	r3, [pc, #424]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	0159      	lsls	r1, r3, #5
 8003f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f08:	0150      	lsls	r0, r2, #5
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4621      	mov	r1, r4
 8003f10:	1a51      	subs	r1, r2, r1
 8003f12:	6139      	str	r1, [r7, #16]
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f28:	4659      	mov	r1, fp
 8003f2a:	018b      	lsls	r3, r1, #6
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f32:	4651      	mov	r1, sl
 8003f34:	018a      	lsls	r2, r1, #6
 8003f36:	4651      	mov	r1, sl
 8003f38:	ebb2 0801 	subs.w	r8, r2, r1
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	462b      	mov	r3, r5
 8003f64:	eb49 0303 	adc.w	r3, r9, r3
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f76:	4629      	mov	r1, r5
 8003f78:	024b      	lsls	r3, r1, #9
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f80:	4621      	mov	r1, r4
 8003f82:	024a      	lsls	r2, r1, #9
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f94:	f7fc fd7a 	bl	8000a8c <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa0:	e058      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	4611      	mov	r1, r2
 8003fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fce:	0150      	lsls	r0, r2, #5
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	00eb      	lsls	r3, r5, #3
 8004006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400a:	00e2      	lsls	r2, r4, #3
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	4643      	mov	r3, r8
 8004012:	18e3      	adds	r3, r4, r3
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	464b      	mov	r3, r9
 8004018:	eb45 0303 	adc.w	r3, r5, r3
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403e:	2200      	movs	r2, #0
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004048:	f7fc fd20 	bl	8000a8c <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004078:	4618      	mov	r0, r3
 800407a:	3750      	adds	r7, #80	@ 0x50
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000068 	.word	0x20000068

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800b560 	.word	0x0800b560

080040d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d4:	f7ff ffdc 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800b560 	.word	0x0800b560

080040f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	220f      	movs	r2, #15
 8004106:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <HAL_RCC_GetClockConfig+0x5c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0203 	and.w	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_RCC_GetClockConfig+0x5c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCC_GetClockConfig+0x5c>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCC_GetClockConfig+0x5c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	08db      	lsrs	r3, r3, #3
 8004132:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <HAL_RCC_GetClockConfig+0x60>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0207 	and.w	r2, r3, #7
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	601a      	str	r2, [r3, #0]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	40023c00 	.word	0x40023c00

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004180:	2b00      	cmp	r3, #0
 8004182:	d035      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004184:	4b62      	ldr	r3, [pc, #392]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800418a:	f7fe ffcd 	bl	8003128 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004192:	f7fe ffc9 	bl	8003128 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0b0      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	019a      	lsls	r2, r3, #6
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	071b      	lsls	r3, r3, #28
 80041bc:	4955      	ldr	r1, [pc, #340]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041c4:	4b52      	ldr	r3, [pc, #328]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ca:	f7fe ffad 	bl	8003128 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d2:	f7fe ffa9 	bl	8003128 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e090      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8083 	beq.w	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b44      	ldr	r3, [pc, #272]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	4a43      	ldr	r2, [pc, #268]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
 800420e:	4b41      	ldr	r3, [pc, #260]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800421a:	4b3f      	ldr	r3, [pc, #252]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a3e      	ldr	r2, [pc, #248]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004226:	f7fe ff7f 	bl	8003128 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe ff7b 	bl	8003128 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e062      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004240:	4b35      	ldr	r3, [pc, #212]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424c:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004254:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	429a      	cmp	r2, r3
 8004268:	d028      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426a:	4b2a      	ldr	r3, [pc, #168]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004272:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004274:	4b29      	ldr	r3, [pc, #164]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800427a:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004280:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d114      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe ff49 	bl	8003128 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe ff45 	bl	8003128 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e02a      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c8:	d10d      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042ca:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80042da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042de:	490d      	ldr	r1, [pc, #52]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]
 80042e4:	e005      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80042f0:	6093      	str	r3, [r2, #8]
 80042f2:	4b08      	ldr	r3, [pc, #32]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fe:	4905      	ldr	r1, [pc, #20]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	4313      	orrs	r3, r2
 8004302:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	42470068 	.word	0x42470068
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
 800431c:	42470e40 	.word	0x42470e40

08004320 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e073      	b.n	800441e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7f5b      	ldrb	r3, [r3, #29]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe fcd8 	bl	8002cfc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d055      	beq.n	800440c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	22ca      	movs	r2, #202	@ 0xca
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2253      	movs	r2, #83	@ 0x53
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa49 	bl	8004808 <RTC_EnterInitMode>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d12c      	bne.n	80043da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800438e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004392:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68d2      	ldr	r2, [r2, #12]
 80043ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6919      	ldr	r1, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	041a      	lsls	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa50 	bl	8004876 <RTC_ExitInitMode>
 80043d6:	4603      	mov	r3, r0
 80043d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d110      	bne.n	8004402 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	@ 0xff
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24
 800440a:	e001      	b.n	8004410 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004426:	b590      	push	{r4, r7, lr}
 8004428:	b087      	sub	sp, #28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	7f1b      	ldrb	r3, [r3, #28]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_RTC_SetTime+0x1c>
 800443e:	2302      	movs	r3, #2
 8004440:	e087      	b.n	8004552 <HAL_RTC_SetTime+0x12c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2202      	movs	r2, #2
 800444c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d126      	bne.n	80044a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa27 	bl	80048c0 <RTC_ByteToBcd2>
 8004472:	4603      	mov	r3, r0
 8004474:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	785b      	ldrb	r3, [r3, #1]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fa20 	bl	80048c0 <RTC_ByteToBcd2>
 8004480:	4603      	mov	r3, r0
 8004482:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004484:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	789b      	ldrb	r3, [r3, #2]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa18 	bl	80048c0 <RTC_ByteToBcd2>
 8004490:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004492:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	78db      	ldrb	r3, [r3, #3]
 800449a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e018      	b.n	80044d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	785b      	ldrb	r3, [r3, #1]
 80044c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	78db      	ldrb	r3, [r3, #3]
 80044ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	22ca      	movs	r2, #202	@ 0xca
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2253      	movs	r2, #83	@ 0x53
 80044e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f98f 	bl	8004808 <RTC_EnterInitMode>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d120      	bne.n	8004536 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80044fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004502:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004512:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6899      	ldr	r1, [r3, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f9a2 	bl	8004876 <RTC_ExitInitMode>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	22ff      	movs	r2, #255	@ 0xff
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]

  return status;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
}
 8004552:	4618      	mov	r0, r3
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}

0800455a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800458c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004590:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	0d9b      	lsrs	r3, r3, #22
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11a      	bne.n	800460c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f98e 	bl	80048fc <RTC_Bcd2ToByte>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f985 	bl	80048fc <RTC_Bcd2ToByte>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	789b      	ldrb	r3, [r3, #2]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f97c 	bl	80048fc <RTC_Bcd2ToByte>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004616:	b590      	push	{r4, r7, lr}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	7f1b      	ldrb	r3, [r3, #28]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_RTC_SetDate+0x1c>
 800462e:	2302      	movs	r3, #2
 8004630:	e071      	b.n	8004716 <HAL_RTC_SetDate+0x100>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2202      	movs	r2, #2
 800463c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10e      	bne.n	8004662 <HAL_RTC_SetDate+0x4c>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	b2db      	uxtb	r3, r3
 800465a:	330a      	adds	r3, #10
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	78db      	ldrb	r3, [r3, #3]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f927 	bl	80048c0 <RTC_ByteToBcd2>
 8004672:	4603      	mov	r3, r0
 8004674:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f920 	bl	80048c0 <RTC_ByteToBcd2>
 8004680:	4603      	mov	r3, r0
 8004682:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004684:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f918 	bl	80048c0 <RTC_ByteToBcd2>
 8004690:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004692:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e00e      	b.n	80046c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	22ca      	movs	r2, #202	@ 0xca
 80046c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2253      	movs	r2, #83	@ 0x53
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f899 	bl	8004808 <RTC_EnterInitMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10c      	bne.n	80046fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f8c0 	bl	8004876 <RTC_ExitInitMode>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	22ff      	movs	r2, #255	@ 0xff
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]

  return status;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}

0800471e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004738:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800473c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0b5b      	lsrs	r3, r3, #13
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11a      	bne.n	80047b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f8bb 	bl	80048fc <RTC_Bcd2ToByte>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f8b2 	bl	80048fc <RTC_Bcd2ToByte>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	789b      	ldrb	r3, [r3, #2]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f8a9 	bl	80048fc <RTC_Bcd2ToByte>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <HAL_RTC_WaitForSynchro+0x48>)
 80047ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d0:	f7fe fcaa 	bl	8003128 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047d6:	e009      	b.n	80047ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047d8:	f7fe fca6 	bl	8003128 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047e6:	d901      	bls.n	80047ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e007      	b.n	80047fc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ee      	beq.n	80047d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	00017f5f 	.word	0x00017f5f

08004808 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d122      	bne.n	800486c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004834:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004836:	f7fe fc77 	bl	8003128 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800483c:	e00c      	b.n	8004858 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800483e:	f7fe fc73 	bl	8003128 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800484c:	d904      	bls.n	8004858 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <RTC_EnterInitMode+0x64>
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d1e8      	bne.n	800483e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004890:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff8b 	bl	80047bc <HAL_RTC_WaitForSynchro>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2204      	movs	r2, #4
 80048b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80048ce:	e005      	b.n	80048dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	3b0a      	subs	r3, #10
 80048da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d8f6      	bhi.n	80048d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b2db      	uxtb	r3, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4413      	add	r3, r2
 800492a:	b2db      	uxtb	r3, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e07b      	b.n	8004a42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495a:	d009      	beq.n	8004970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]
 8004962:	e005      	b.n	8004970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fe f9e0 	bl	8002d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f4:	ea42 0103 	orr.w	r1, r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	f003 0104 	and.w	r1, r3, #4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	f003 0210 	and.w	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b088      	sub	sp, #32
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_SPI_Transmit+0x22>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e12d      	b.n	8004cc8 <HAL_SPI_Transmit+0x27e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a74:	f7fe fb58 	bl	8003128 <HAL_GetTick>
 8004a78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8e:	e116      	b.n	8004cbe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x52>
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aa0:	e10d      	b.n	8004cbe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	88fa      	ldrh	r2, [r7, #6]
 8004ac0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae8:	d10f      	bne.n	8004b0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d007      	beq.n	8004b28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b30:	d14f      	bne.n	8004bd2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Transmit+0xf6>
 8004b3a:	8afb      	ldrh	r3, [r7, #22]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d142      	bne.n	8004bc6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	881a      	ldrh	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b64:	e02f      	b.n	8004bc6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d112      	bne.n	8004b9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b98:	e015      	b.n	8004bc6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9a:	f7fe fac5 	bl	8003128 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d803      	bhi.n	8004bb2 <HAL_SPI_Transmit+0x168>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb0:	d102      	bne.n	8004bb8 <HAL_SPI_Transmit+0x16e>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004bc4:	e07b      	b.n	8004cbe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1ca      	bne.n	8004b66 <HAL_SPI_Transmit+0x11c>
 8004bd0:	e050      	b.n	8004c74 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_SPI_Transmit+0x196>
 8004bda:	8afb      	ldrh	r3, [r7, #22]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d144      	bne.n	8004c6a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c06:	e030      	b.n	8004c6a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d113      	bne.n	8004c3e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c3c:	e015      	b.n	8004c6a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3e:	f7fe fa73 	bl	8003128 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d803      	bhi.n	8004c56 <HAL_SPI_Transmit+0x20c>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c54:	d102      	bne.n	8004c5c <HAL_SPI_Transmit+0x212>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c68:	e029      	b.n	8004cbe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1c9      	bne.n	8004c08 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fbdf 	bl	800543c <SPI_EndRxTxTransaction>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e003      	b.n	8004cbe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cf4:	e0fb      	b.n	8004eee <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfe:	d112      	bne.n	8004d26 <HAL_SPI_Receive+0x56>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f8ef 	bl	8004f00 <HAL_SPI_TransmitReceive>
 8004d22:	4603      	mov	r3, r0
 8004d24:	e0e8      	b.n	8004ef8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_SPI_Receive+0x64>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e0e1      	b.n	8004ef8 <HAL_SPI_Receive+0x228>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3c:	f7fe f9f4 	bl	8003128 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_SPI_Receive+0x7e>
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d52:	e0cc      	b.n	8004eee <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2204      	movs	r2, #4
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d9a:	d10f      	bne.n	8004dbc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004daa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b40      	cmp	r3, #64	@ 0x40
 8004dc8:	d007      	beq.n	8004dda <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d16a      	bne.n	8004eb8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004de2:	e032      	b.n	8004e4a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d115      	bne.n	8004e1e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f103 020c 	add.w	r2, r3, #12
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e1c:	e015      	b.n	8004e4a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1e:	f7fe f983 	bl	8003128 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d803      	bhi.n	8004e36 <HAL_SPI_Receive+0x166>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e34:	d102      	bne.n	8004e3c <HAL_SPI_Receive+0x16c>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004e48:	e051      	b.n	8004eee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1c7      	bne.n	8004de4 <HAL_SPI_Receive+0x114>
 8004e54:	e035      	b.n	8004ec2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d113      	bne.n	8004e8c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e8a:	e015      	b.n	8004eb8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8c:	f7fe f94c 	bl	8003128 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d803      	bhi.n	8004ea4 <HAL_SPI_Receive+0x1d4>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea2:	d102      	bne.n	8004eaa <HAL_SPI_Receive+0x1da>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004eb6:	e01a      	b.n	8004eee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1c9      	bne.n	8004e56 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa52 	bl	8005370 <SPI_EndRxTransaction>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
 8004ee4:	e003      	b.n	8004eee <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08c      	sub	sp, #48	@ 0x30
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x26>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e198      	b.n	8005258 <HAL_SPI_TransmitReceive+0x358>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f2e:	f7fe f8fb 	bl	8003128 <HAL_GetTick>
 8004f32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d00f      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x70>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f56:	d107      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x68>
 8004f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d003      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004f6e:	e16d      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x82>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x82>
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004f88:	e160      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2205      	movs	r2, #5
 8004f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	887a      	ldrh	r2, [r7, #2]
 8004fc6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d007      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ffa:	d17c      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_SPI_TransmitReceive+0x10a>
 8005004:	8b7b      	ldrh	r3, [r7, #26]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d16a      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	881a      	ldrh	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800502e:	e057      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d11b      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x176>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d016      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x176>
 8005048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d113      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d119      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x1b8>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	b292      	uxth	r2, r2
 800509a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050b4:	2301      	movs	r3, #1
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050b8:	f7fe f836 	bl	8003128 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d80b      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x1e0>
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80050de:	e0b5      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1a2      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x130>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d19d      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x130>
 80050f4:	e080      	b.n	80051f8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x204>
 80050fe:	8b7b      	ldrh	r3, [r7, #26]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d16f      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512a:	e05b      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d11c      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x274>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x274>
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d114      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d119      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x2b6>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d014      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b2:	2301      	movs	r3, #1
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b6:	f7fd ffb7 	bl	8003128 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d803      	bhi.n	80051ce <HAL_SPI_TransmitReceive+0x2ce>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051cc:	d102      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x2d4>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80051e2:	e033      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d19e      	bne.n	800512c <HAL_SPI_TransmitReceive+0x22c>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d199      	bne.n	800512c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f91d 	bl	800543c <SPI_EndRxTxTransaction>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005214:	e01a      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e003      	b.n	800524c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005254:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005258:	4618      	mov	r0, r3
 800525a:	3730      	adds	r7, #48	@ 0x30
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005270:	f7fd ff5a 	bl	8003128 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4413      	add	r3, r2
 800527e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005280:	f7fd ff52 	bl	8003128 <HAL_GetTick>
 8005284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005286:	4b39      	ldr	r3, [pc, #228]	@ (800536c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	015b      	lsls	r3, r3, #5
 800528c:	0d1b      	lsrs	r3, r3, #20
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	e054      	b.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529e:	d050      	beq.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a0:	f7fd ff42 	bl	8003128 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d902      	bls.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d13d      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ce:	d111      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d8:	d004      	beq.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e2:	d107      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fc:	d10f      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800531c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e017      	b.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d19b      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000068 	.word	0x20000068

08005370 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005384:	d111      	bne.n	80053aa <SPI_EndRxTransaction+0x3a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538e:	d004      	beq.n	800539a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005398:	d107      	bne.n	80053aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b2:	d12a      	bne.n	800540a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053bc:	d012      	beq.n	80053e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2180      	movs	r1, #128	@ 0x80
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff ff49 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02d      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e026      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2101      	movs	r1, #1
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff36 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e013      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	2101      	movs	r1, #1
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff ff23 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e000      	b.n	8005432 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2201      	movs	r2, #1
 8005450:	2102      	movs	r1, #2
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ff04 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e032      	b.n	80054d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <SPI_EndRxTxTransaction+0xa0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	@ (80054e0 <SPI_EndRxTxTransaction+0xa4>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	0d5b      	lsrs	r3, r3, #21
 800547a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548c:	d112      	bne.n	80054b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	2180      	movs	r1, #128	@ 0x80
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fee1 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e00f      	b.n	80054d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3b01      	subs	r3, #1
 80054be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	d0f2      	beq.n	80054b4 <SPI_EndRxTxTransaction+0x78>
 80054ce:	e000      	b.n	80054d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80054d0:	bf00      	nop
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000068 	.word	0x20000068
 80054e0:	165e9f81 	.word	0x165e9f81

080054e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e041      	b.n	800557a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f839 	bl	8005582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 f9c0 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04e      	b.n	800564e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a23      	ldr	r2, [pc, #140]	@ (800565c <HAL_TIM_Base_Start_IT+0xc4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055da:	d01d      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005660 <HAL_TIM_Base_Start_IT+0xc8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005664 <HAL_TIM_Base_Start_IT+0xcc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <HAL_TIM_Base_Start_IT+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1b      	ldr	r2, [pc, #108]	@ (800566c <HAL_TIM_Base_Start_IT+0xd4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_TIM_Base_Start_IT+0xd8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x80>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_TIM_Base_Start_IT+0xdc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d111      	bne.n	800563c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b06      	cmp	r3, #6
 8005628:	d010      	beq.n	800564c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563a:	e007      	b.n	800564c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40010400 	.word	0x40010400
 8005670:	40014000 	.word	0x40014000
 8005674:	40001800 	.word	0x40001800

08005678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d020      	beq.n	80056dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0202 	mvn.w	r2, #2
 80056ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8d2 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8c4 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8d5 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d020      	beq.n	8005728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0204 	mvn.w	r2, #4
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8ac 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f89e 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8af 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01b      	beq.n	8005774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0208 	mvn.w	r2, #8
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f886 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f878 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f889 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0210 	mvn.w	r2, #16
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2208      	movs	r2, #8
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f860 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f852 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f863 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0201 	mvn.w	r2, #1
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fd fa4c 	bl	8002c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f906 	bl	8005a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f834 	bl	8005894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0220 	mvn.w	r2, #32
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8d8 	bl	8005a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a46      	ldr	r2, [pc, #280]	@ (80059d4 <TIM_Base_SetConfig+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a43      	ldr	r2, [pc, #268]	@ (80059d8 <TIM_Base_SetConfig+0x130>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a42      	ldr	r2, [pc, #264]	@ (80059dc <TIM_Base_SetConfig+0x134>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a41      	ldr	r2, [pc, #260]	@ (80059e0 <TIM_Base_SetConfig+0x138>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	@ (80059e4 <TIM_Base_SetConfig+0x13c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a35      	ldr	r2, [pc, #212]	@ (80059d4 <TIM_Base_SetConfig+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d027      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a32      	ldr	r2, [pc, #200]	@ (80059d8 <TIM_Base_SetConfig+0x130>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d023      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a31      	ldr	r2, [pc, #196]	@ (80059dc <TIM_Base_SetConfig+0x134>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <TIM_Base_SetConfig+0x138>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	@ (80059e4 <TIM_Base_SetConfig+0x13c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2e      	ldr	r2, [pc, #184]	@ (80059e8 <TIM_Base_SetConfig+0x140>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2d      	ldr	r2, [pc, #180]	@ (80059ec <TIM_Base_SetConfig+0x144>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2c      	ldr	r2, [pc, #176]	@ (80059f0 <TIM_Base_SetConfig+0x148>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2b      	ldr	r2, [pc, #172]	@ (80059f4 <TIM_Base_SetConfig+0x14c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <TIM_Base_SetConfig+0x150>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <TIM_Base_SetConfig+0x154>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a10      	ldr	r2, [pc, #64]	@ (80059d4 <TIM_Base_SetConfig+0x12c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a12      	ldr	r2, [pc, #72]	@ (80059e4 <TIM_Base_SetConfig+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d105      	bne.n	80059c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]
  }
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40010400 	.word	0x40010400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40001800 	.word	0x40001800
 80059f8:	40001c00 	.word	0x40001c00
 80059fc:	40002000 	.word	0x40002000

08005a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e042      	b.n	8005ac0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fd f9c6 	bl	8002de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	@ 0x24
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fdbd 	bl	80065ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	@ 0x28
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d175      	bne.n	8005bd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Transmit+0x2c>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e06e      	b.n	8005bd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	@ 0x21
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b06:	f7fd fb0f 	bl	8003128 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b20:	d108      	bne.n	8005b34 <HAL_UART_Transmit+0x6c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e003      	b.n	8005b3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b3c:	e02e      	b.n	8005b9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2180      	movs	r1, #128	@ 0x80
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fb1f 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e03a      	b.n	8005bd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e007      	b.n	8005b8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1cb      	bne.n	8005b3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2140      	movs	r1, #64	@ 0x40
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 faeb 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e000      	b.n	8005bd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	4613      	mov	r3, r2
 8005bea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d112      	bne.n	8005c1e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Receive_IT+0x26>
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e00b      	b.n	8005c20 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fb12 	bl	800623e <UART_Start_Receive_IT>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	e000      	b.n	8005c20 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b0ba      	sub	sp, #232	@ 0xe8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <HAL_UART_IRQHandler+0x66>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fbf2 	bl	8006470 <UART_Receive_IT>
      return;
 8005c8c:	e25b      	b.n	8006146 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80de 	beq.w	8005e54 <HAL_UART_IRQHandler+0x22c>
 8005c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80d1 	beq.w	8005e54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xae>
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	f043 0201 	orr.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_UART_IRQHandler+0xd2>
 8005ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f043 0202 	orr.w	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_UART_IRQHandler+0xf6>
 8005d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <HAL_UART_IRQHandler+0x126>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d105      	bne.n	8005d42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	f043 0208 	orr.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 81f2 	beq.w	800613c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_UART_IRQHandler+0x14e>
 8005d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb7d 	bl	8006470 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <HAL_UART_IRQHandler+0x17a>
 8005d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d04f      	beq.n	8005e42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa85 	bl	80062b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db2:	2b40      	cmp	r3, #64	@ 0x40
 8005db4:	d141      	bne.n	8005e3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3314      	adds	r3, #20
 8005dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005de2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1d9      	bne.n	8005db6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d013      	beq.n	8005e32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8006008 <HAL_UART_IRQHandler+0x3e0>)
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd fae4 	bl	80033e4 <HAL_DMA_Abort_IT>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00e      	b.n	8005e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f994 	bl	8006160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e00a      	b.n	8005e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f990 	bl	8006160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	e006      	b.n	8005e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f98c 	bl	8006160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e4e:	e175      	b.n	800613c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	bf00      	nop
    return;
 8005e52:	e173      	b.n	800613c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 814f 	bne.w	80060fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8148 	beq.w	80060fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8141 	beq.w	80060fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	f040 80b6 	bne.w	800600c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005eac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8145 	beq.w	8006140 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	f080 813e 	bcs.w	8006140 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed6:	f000 8088 	beq.w	8005fea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d9      	bne.n	8005eda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3314      	adds	r3, #20
 8005f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e1      	bne.n	8005f26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e3      	bne.n	8005f62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fcc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e3      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fd f98d 	bl	8003304 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f8b7 	bl	8006174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006006:	e09b      	b.n	8006140 <HAL_UART_IRQHandler+0x518>
 8006008:	08006379 	.word	0x08006379
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006014:	b29b      	uxth	r3, r3
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 808e 	beq.w	8006144 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 8089 	beq.w	8006144 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006056:	647a      	str	r2, [r7, #68]	@ 0x44
 8006058:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800605c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e3      	bne.n	8006032 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	623b      	str	r3, [r7, #32]
   return(result);
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3314      	adds	r3, #20
 800608a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800608e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e3      	bne.n	800606a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80060d4:	61fa      	str	r2, [r7, #28]
 80060d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	617b      	str	r3, [r7, #20]
   return(result);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e3      	bne.n	80060b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f83d 	bl	8006174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060fa:	e023      	b.n	8006144 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <HAL_UART_IRQHandler+0x4f4>
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f943 	bl	80063a0 <UART_Transmit_IT>
    return;
 800611a:	e014      	b.n	8006146 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <HAL_UART_IRQHandler+0x51e>
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f983 	bl	8006440 <UART_EndTransmit_IT>
    return;
 800613a:	e004      	b.n	8006146 <HAL_UART_IRQHandler+0x51e>
    return;
 800613c:	bf00      	nop
 800613e:	e002      	b.n	8006146 <HAL_UART_IRQHandler+0x51e>
      return;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <HAL_UART_IRQHandler+0x51e>
      return;
 8006144:	bf00      	nop
  }
}
 8006146:	37e8      	adds	r7, #232	@ 0xe8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	e03b      	b.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061a4:	d037      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fc ffbf 	bl	8003128 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <UART_WaitOnFlagUntilTimeout+0x30>
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e03a      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d023      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b80      	cmp	r3, #128	@ 0x80
 80061d2:	d020      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d01d      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d116      	bne.n	8006216 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f857 	bl	80062b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2208      	movs	r2, #8
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e00f      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d0b4      	beq.n	800619e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2222      	movs	r2, #34	@ 0x22
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006282:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0220 	orr.w	r2, r2, #32
 80062a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b095      	sub	sp, #84	@ 0x54
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062da:	643a      	str	r2, [r7, #64]	@ 0x40
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e5      	bne.n	80062ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800630e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006326:	2b01      	cmp	r3, #1
 8006328:	d119      	bne.n	800635e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	60bb      	str	r3, [r7, #8]
   return(result);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f023 0310 	bic.w	r3, r3, #16
 8006340:	647b      	str	r3, [r7, #68]	@ 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800634a:	61ba      	str	r2, [r7, #24]
 800634c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	613b      	str	r3, [r7, #16]
   return(result);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800636c:	bf00      	nop
 800636e:	3754      	adds	r7, #84	@ 0x54
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006384:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fee4 	bl	8006160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b21      	cmp	r3, #33	@ 0x21
 80063b2:	d13e      	bne.n	8006432 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063bc:	d114      	bne.n	80063e8 <UART_Transmit_IT+0x48>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d110      	bne.n	80063e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]
 80063e6:	e008      	b.n	80063fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6211      	str	r1, [r2, #32]
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4619      	mov	r1, r3
 8006408:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10f      	bne.n	800642e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800641c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800642c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006456:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fe73 	bl	800614c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	@ 0x30
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b22      	cmp	r3, #34	@ 0x22
 8006482:	f040 80ae 	bne.w	80065e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648e:	d117      	bne.n	80064c0 <UART_Receive_IT+0x50>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d113      	bne.n	80064c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80064be:	e026      	b.n	800650e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d2:	d007      	beq.n	80064e4 <UART_Receive_IT+0x74>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <UART_Receive_IT+0x82>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e008      	b.n	8006504 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29b      	uxth	r3, r3
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	4619      	mov	r1, r3
 800651c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800651e:	2b00      	cmp	r3, #0
 8006520:	d15d      	bne.n	80065de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0220 	bic.w	r2, r2, #32
 8006530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	2b01      	cmp	r3, #1
 8006566:	d135      	bne.n	80065d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	613b      	str	r3, [r7, #16]
   return(result);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f023 0310 	bic.w	r3, r3, #16
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658e:	623a      	str	r2, [r7, #32]
 8006590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	6a3a      	ldr	r2, [r7, #32]
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	61bb      	str	r3, [r7, #24]
   return(result);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d10a      	bne.n	80065c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fdd1 	bl	8006174 <HAL_UARTEx_RxEventCallback>
 80065d2:	e002      	b.n	80065da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fc fafd 	bl	8002bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e002      	b.n	80065e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3730      	adds	r7, #48	@ 0x30
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f0:	b0c0      	sub	sp, #256	@ 0x100
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	68d9      	ldr	r1, [r3, #12]
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	ea40 0301 	orr.w	r3, r0, r1
 8006614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	431a      	orrs	r2, r3
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	431a      	orrs	r2, r3
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006644:	f021 010c 	bic.w	r1, r1, #12
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006652:	430b      	orrs	r3, r1
 8006654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006666:	6999      	ldr	r1, [r3, #24]
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	ea40 0301 	orr.w	r3, r0, r1
 8006672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b8f      	ldr	r3, [pc, #572]	@ (80068b8 <UART_SetConfig+0x2cc>)
 800667c:	429a      	cmp	r2, r3
 800667e:	d005      	beq.n	800668c <UART_SetConfig+0xa0>
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b8d      	ldr	r3, [pc, #564]	@ (80068bc <UART_SetConfig+0x2d0>)
 8006688:	429a      	cmp	r2, r3
 800668a:	d104      	bne.n	8006696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800668c:	f7fd fd20 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 8006690:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006694:	e003      	b.n	800669e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006696:	f7fd fd07 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 800669a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a8:	f040 810c 	bne.w	80068c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066be:	4622      	mov	r2, r4
 80066c0:	462b      	mov	r3, r5
 80066c2:	1891      	adds	r1, r2, r2
 80066c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066c6:	415b      	adcs	r3, r3
 80066c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066ce:	4621      	mov	r1, r4
 80066d0:	eb12 0801 	adds.w	r8, r2, r1
 80066d4:	4629      	mov	r1, r5
 80066d6:	eb43 0901 	adc.w	r9, r3, r1
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ee:	4690      	mov	r8, r2
 80066f0:	4699      	mov	r9, r3
 80066f2:	4623      	mov	r3, r4
 80066f4:	eb18 0303 	adds.w	r3, r8, r3
 80066f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066fc:	462b      	mov	r3, r5
 80066fe:	eb49 0303 	adc.w	r3, r9, r3
 8006702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006712:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800671a:	460b      	mov	r3, r1
 800671c:	18db      	adds	r3, r3, r3
 800671e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006720:	4613      	mov	r3, r2
 8006722:	eb42 0303 	adc.w	r3, r2, r3
 8006726:	657b      	str	r3, [r7, #84]	@ 0x54
 8006728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800672c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006730:	f7fa f9ac 	bl	8000a8c <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4b61      	ldr	r3, [pc, #388]	@ (80068c0 <UART_SetConfig+0x2d4>)
 800673a:	fba3 2302 	umull	r2, r3, r3, r2
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	011c      	lsls	r4, r3, #4
 8006742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800674c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	1891      	adds	r1, r2, r2
 800675a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800675c:	415b      	adcs	r3, r3
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006764:	4641      	mov	r1, r8
 8006766:	eb12 0a01 	adds.w	sl, r2, r1
 800676a:	4649      	mov	r1, r9
 800676c:	eb43 0b01 	adc.w	fp, r3, r1
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800677c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006784:	4692      	mov	sl, r2
 8006786:	469b      	mov	fp, r3
 8006788:	4643      	mov	r3, r8
 800678a:	eb1a 0303 	adds.w	r3, sl, r3
 800678e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006792:	464b      	mov	r3, r9
 8006794:	eb4b 0303 	adc.w	r3, fp, r3
 8006798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067b0:	460b      	mov	r3, r1
 80067b2:	18db      	adds	r3, r3, r3
 80067b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b6:	4613      	mov	r3, r2
 80067b8:	eb42 0303 	adc.w	r3, r2, r3
 80067bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067c6:	f7fa f961 	bl	8000a8c <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	4b3b      	ldr	r3, [pc, #236]	@ (80068c0 <UART_SetConfig+0x2d4>)
 80067d2:	fba3 2301 	umull	r2, r3, r3, r1
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	2264      	movs	r2, #100	@ 0x64
 80067da:	fb02 f303 	mul.w	r3, r2, r3
 80067de:	1acb      	subs	r3, r1, r3
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067e6:	4b36      	ldr	r3, [pc, #216]	@ (80068c0 <UART_SetConfig+0x2d4>)
 80067e8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067f4:	441c      	add	r4, r3
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006800:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	1891      	adds	r1, r2, r2
 800680e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006810:	415b      	adcs	r3, r3
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006818:	4641      	mov	r1, r8
 800681a:	1851      	adds	r1, r2, r1
 800681c:	6339      	str	r1, [r7, #48]	@ 0x30
 800681e:	4649      	mov	r1, r9
 8006820:	414b      	adcs	r3, r1
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006830:	4659      	mov	r1, fp
 8006832:	00cb      	lsls	r3, r1, #3
 8006834:	4651      	mov	r1, sl
 8006836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683a:	4651      	mov	r1, sl
 800683c:	00ca      	lsls	r2, r1, #3
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	4603      	mov	r3, r0
 8006844:	4642      	mov	r2, r8
 8006846:	189b      	adds	r3, r3, r2
 8006848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800684c:	464b      	mov	r3, r9
 800684e:	460a      	mov	r2, r1
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006864:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800686c:	460b      	mov	r3, r1
 800686e:	18db      	adds	r3, r3, r3
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006872:	4613      	mov	r3, r2
 8006874:	eb42 0303 	adc.w	r3, r2, r3
 8006878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800687e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006882:	f7fa f903 	bl	8000a8c <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <UART_SetConfig+0x2d4>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	2164      	movs	r1, #100	@ 0x64
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	3332      	adds	r3, #50	@ 0x32
 800689e:	4a08      	ldr	r2, [pc, #32]	@ (80068c0 <UART_SetConfig+0x2d4>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	f003 0207 	and.w	r2, r3, #7
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4422      	add	r2, r4
 80068b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068b4:	e106      	b.n	8006ac4 <UART_SetConfig+0x4d8>
 80068b6:	bf00      	nop
 80068b8:	40011000 	.word	0x40011000
 80068bc:	40011400 	.word	0x40011400
 80068c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068d6:	4642      	mov	r2, r8
 80068d8:	464b      	mov	r3, r9
 80068da:	1891      	adds	r1, r2, r2
 80068dc:	6239      	str	r1, [r7, #32]
 80068de:	415b      	adcs	r3, r3
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068e6:	4641      	mov	r1, r8
 80068e8:	1854      	adds	r4, r2, r1
 80068ea:	4649      	mov	r1, r9
 80068ec:	eb43 0501 	adc.w	r5, r3, r1
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	00eb      	lsls	r3, r5, #3
 80068fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068fe:	00e2      	lsls	r2, r4, #3
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	4643      	mov	r3, r8
 8006906:	18e3      	adds	r3, r4, r3
 8006908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800690c:	464b      	mov	r3, r9
 800690e:	eb45 0303 	adc.w	r3, r5, r3
 8006912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006932:	4629      	mov	r1, r5
 8006934:	008b      	lsls	r3, r1, #2
 8006936:	4621      	mov	r1, r4
 8006938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800693c:	4621      	mov	r1, r4
 800693e:	008a      	lsls	r2, r1, #2
 8006940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006944:	f7fa f8a2 	bl	8000a8c <__aeabi_uldivmod>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4b60      	ldr	r3, [pc, #384]	@ (8006ad0 <UART_SetConfig+0x4e4>)
 800694e:	fba3 2302 	umull	r2, r3, r3, r2
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	011c      	lsls	r4, r3, #4
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006960:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	1891      	adds	r1, r2, r2
 800696e:	61b9      	str	r1, [r7, #24]
 8006970:	415b      	adcs	r3, r3
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006978:	4641      	mov	r1, r8
 800697a:	1851      	adds	r1, r2, r1
 800697c:	6139      	str	r1, [r7, #16]
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006990:	4659      	mov	r1, fp
 8006992:	00cb      	lsls	r3, r1, #3
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699a:	4651      	mov	r1, sl
 800699c:	00ca      	lsls	r2, r1, #3
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	4642      	mov	r2, r8
 80069a6:	189b      	adds	r3, r3, r2
 80069a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069ac:	464b      	mov	r3, r9
 80069ae:	460a      	mov	r2, r1
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069d0:	4649      	mov	r1, r9
 80069d2:	008b      	lsls	r3, r1, #2
 80069d4:	4641      	mov	r1, r8
 80069d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069da:	4641      	mov	r1, r8
 80069dc:	008a      	lsls	r2, r1, #2
 80069de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069e2:	f7fa f853 	bl	8000a8c <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	4b38      	ldr	r3, [pc, #224]	@ (8006ad0 <UART_SetConfig+0x4e4>)
 80069ee:	fba3 2301 	umull	r2, r3, r3, r1
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2264      	movs	r2, #100	@ 0x64
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	1acb      	subs	r3, r1, r3
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	3332      	adds	r3, #50	@ 0x32
 8006a00:	4a33      	ldr	r2, [pc, #204]	@ (8006ad0 <UART_SetConfig+0x4e4>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a0c:	441c      	add	r4, r3
 8006a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a12:	2200      	movs	r2, #0
 8006a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a16:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	415b      	adcs	r3, r3
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	1851      	adds	r1, r2, r1
 8006a30:	6039      	str	r1, [r7, #0]
 8006a32:	4649      	mov	r1, r9
 8006a34:	414b      	adcs	r3, r1
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a44:	4659      	mov	r1, fp
 8006a46:	00cb      	lsls	r3, r1, #3
 8006a48:	4651      	mov	r1, sl
 8006a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a4e:	4651      	mov	r1, sl
 8006a50:	00ca      	lsls	r2, r1, #3
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	4642      	mov	r2, r8
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a5e:	464b      	mov	r3, r9
 8006a60:	460a      	mov	r2, r1
 8006a62:	eb42 0303 	adc.w	r3, r2, r3
 8006a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a72:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a80:	4649      	mov	r1, r9
 8006a82:	008b      	lsls	r3, r1, #2
 8006a84:	4641      	mov	r1, r8
 8006a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	008a      	lsls	r2, r1, #2
 8006a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a92:	f7f9 fffb 	bl	8000a8c <__aeabi_uldivmod>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <UART_SetConfig+0x4e4>)
 8006a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	2164      	movs	r1, #100	@ 0x64
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	3332      	adds	r3, #50	@ 0x32
 8006aae:	4a08      	ldr	r2, [pc, #32]	@ (8006ad0 <UART_SetConfig+0x4e4>)
 8006ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4422      	add	r2, r4
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aca:	46bd      	mov	sp, r7
 8006acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad0:	51eb851f 	.word	0x51eb851f

08006ad4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006ada:	201c      	movs	r0, #28
 8006adc:	f003 f9c8 	bl	8009e70 <pvPortMalloc>
 8006ae0:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f986 	bl	8006e04 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8006af8:	687b      	ldr	r3, [r7, #4]
    }
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b090      	sub	sp, #64	@ 0x40
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <xEventGroupWaitBits+0x38>
        __asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	623b      	str	r3, [r7, #32]
    }
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	e7fd      	b.n	8006b38 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	d30b      	bcc.n	8006b5c <xEventGroupWaitBits+0x58>
        __asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	61fb      	str	r3, [r7, #28]
    }
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <xEventGroupWaitBits+0x76>
        __asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	61bb      	str	r3, [r7, #24]
    }
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <xEventGroupWaitBits+0x72>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b7a:	f001 fee5 	bl	8008948 <xTaskGetSchedulerState>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <xEventGroupWaitBits+0x86>
 8006b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <xEventGroupWaitBits+0x8a>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <xEventGroupWaitBits+0x8c>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <xEventGroupWaitBits+0xa8>
        __asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	617b      	str	r3, [r7, #20]
    }
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xEventGroupWaitBits+0xa4>
        }
    #endif

    vTaskSuspendAll();
 8006bac:	f001 fa66 	bl	800807c <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bbc:	f000 f900 	bl	8006dc0 <prvTestWaitCondition>
 8006bc0:	62b8      	str	r0, [r7, #40]	@ 0x28

        if( xWaitConditionMet != pdFALSE )
 8006bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00e      	beq.n	8006be6 <xEventGroupWaitBits+0xe2>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d028      	beq.n	8006c28 <xEventGroupWaitBits+0x124>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e020      	b.n	8006c28 <xEventGroupWaitBits+0x124>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8006be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <xEventGroupWaitBits+0xf2>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTimeoutOccurred = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf4:	e018      	b.n	8006c28 <xEventGroupWaitBits+0x124>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <xEventGroupWaitBits+0x100>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c02:	63bb      	str	r3, [r7, #56]	@ 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <xEventGroupWaitBits+0x10e>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c14:	1d18      	adds	r0, r3, #4
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f001 fc24 	bl	800846c <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8006c28:	f001 fa36 	bl	8008098 <xTaskResumeAll>
 8006c2c:	6278      	str	r0, [r7, #36]	@ 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d031      	beq.n	8006c98 <xEventGroupWaitBits+0x194>
    {
        if( xAlreadyYielded == pdFALSE )
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d107      	bne.n	8006c4a <xEventGroupWaitBits+0x146>
        {
            portYIELD_WITHIN_API();
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <xEventGroupWaitBits+0x1a0>)
 8006c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8006c4a:	f002 f81d 	bl	8008c88 <uxTaskResetEventItemValue>
 8006c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d11a      	bne.n	8006c90 <xEventGroupWaitBits+0x18c>
        {
            taskENTER_CRITICAL();
 8006c5a:	f002 ffdf 	bl	8009c1c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c6a:	f000 f8a9 	bl	8006dc0 <prvTestWaitCondition>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <xEventGroupWaitBits+0x184>
                {
                    if( xClearOnExit != pdFALSE )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <xEventGroupWaitBits+0x184>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	401a      	ands	r2, r3
 8006c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c86:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            taskEXIT_CRITICAL();
 8006c8c:	f002 fff8 	bl	8009c80 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8006c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3740      	adds	r7, #64	@ 0x40
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	@ 0x38
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    BaseType_t xMatchFound = pdFALSE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <xEventGroupSetBits+0x34>
        __asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	613b      	str	r3, [r7, #16]
    }
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce2:	d30b      	bcc.n	8006cfc <xEventGroupSetBits+0x54>
        __asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	60fb      	str	r3, [r7, #12]
    }
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	e7fd      	b.n	8006cf8 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	3304      	adds	r3, #4
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	3308      	adds	r3, #8
 8006d06:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8006d08:	f001 f9b8 	bl	800807c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8006d1e:	e03c      	b.n	8006d9a <xEventGroupSetBits+0xf2>
        {
            pxNext = listGET_NEXT( pxListItem );
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d36:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d108      	bne.n	8006d5c <xEventGroupSetBits+0xb4>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <xEventGroupSetBits+0xc6>
                {
                    xMatchFound = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d5a:	e008      	b.n	8006d6e <xEventGroupSetBits+0xc6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	4013      	ands	r3, r2
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d101      	bne.n	8006d6e <xEventGroupSetBits+0xc6>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <xEventGroupSetBits+0xee>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <xEventGroupSetBits+0xde>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006d92:	f001 fc39 	bl	8008608 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
        while( pxListItem != pxListEnd )
 8006d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d1be      	bne.n	8006d20 <xEventGroupSetBits+0x78>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	43db      	mvns	r3, r3
 8006daa:	401a      	ands	r2, r3
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8006db0:	f001 f972 	bl	8008098 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	681b      	ldr	r3, [r3, #0]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3738      	adds	r7, #56	@ 0x38
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e007      	b.n	8006df6 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d101      	bne.n	8006df6 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8006df6:	697b      	ldr	r3, [r7, #20]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f103 0208 	add.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f103 0208 	add.w	r2, r3, #8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f103 0208 	add.w	r2, r3, #8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ebc:	d103      	bne.n	8006ec6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e00c      	b.n	8006ee0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e002      	b.n	8006ed4 <vListInsert+0x2e>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d2f6      	bcs.n	8006ece <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6892      	ldr	r2, [r2, #8]
 8006f2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6852      	ldr	r2, [r2, #4]
 8006f38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d103      	bne.n	8006f4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <xQueueGenericReset+0x2c>
        __asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60bb      	str	r3, [r7, #8]
    }
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006f98:	f002 fe40 	bl	8009c1c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fa8:	fb01 f303 	mul.w	r3, r1, r3
 8006fac:	441a      	add	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	22ff      	movs	r2, #255	@ 0xff
 8006fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	22ff      	movs	r2, #255	@ 0xff
 8006fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d114      	bne.n	8007018 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01a      	beq.n	800702c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3310      	adds	r3, #16
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 faa0 	bl	8008540 <xTaskRemoveFromEventList>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d012      	beq.n	800702c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <xQueueGenericReset+0xd0>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	e009      	b.n	800702c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3310      	adds	r3, #16
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fef1 	bl	8006e04 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3324      	adds	r3, #36	@ 0x24
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff feec 	bl	8006e04 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800702c:	f002 fe28 	bl	8009c80 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8007030:	2301      	movs	r3, #1
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007040:	b580      	push	{r7, lr}
 8007042:	b08c      	sub	sp, #48	@ 0x30
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <xQueueGenericCreate+0x2c>
        __asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	61bb      	str	r3, [r7, #24]
    }
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <xQueueGenericCreate+0x4a>
 800707c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	429a      	cmp	r2, r3
 8007088:	d101      	bne.n	800708e <xQueueGenericCreate+0x4e>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGenericCreate+0x50>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xQueueGenericCreate+0x6c>
        __asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	617b      	str	r3, [r7, #20]
    }
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80070b2:	d90b      	bls.n	80070cc <xQueueGenericCreate+0x8c>
        __asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	613b      	str	r3, [r7, #16]
    }
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	3350      	adds	r3, #80	@ 0x50
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 fecd 	bl	8009e70 <pvPortMalloc>
 80070d6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3350      	adds	r3, #80	@ 0x50
 80070e6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070e8:	79fa      	ldrb	r2, [r7, #7]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4613      	mov	r3, r2
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f805 	bl	8007104 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
    }
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	@ 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e002      	b.n	8007126 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007132:	2101      	movs	r1, #1
 8007134:	69b8      	ldr	r0, [r7, #24]
 8007136:	f7ff ff19 	bl	8006f6c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08e      	sub	sp, #56	@ 0x38
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <xQueueGenericSend+0x34>
        __asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <xQueueGenericSend+0x42>
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <xQueueGenericSend+0x46>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <xQueueGenericSend+0x48>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10b      	bne.n	80071b0 <xQueueGenericSend+0x64>
        __asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	e7fd      	b.n	80071ac <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0x72>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <xQueueGenericSend+0x76>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueGenericSend+0x78>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueGenericSend+0x94>
        __asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
    }
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071e0:	f001 fbb2 	bl	8008948 <xTaskGetSchedulerState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <xQueueGenericSend+0xa4>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <xQueueGenericSend+0xa8>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <xQueueGenericSend+0xaa>
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <xQueueGenericSend+0xc6>
        __asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61fb      	str	r3, [r7, #28]
    }
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007212:	f002 fd03 	bl	8009c1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <xQueueGenericSend+0xdc>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d129      	bne.n	800727c <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722e:	f000 fbf8 	bl	8007a22 <prvCopyDataToQueue>
 8007232:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d010      	beq.n	800725e <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	3324      	adds	r3, #36	@ 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f97d 	bl	8008540 <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b3f      	ldr	r3, [pc, #252]	@ (800734c <xQueueGenericSend+0x200>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	e00a      	b.n	8007274 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007264:	4b39      	ldr	r3, [pc, #228]	@ (800734c <xQueueGenericSend+0x200>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007274:	f002 fd04 	bl	8009c80 <vPortExitCritical>
                return pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	e063      	b.n	8007344 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007282:	f002 fcfd 	bl	8009c80 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007286:	2300      	movs	r3, #0
 8007288:	e05c      	b.n	8007344 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800728a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fa1b 	bl	80086d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800729a:	2301      	movs	r3, #1
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800729e:	f002 fcef 	bl	8009c80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80072a2:	f000 feeb 	bl	800807c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80072a6:	f002 fcb9 	bl	8009c1c <vPortEnterCritical>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b6:	d103      	bne.n	80072c0 <xQueueGenericSend+0x174>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072cc:	d103      	bne.n	80072d6 <xQueueGenericSend+0x18a>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d6:	f002 fcd3 	bl	8009c80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fa0a 	bl	80086fc <xTaskCheckForTimeOut>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d124      	bne.n	8007338 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072f0:	f000 fc8f 	bl	8007c12 <prvIsQueueFull>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d018      	beq.n	800732c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	3310      	adds	r3, #16
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 f88c 	bl	8008420 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800730a:	f000 fc1a 	bl	8007b42 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800730e:	f000 fec3 	bl	8008098 <xTaskResumeAll>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	f47f af7c 	bne.w	8007212 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800731a:	4b0c      	ldr	r3, [pc, #48]	@ (800734c <xQueueGenericSend+0x200>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	e772      	b.n	8007212 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800732c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800732e:	f000 fc08 	bl	8007b42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007332:	f000 feb1 	bl	8008098 <xTaskResumeAll>
 8007336:	e76c      	b.n	8007212 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800733a:	f000 fc02 	bl	8007b42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800733e:	f000 feab 	bl	8008098 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8007342:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007344:	4618      	mov	r0, r3
 8007346:	3738      	adds	r7, #56	@ 0x38
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b090      	sub	sp, #64	@ 0x40
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	e7fd      	b.n	800737c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <xQueueGenericSendFromISR+0x3e>
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <xQueueGenericSendFromISR+0x42>
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <xQueueGenericSendFromISR+0x44>
 8007392:	2300      	movs	r3, #0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	e7fd      	b.n	80073ac <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d103      	bne.n	80073be <xQueueGenericSendFromISR+0x6e>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <xQueueGenericSendFromISR+0x72>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <xQueueGenericSendFromISR+0x74>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	623b      	str	r3, [r7, #32]
    }
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073e0:	f002 fd04 	bl	8009dec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80073e4:	f3ef 8211 	mrs	r2, BASEPRI
 80073e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	61fa      	str	r2, [r7, #28]
 80073fa:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80073fc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007408:	429a      	cmp	r2, r3
 800740a:	d302      	bcc.n	8007412 <xQueueGenericSendFromISR+0xc2>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d13f      	bne.n	8007492 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007418:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800741c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007428:	f000 fafb 	bl	8007a22 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800742c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007434:	d112      	bne.n	800745c <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d026      	beq.n	800748c <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800743e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007440:	3324      	adds	r3, #36	@ 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f87c 	bl	8008540 <xTaskRemoveFromEventList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01e      	beq.n	800748c <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e017      	b.n	800748c <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800745c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007460:	2b7f      	cmp	r3, #127	@ 0x7f
 8007462:	d10b      	bne.n	800747c <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	617b      	str	r3, [r7, #20]
    }
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800747c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007480:	3301      	adds	r3, #1
 8007482:	b2db      	uxtb	r3, r3
 8007484:	b25a      	sxtb	r2, r3
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800748c:	2301      	movs	r3, #1
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8007490:	e001      	b.n	8007496 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007498:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80074a0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80074a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3740      	adds	r7, #64	@ 0x40
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	@ 0x30
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <xQueueReceive+0x32>
        __asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	623b      	str	r3, [r7, #32]
    }
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <xQueueReceive+0x40>
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueReceive+0x44>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueReceive+0x46>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <xQueueReceive+0x62>
        __asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	61fb      	str	r3, [r7, #28]
    }
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750e:	f001 fa1b 	bl	8008948 <xTaskGetSchedulerState>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xQueueReceive+0x72>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueReceive+0x76>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueReceive+0x78>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <xQueueReceive+0x94>
        __asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61bb      	str	r3, [r7, #24]
    }
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007540:	f002 fb6c 	bl	8009c1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01f      	beq.n	8007590 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007554:	f000 facf 	bl	8007af6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	1e5a      	subs	r2, r3, #1
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00f      	beq.n	8007588 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	3310      	adds	r3, #16
 800756c:	4618      	mov	r0, r3
 800756e:	f000 ffe7 	bl	8008540 <xTaskRemoveFromEventList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d007      	beq.n	8007588 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007578:	4b3c      	ldr	r3, [pc, #240]	@ (800766c <xQueueReceive+0x1c0>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007588:	f002 fb7a 	bl	8009c80 <vPortExitCritical>
                return pdPASS;
 800758c:	2301      	movs	r3, #1
 800758e:	e069      	b.n	8007664 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007596:	f002 fb73 	bl	8009c80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800759a:	2300      	movs	r3, #0
 800759c:	e062      	b.n	8007664 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f891 	bl	80086d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80075ae:	2301      	movs	r3, #1
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80075b2:	f002 fb65 	bl	8009c80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80075b6:	f000 fd61 	bl	800807c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80075ba:	f002 fb2f 	bl	8009c1c <vPortEnterCritical>
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075c4:	b25b      	sxtb	r3, r3
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075ca:	d103      	bne.n	80075d4 <xQueueReceive+0x128>
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e0:	d103      	bne.n	80075ea <xQueueReceive+0x13e>
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ea:	f002 fb49 	bl	8009c80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ee:	1d3a      	adds	r2, r7, #4
 80075f0:	f107 0310 	add.w	r3, r7, #16
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f880 	bl	80086fc <xTaskCheckForTimeOut>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d123      	bne.n	800764a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007604:	f000 faef 	bl	8007be6 <prvIsQueueEmpty>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d017      	beq.n	800763e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007610:	3324      	adds	r3, #36	@ 0x24
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4611      	mov	r1, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f000 ff02 	bl	8008420 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800761c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800761e:	f000 fa90 	bl	8007b42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007622:	f000 fd39 	bl	8008098 <xTaskResumeAll>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d189      	bne.n	8007540 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800762c:	4b0f      	ldr	r3, [pc, #60]	@ (800766c <xQueueReceive+0x1c0>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	e780      	b.n	8007540 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800763e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007640:	f000 fa7f 	bl	8007b42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007644:	f000 fd28 	bl	8008098 <xTaskResumeAll>
 8007648:	e77a      	b.n	8007540 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800764a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800764c:	f000 fa79 	bl	8007b42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007650:	f000 fd22 	bl	8008098 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007656:	f000 fac6 	bl	8007be6 <prvIsQueueEmpty>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	f43f af6f 	beq.w	8007540 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007662:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007664:	4618      	mov	r0, r3
 8007666:	3730      	adds	r7, #48	@ 0x30
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08e      	sub	sp, #56	@ 0x38
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <xQueueSemaphoreTake+0x34>
        __asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	623b      	str	r3, [r7, #32]
    }
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	e7fd      	b.n	80076a0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	61fb      	str	r3, [r7, #28]
    }
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076c4:	f001 f940 	bl	8008948 <xTaskGetSchedulerState>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <xQueueSemaphoreTake+0x64>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <xQueueSemaphoreTake+0x68>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e000      	b.n	80076da <xQueueSemaphoreTake+0x6a>
 80076d8:	2300      	movs	r3, #0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <xQueueSemaphoreTake+0x86>
        __asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	61bb      	str	r3, [r7, #24]
    }
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80076f6:	f002 fa91 	bl	8009c1c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d024      	beq.n	8007750 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	1e5a      	subs	r2, r3, #1
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007716:	f001 facf 	bl	8008cb8 <pvTaskIncrementMutexHeldCount>
 800771a:	4602      	mov	r2, r0
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00f      	beq.n	8007748 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772a:	3310      	adds	r3, #16
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff07 	bl	8008540 <xTaskRemoveFromEventList>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007738:	4b54      	ldr	r3, [pc, #336]	@ (800788c <xQueueSemaphoreTake+0x21c>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007748:	f002 fa9a 	bl	8009c80 <vPortExitCritical>
                return pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	e098      	b.n	8007882 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d112      	bne.n	800777c <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <xQueueSemaphoreTake+0x104>
        __asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	617b      	str	r3, [r7, #20]
    }
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8007774:	f002 fa84 	bl	8009c80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007778:	2300      	movs	r3, #0
 800777a:	e082      	b.n	8007882 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800777c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	4618      	mov	r0, r3
 8007788:	f000 ffa2 	bl	80086d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007790:	f002 fa76 	bl	8009c80 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007794:	f000 fc72 	bl	800807c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007798:	f002 fa40 	bl	8009c1c <vPortEnterCritical>
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077a8:	d103      	bne.n	80077b2 <xQueueSemaphoreTake+0x142>
 80077aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077be:	d103      	bne.n	80077c8 <xQueueSemaphoreTake+0x158>
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077c8:	f002 fa5a 	bl	8009c80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077cc:	463a      	mov	r2, r7
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 ff91 	bl	80086fc <xTaskCheckForTimeOut>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d132      	bne.n	8007846 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077e2:	f000 fa00 	bl	8007be6 <prvIsQueueEmpty>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d026      	beq.n	800783a <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 80077f4:	f002 fa12 	bl	8009c1c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 f8c1 	bl	8008984 <xTaskPriorityInherit>
 8007802:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8007804:	f002 fa3c 	bl	8009c80 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	3324      	adds	r3, #36	@ 0x24
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	4611      	mov	r1, r2
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fe05 	bl	8008420 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007818:	f000 f993 	bl	8007b42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800781c:	f000 fc3c 	bl	8008098 <xTaskResumeAll>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	f47f af67 	bne.w	80076f6 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8007828:	4b18      	ldr	r3, [pc, #96]	@ (800788c <xQueueSemaphoreTake+0x21c>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e75d      	b.n	80076f6 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800783a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800783c:	f000 f981 	bl	8007b42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007840:	f000 fc2a 	bl	8008098 <xTaskResumeAll>
 8007844:	e757      	b.n	80076f6 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8007846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007848:	f000 f97b 	bl	8007b42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800784c:	f000 fc24 	bl	8008098 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007852:	f000 f9c8 	bl	8007be6 <prvIsQueueEmpty>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f43f af4c 	beq.w	80076f6 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00d      	beq.n	8007880 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8007864:	f002 f9da 	bl	8009c1c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800786a:	f000 f8c2 	bl	80079f2 <prvGetDisinheritPriorityAfterTimeout>
 800786e:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f976 	bl	8008b68 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800787c:	f002 fa00 	bl	8009c80 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007880:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007882:	4618      	mov	r0, r3
 8007884:	3738      	adds	r7, #56	@ 0x38
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b090      	sub	sp, #64	@ 0x40
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <xQueueReceiveFromISR+0x2e>
        __asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <xQueueReceiveFromISR+0x3c>
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <xQueueReceiveFromISR+0x40>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <xQueueReceiveFromISR+0x42>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <xQueueReceiveFromISR+0x5e>
        __asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	e7fd      	b.n	80078ea <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ee:	f002 fa7d 	bl	8009dec <vPortValidateInterruptPriority>
        __asm volatile
 80078f2:	f3ef 8211 	mrs	r2, BASEPRI
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	623a      	str	r2, [r7, #32]
 8007908:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800790a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007916:	2b00      	cmp	r3, #0
 8007918:	d03f      	beq.n	800799a <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007928:	f000 f8e5 	bl	8007af6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8007934:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800793c:	d112      	bne.n	8007964 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d026      	beq.n	8007994 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007948:	3310      	adds	r3, #16
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fdf8 	bl	8008540 <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01e      	beq.n	8007994 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01b      	beq.n	8007994 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e017      	b.n	8007994 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8007964:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007968:	2b7f      	cmp	r3, #127	@ 0x7f
 800796a:	d10b      	bne.n	8007984 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61bb      	str	r3, [r7, #24]
    }
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007988:	3301      	adds	r3, #1
 800798a:	b2db      	uxtb	r3, r3
 800798c:	b25a      	sxtb	r2, r3
 800798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8007994:	2301      	movs	r3, #1
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007998:	e001      	b.n	800799e <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f383 8811 	msr	BASEPRI, r3
    }
 80079a8:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80079aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3740      	adds	r7, #64	@ 0x40
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10b      	bne.n	80079da <uxQueueMessagesWaiting+0x26>
        __asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
    }
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80079da:	f002 f91f 	bl	8009c1c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80079e4:	f002 f94c 	bl	8009c80 <vPortExitCritical>

    return uxReturn;
 80079e8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d006      	beq.n	8007a10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f1c3 0305 	rsb	r3, r3, #5
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	e001      	b.n	8007a14 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8007a14:	68fb      	ldr	r3, [r7, #12]
    }
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10d      	bne.n	8007a5c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d14d      	bne.n	8007ae4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f80f 	bl	8008a70 <xTaskPriorityDisinherit>
 8007a52:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	609a      	str	r2, [r3, #8]
 8007a5a:	e043      	b.n	8007ae4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d119      	bne.n	8007a96 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6858      	ldr	r0, [r3, #4]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	f002 fc55 	bl	800a31c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7a:	441a      	add	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d32b      	bcc.n	8007ae4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	605a      	str	r2, [r3, #4]
 8007a94:	e026      	b.n	8007ae4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68d8      	ldr	r0, [r3, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	f002 fc3b 	bl	800a31c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	425b      	negs	r3, r3
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d207      	bcs.n	8007ad2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	425b      	negs	r3, r3
 8007acc:	441a      	add	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d105      	bne.n	8007ae4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8007aec:	697b      	ldr	r3, [r7, #20]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d018      	beq.n	8007b3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d303      	bcc.n	8007b2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68d9      	ldr	r1, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b32:	461a      	mov	r2, r3
 8007b34:	6838      	ldr	r0, [r7, #0]
 8007b36:	f002 fbf1 	bl	800a31c <memcpy>
    }
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007b4a:	f002 f867 	bl	8009c1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b54:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b56:	e011      	b.n	8007b7c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d012      	beq.n	8007b86 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3324      	adds	r3, #36	@ 0x24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fceb 	bl	8008540 <xTaskRemoveFromEventList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007b70:	f000 fe2c 	bl	80087cc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dce9      	bgt.n	8007b58 <prvUnlockQueue+0x16>
 8007b84:	e000      	b.n	8007b88 <prvUnlockQueue+0x46>
                        break;
 8007b86:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	22ff      	movs	r2, #255	@ 0xff
 8007b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007b90:	f002 f876 	bl	8009c80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007b94:	f002 f842 	bl	8009c1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b9e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ba0:	e011      	b.n	8007bc6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d012      	beq.n	8007bd0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3310      	adds	r3, #16
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fcc6 	bl	8008540 <xTaskRemoveFromEventList>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007bba:	f000 fe07 	bl	80087cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dce9      	bgt.n	8007ba2 <prvUnlockQueue+0x60>
 8007bce:	e000      	b.n	8007bd2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007bd0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	22ff      	movs	r2, #255	@ 0xff
 8007bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007bda:	f002 f851 	bl	8009c80 <vPortExitCritical>
}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007bee:	f002 f815 	bl	8009c1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e001      	b.n	8007c04 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007c04:	f002 f83c 	bl	8009c80 <vPortExitCritical>

    return xReturn;
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007c1a:	f001 ffff 	bl	8009c1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d102      	bne.n	8007c30 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	e001      	b.n	8007c34 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007c34:	f002 f824 	bl	8009c80 <vPortExitCritical>

    return xReturn;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8007c42:	b480      	push	{r7}
 8007c44:	b087      	sub	sp, #28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
    }
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d102      	bne.n	8007c7e <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e001      	b.n	8007c82 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007c82:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	e014      	b.n	8007cca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8007ce0 <vQueueAddToRegistry+0x50>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cac:	490c      	ldr	r1, [pc, #48]	@ (8007ce0 <vQueueAddToRegistry+0x50>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce0 <vQueueAddToRegistry+0x50>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8007cc2:	e006      	b.n	8007cd2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	d9e7      	bls.n	8007ca0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	200002f8 	.word	0x200002f8

08007ce4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007cf4:	f001 ff92 	bl	8009c1c <vPortEnterCritical>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cfe:	b25b      	sxtb	r3, r3
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d04:	d103      	bne.n	8007d0e <vQueueWaitForMessageRestricted+0x2a>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d14:	b25b      	sxtb	r3, r3
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d1a:	d103      	bne.n	8007d24 <vQueueWaitForMessageRestricted+0x40>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d24:	f001 ffac 	bl	8009c80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3324      	adds	r3, #36	@ 0x24
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fbd5 	bl	80084e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007d3e:	6978      	ldr	r0, [r7, #20]
 8007d40:	f7ff feff 	bl	8007b42 <prvUnlockQueue>
    }
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	@ 0x30
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f002 f885 	bl	8009e70 <pvPortMalloc>
 8007d66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d6e:	2058      	movs	r0, #88	@ 0x58
 8007d70:	f002 f87e 	bl	8009e70 <pvPortMalloc>
 8007d74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d82:	e005      	b.n	8007d90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007d84:	6978      	ldr	r0, [r7, #20]
 8007d86:	f002 f955 	bl	800a034 <vPortFree>
 8007d8a:	e001      	b.n	8007d90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d013      	beq.n	8007dbe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f80e 	bl	8007dce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007db2:	69f8      	ldr	r0, [r7, #28]
 8007db4:	f000 f8a2 	bl	8007efc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007db8:	2301      	movs	r3, #1
 8007dba:	61bb      	str	r3, [r7, #24]
 8007dbc:	e002      	b.n	8007dc4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
    }
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b088      	sub	sp, #32
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	461a      	mov	r2, r3
 8007de6:	21a5      	movs	r1, #165	@ 0xa5
 8007de8:	f002 fa64 	bl	800a2b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007df6:	3b01      	subs	r3, #1
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	617b      	str	r3, [r7, #20]
    }
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	e7fd      	b.n	8007e24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01f      	beq.n	8007e6e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e012      	b.n	8007e5a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	7819      	ldrb	r1, [r3, #0]
 8007e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	3334      	adds	r3, #52	@ 0x34
 8007e44:	460a      	mov	r2, r1
 8007e46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d006      	beq.n	8007e62 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	3301      	adds	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	d9e9      	bls.n	8007e34 <prvInitialiseNewTask+0x66>
 8007e60:	e000      	b.n	8007e64 <prvInitialiseNewTask+0x96>
            {
                break;
 8007e62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007e6c:	e003      	b.n	8007e76 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d901      	bls.n	8007e80 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e8a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	2200      	movs	r2, #0
 8007e90:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	3304      	adds	r3, #4
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ffd4 	bl	8006e44 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ffcf 	bl	8006e44 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	f1c3 0205 	rsb	r2, r3, #5
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eba:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	3350      	adds	r3, #80	@ 0x50
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f002 f9f5 	bl	800a2b4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	3354      	adds	r3, #84	@ 0x54
 8007ece:	2201      	movs	r2, #1
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f002 f9ee 	bl	800a2b4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	69b8      	ldr	r0, [r7, #24]
 8007ede:	f001 fd6d 	bl	80099bc <pxPortInitialiseStack>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007ef4:	bf00      	nop
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007f04:	f001 fe8a 	bl	8009c1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007f08:	4b2c      	ldr	r3, [pc, #176]	@ (8007fbc <prvAddNewTaskToReadyList+0xc0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fbc <prvAddNewTaskToReadyList+0xc0>)
 8007f10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007f12:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc0 <prvAddNewTaskToReadyList+0xc4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007f1a:	4a29      	ldr	r2, [pc, #164]	@ (8007fc0 <prvAddNewTaskToReadyList+0xc4>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f20:	4b26      	ldr	r3, [pc, #152]	@ (8007fbc <prvAddNewTaskToReadyList+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d110      	bne.n	8007f4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007f28:	f000 fc74 	bl	8008814 <prvInitialiseTaskLists>
 8007f2c:	e00d      	b.n	8007f4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007f2e:	4b25      	ldr	r3, [pc, #148]	@ (8007fc4 <prvAddNewTaskToReadyList+0xc8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f36:	4b22      	ldr	r3, [pc, #136]	@ (8007fc0 <prvAddNewTaskToReadyList+0xc4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d802      	bhi.n	8007f4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007f44:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc0 <prvAddNewTaskToReadyList+0xc4>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007fc8 <prvAddNewTaskToReadyList+0xcc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc8 <prvAddNewTaskToReadyList+0xcc>)
 8007f52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f54:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc8 <prvAddNewTaskToReadyList+0xcc>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	2201      	movs	r2, #1
 8007f62:	409a      	lsls	r2, r3
 8007f64:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <prvAddNewTaskToReadyList+0xd0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	4a18      	ldr	r2, [pc, #96]	@ (8007fcc <prvAddNewTaskToReadyList+0xd0>)
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a15      	ldr	r2, [pc, #84]	@ (8007fd0 <prvAddNewTaskToReadyList+0xd4>)
 8007f7c:	441a      	add	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4619      	mov	r1, r3
 8007f84:	4610      	mov	r0, r2
 8007f86:	f7fe ff6a 	bl	8006e5e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007f8a:	f001 fe79 	bl	8009c80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <prvAddNewTaskToReadyList+0xc8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f96:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc0 <prvAddNewTaskToReadyList+0xc4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d207      	bcs.n	8007fb4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <prvAddNewTaskToReadyList+0xd8>)
 8007fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000410 	.word	0x20000410
 8007fc0:	20000338 	.word	0x20000338
 8007fc4:	2000041c 	.word	0x2000041c
 8007fc8:	2000042c 	.word	0x2000042c
 8007fcc:	20000418 	.word	0x20000418
 8007fd0:	2000033c 	.word	0x2000033c
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007fde:	4b20      	ldr	r3, [pc, #128]	@ (8008060 <vTaskStartScheduler+0x88>)
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2282      	movs	r2, #130	@ 0x82
 8007fea:	491e      	ldr	r1, [pc, #120]	@ (8008064 <vTaskStartScheduler+0x8c>)
 8007fec:	481e      	ldr	r0, [pc, #120]	@ (8008068 <vTaskStartScheduler+0x90>)
 8007fee:	f7ff fead 	bl	8007d4c <xTaskCreate>
 8007ff2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d102      	bne.n	8008000 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007ffa:	f001 f941 	bl	8009280 <xTimerCreateTimerTask>
 8007ffe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d116      	bne.n	8008034 <vTaskStartScheduler+0x5c>
        __asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60bb      	str	r3, [r7, #8]
    }
 8008018:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800801a:	4b14      	ldr	r3, [pc, #80]	@ (800806c <vTaskStartScheduler+0x94>)
 800801c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008022:	4b13      	ldr	r3, [pc, #76]	@ (8008070 <vTaskStartScheduler+0x98>)
 8008024:	2201      	movs	r2, #1
 8008026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008028:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <vTaskStartScheduler+0x9c>)
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800802e:	f001 fd51 	bl	8009ad4 <xPortStartScheduler>
 8008032:	e00f      	b.n	8008054 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803a:	d10b      	bne.n	8008054 <vTaskStartScheduler+0x7c>
        __asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	607b      	str	r3, [r7, #4]
    }
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008054:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <vTaskStartScheduler+0xa0>)
 8008056:	681b      	ldr	r3, [r3, #0]
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000434 	.word	0x20000434
 8008064:	0800b538 	.word	0x0800b538
 8008068:	080087e5 	.word	0x080087e5
 800806c:	20000430 	.word	0x20000430
 8008070:	2000041c 	.word	0x2000041c
 8008074:	20000414 	.word	0x20000414
 8008078:	20000074 	.word	0x20000074

0800807c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <vTaskSuspendAll+0x18>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3301      	adds	r3, #1
 8008086:	4a03      	ldr	r2, [pc, #12]	@ (8008094 <vTaskSuspendAll+0x18>)
 8008088:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	20000438 	.word	0x20000438

08008098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80080a6:	4b42      	ldr	r3, [pc, #264]	@ (80081b0 <xTaskResumeAll+0x118>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <xTaskResumeAll+0x2e>
        __asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	603b      	str	r3, [r7, #0]
    }
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80080c6:	f001 fda9 	bl	8009c1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80080ca:	4b39      	ldr	r3, [pc, #228]	@ (80081b0 <xTaskResumeAll+0x118>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4a37      	ldr	r2, [pc, #220]	@ (80081b0 <xTaskResumeAll+0x118>)
 80080d2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d4:	4b36      	ldr	r3, [pc, #216]	@ (80081b0 <xTaskResumeAll+0x118>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d161      	bne.n	80081a0 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080dc:	4b35      	ldr	r3, [pc, #212]	@ (80081b4 <xTaskResumeAll+0x11c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d05d      	beq.n	80081a0 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080e4:	e02e      	b.n	8008144 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e6:	4b34      	ldr	r3, [pc, #208]	@ (80081b8 <xTaskResumeAll+0x120>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3318      	adds	r3, #24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe ff10 	bl	8006f18 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe ff0b 	bl	8006f18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008106:	2201      	movs	r2, #1
 8008108:	409a      	lsls	r2, r3
 800810a:	4b2c      	ldr	r3, [pc, #176]	@ (80081bc <xTaskResumeAll+0x124>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4313      	orrs	r3, r2
 8008110:	4a2a      	ldr	r2, [pc, #168]	@ (80081bc <xTaskResumeAll+0x124>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a27      	ldr	r2, [pc, #156]	@ (80081c0 <xTaskResumeAll+0x128>)
 8008122:	441a      	add	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f7fe fe97 	bl	8006e5e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008134:	4b23      	ldr	r3, [pc, #140]	@ (80081c4 <xTaskResumeAll+0x12c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813a:	429a      	cmp	r2, r3
 800813c:	d302      	bcc.n	8008144 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800813e:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <xTaskResumeAll+0x130>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008144:	4b1c      	ldr	r3, [pc, #112]	@ (80081b8 <xTaskResumeAll+0x120>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1cc      	bne.n	80080e6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008152:	f000 fbdd 	bl	8008910 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008156:	4b1d      	ldr	r3, [pc, #116]	@ (80081cc <xTaskResumeAll+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d010      	beq.n	8008184 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008162:	f000 f847 	bl	80081f4 <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800816c:	4b16      	ldr	r3, [pc, #88]	@ (80081c8 <xTaskResumeAll+0x130>)
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3b01      	subs	r3, #1
 8008176:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f1      	bne.n	8008162 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800817e:	4b13      	ldr	r3, [pc, #76]	@ (80081cc <xTaskResumeAll+0x134>)
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008184:	4b10      	ldr	r3, [pc, #64]	@ (80081c8 <xTaskResumeAll+0x130>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008190:	4b0f      	ldr	r3, [pc, #60]	@ (80081d0 <xTaskResumeAll+0x138>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80081a0:	f001 fd6e 	bl	8009c80 <vPortExitCritical>

    return xAlreadyYielded;
 80081a4:	68bb      	ldr	r3, [r7, #8]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000438 	.word	0x20000438
 80081b4:	20000410 	.word	0x20000410
 80081b8:	200003d0 	.word	0x200003d0
 80081bc:	20000418 	.word	0x20000418
 80081c0:	2000033c 	.word	0x2000033c
 80081c4:	20000338 	.word	0x20000338
 80081c8:	20000424 	.word	0x20000424
 80081cc:	20000420 	.word	0x20000420
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80081da:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <xTaskGetTickCount+0x1c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80081e0:	687b      	ldr	r3, [r7, #4]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000414 	.word	0x20000414

080081f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fe:	4b4f      	ldr	r3, [pc, #316]	@ (800833c <xTaskIncrementTick+0x148>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 808f 	bne.w	8008326 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008208:	4b4d      	ldr	r3, [pc, #308]	@ (8008340 <xTaskIncrementTick+0x14c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008210:	4a4b      	ldr	r2, [pc, #300]	@ (8008340 <xTaskIncrementTick+0x14c>)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d121      	bne.n	8008260 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800821c:	4b49      	ldr	r3, [pc, #292]	@ (8008344 <xTaskIncrementTick+0x150>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <xTaskIncrementTick+0x4a>
        __asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
    }
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <xTaskIncrementTick+0x46>
 800823e:	4b41      	ldr	r3, [pc, #260]	@ (8008344 <xTaskIncrementTick+0x150>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	4b40      	ldr	r3, [pc, #256]	@ (8008348 <xTaskIncrementTick+0x154>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a3e      	ldr	r2, [pc, #248]	@ (8008344 <xTaskIncrementTick+0x150>)
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4a3e      	ldr	r2, [pc, #248]	@ (8008348 <xTaskIncrementTick+0x154>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	4b3e      	ldr	r3, [pc, #248]	@ (800834c <xTaskIncrementTick+0x158>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a3c      	ldr	r2, [pc, #240]	@ (800834c <xTaskIncrementTick+0x158>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	f000 fb58 	bl	8008910 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008260:	4b3b      	ldr	r3, [pc, #236]	@ (8008350 <xTaskIncrementTick+0x15c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d348      	bcc.n	80082fc <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800826a:	4b36      	ldr	r3, [pc, #216]	@ (8008344 <xTaskIncrementTick+0x150>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	4b36      	ldr	r3, [pc, #216]	@ (8008350 <xTaskIncrementTick+0x15c>)
 8008276:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800827a:	601a      	str	r2, [r3, #0]
                    break;
 800827c:	e03e      	b.n	80082fc <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827e:	4b31      	ldr	r3, [pc, #196]	@ (8008344 <xTaskIncrementTick+0x150>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d203      	bcs.n	800829e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008296:	4a2e      	ldr	r2, [pc, #184]	@ (8008350 <xTaskIncrementTick+0x15c>)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800829c:	e02e      	b.n	80082fc <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fe38 	bl	8006f18 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3318      	adds	r3, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fe2f 	bl	8006f18 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	2201      	movs	r2, #1
 80082c0:	409a      	lsls	r2, r3
 80082c2:	4b24      	ldr	r3, [pc, #144]	@ (8008354 <xTaskIncrementTick+0x160>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	4a22      	ldr	r2, [pc, #136]	@ (8008354 <xTaskIncrementTick+0x160>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008358 <xTaskIncrementTick+0x164>)
 80082da:	441a      	add	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fe fdbb 	bl	8006e5e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <xTaskIncrementTick+0x168>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d3b9      	bcc.n	800826a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082fa:	e7b6      	b.n	800826a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082fc:	4b17      	ldr	r3, [pc, #92]	@ (800835c <xTaskIncrementTick+0x168>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008302:	4915      	ldr	r1, [pc, #84]	@ (8008358 <xTaskIncrementTick+0x164>)
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d901      	bls.n	8008318 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008318:	4b11      	ldr	r3, [pc, #68]	@ (8008360 <xTaskIncrementTick+0x16c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e004      	b.n	8008330 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008326:	4b0f      	ldr	r3, [pc, #60]	@ (8008364 <xTaskIncrementTick+0x170>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	4a0d      	ldr	r2, [pc, #52]	@ (8008364 <xTaskIncrementTick+0x170>)
 800832e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000438 	.word	0x20000438
 8008340:	20000414 	.word	0x20000414
 8008344:	200003c8 	.word	0x200003c8
 8008348:	200003cc 	.word	0x200003cc
 800834c:	20000428 	.word	0x20000428
 8008350:	20000430 	.word	0x20000430
 8008354:	20000418 	.word	0x20000418
 8008358:	2000033c 	.word	0x2000033c
 800835c:	20000338 	.word	0x20000338
 8008360:	20000424 	.word	0x20000424
 8008364:	20000420 	.word	0x20000420

08008368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800836e:	4b27      	ldr	r3, [pc, #156]	@ (800840c <vTaskSwitchContext+0xa4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008376:	4b26      	ldr	r3, [pc, #152]	@ (8008410 <vTaskSwitchContext+0xa8>)
 8008378:	2201      	movs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800837c:	e040      	b.n	8008400 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800837e:	4b24      	ldr	r3, [pc, #144]	@ (8008410 <vTaskSwitchContext+0xa8>)
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	4b23      	ldr	r3, [pc, #140]	@ (8008414 <vTaskSwitchContext+0xac>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	fab3 f383 	clz	r3, r3
 8008390:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f1c3 031f 	rsb	r3, r3, #31
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	491f      	ldr	r1, [pc, #124]	@ (8008418 <vTaskSwitchContext+0xb0>)
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10b      	bne.n	80083c6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	607b      	str	r3, [r7, #4]
    }
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <vTaskSwitchContext+0x5a>
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4a11      	ldr	r2, [pc, #68]	@ (8008418 <vTaskSwitchContext+0xb0>)
 80083d2:	4413      	add	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	605a      	str	r2, [r3, #4]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3308      	adds	r3, #8
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d104      	bne.n	80083f6 <vTaskSwitchContext+0x8e>
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4a07      	ldr	r2, [pc, #28]	@ (800841c <vTaskSwitchContext+0xb4>)
 80083fe:	6013      	str	r3, [r2, #0]
}
 8008400:	bf00      	nop
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	20000438 	.word	0x20000438
 8008410:	20000424 	.word	0x20000424
 8008414:	20000418 	.word	0x20000418
 8008418:	2000033c 	.word	0x2000033c
 800841c:	20000338 	.word	0x20000338

08008420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10b      	bne.n	8008448 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
    }
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008448:	4b07      	ldr	r3, [pc, #28]	@ (8008468 <vTaskPlaceOnEventList+0x48>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3318      	adds	r3, #24
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe fd28 	bl	8006ea6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008456:	2101      	movs	r1, #1
 8008458:	6838      	ldr	r0, [r7, #0]
 800845a:	f000 feab 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000338 	.word	0x20000338

0800846c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10b      	bne.n	8008496 <vTaskPlaceOnUnorderedEventList+0x2a>
        __asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	617b      	str	r3, [r7, #20]
    }
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8008496:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <vTaskPlaceOnUnorderedEventList+0x4a>
        __asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	613b      	str	r3, [r7, #16]
    }
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <vTaskPlaceOnUnorderedEventList+0x78>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80084c0:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084c2:	4b08      	ldr	r3, [pc, #32]	@ (80084e4 <vTaskPlaceOnUnorderedEventList+0x78>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3318      	adds	r3, #24
 80084c8:	4619      	mov	r1, r3
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7fe fcc7 	bl	8006e5e <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084d0:	2101      	movs	r1, #1
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fe6e 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
}
 80084d8:	bf00      	nop
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000438 	.word	0x20000438
 80084e4:	20000338 	.word	0x20000338

080084e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	617b      	str	r3, [r7, #20]
    }
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <vTaskPlaceOnEventListRestricted+0x54>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3318      	adds	r3, #24
 8008518:	4619      	mov	r1, r3
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7fe fc9f 	bl	8006e5e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8008526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800852a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	68b8      	ldr	r0, [r7, #8]
 8008530:	f000 fe40 	bl	80091b4 <prvAddCurrentTaskToDelayedList>
    }
 8008534:	bf00      	nop
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000338 	.word	0x20000338

08008540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	60fb      	str	r3, [r7, #12]
    }
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3318      	adds	r3, #24
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fcd0 	bl	8006f18 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008578:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <xTaskRemoveFromEventList+0xb0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11c      	bne.n	80085ba <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fcc7 	bl	8006f18 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	2201      	movs	r2, #1
 8008590:	409a      	lsls	r2, r3
 8008592:	4b18      	ldr	r3, [pc, #96]	@ (80085f4 <xTaskRemoveFromEventList+0xb4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4313      	orrs	r3, r2
 8008598:	4a16      	ldr	r2, [pc, #88]	@ (80085f4 <xTaskRemoveFromEventList+0xb4>)
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4a13      	ldr	r2, [pc, #76]	@ (80085f8 <xTaskRemoveFromEventList+0xb8>)
 80085aa:	441a      	add	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fc53 	bl	8006e5e <vListInsertEnd>
 80085b8:	e005      	b.n	80085c6 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	3318      	adds	r3, #24
 80085be:	4619      	mov	r1, r3
 80085c0:	480e      	ldr	r0, [pc, #56]	@ (80085fc <xTaskRemoveFromEventList+0xbc>)
 80085c2:	f7fe fc4c 	bl	8006e5e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <xTaskRemoveFromEventList+0xc0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d905      	bls.n	80085e0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <xTaskRemoveFromEventList+0xc4>)
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e001      	b.n	80085e4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80085e4:	697b      	ldr	r3, [r7, #20]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000438 	.word	0x20000438
 80085f4:	20000418 	.word	0x20000418
 80085f8:	2000033c 	.word	0x2000033c
 80085fc:	200003d0 	.word	0x200003d0
 8008600:	20000338 	.word	0x20000338
 8008604:	20000424 	.word	0x20000424

08008608 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8008612:	4b2a      	ldr	r3, [pc, #168]	@ (80086bc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <vTaskRemoveFromUnorderedEventList+0x2a>
        __asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	613b      	str	r3, [r7, #16]
    }
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	e7fd      	b.n	800862e <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10b      	bne.n	8008660 <vTaskRemoveFromUnorderedEventList+0x58>
        __asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60fb      	str	r3, [r7, #12]
    }
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <vTaskRemoveFromUnorderedEventList+0x54>
    ( void ) uxListRemove( pxEventListItem );
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fe fc59 	bl	8006f18 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	3304      	adds	r3, #4
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fc54 	bl	8006f18 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	2201      	movs	r2, #1
 8008676:	409a      	lsls	r2, r3
 8008678:	4b11      	ldr	r3, [pc, #68]	@ (80086c0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4313      	orrs	r3, r2
 800867e:	4a10      	ldr	r2, [pc, #64]	@ (80086c0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4a0d      	ldr	r2, [pc, #52]	@ (80086c4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008690:	441a      	add	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	3304      	adds	r3, #4
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7fe fbe0 	bl	8006e5e <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d902      	bls.n	80086b2 <vTaskRemoveFromUnorderedEventList+0xaa>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 80086ac:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <vTaskRemoveFromUnorderedEventList+0xc4>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
    }
}
 80086b2:	bf00      	nop
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000438 	.word	0x20000438
 80086c0:	20000418 	.word	0x20000418
 80086c4:	2000033c 	.word	0x2000033c
 80086c8:	20000338 	.word	0x20000338
 80086cc:	20000424 	.word	0x20000424

080086d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086d8:	4b06      	ldr	r3, [pc, #24]	@ (80086f4 <vTaskInternalSetTimeOutState+0x24>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80086e0:	4b05      	ldr	r3, [pc, #20]	@ (80086f8 <vTaskInternalSetTimeOutState+0x28>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	605a      	str	r2, [r3, #4]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000428 	.word	0x20000428
 80086f8:	20000414 	.word	0x20000414

080086fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	613b      	str	r3, [r7, #16]
    }
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	e7fd      	b.n	8008720 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	60fb      	str	r3, [r7, #12]
    }
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8008742:	f001 fa6b 	bl	8009c1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008746:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <xTaskCheckForTimeOut+0xc8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800875e:	d102      	bne.n	8008766 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	e026      	b.n	80087b4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	4b17      	ldr	r3, [pc, #92]	@ (80087c8 <xTaskCheckForTimeOut+0xcc>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d00a      	beq.n	8008788 <xTaskCheckForTimeOut+0x8c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	429a      	cmp	r2, r3
 800877a:	d305      	bcc.n	8008788 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800877c:	2301      	movs	r3, #1
 800877e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e015      	b.n	80087b4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	429a      	cmp	r2, r3
 8008790:	d20b      	bcs.n	80087aa <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1ad2      	subs	r2, r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ff96 	bl	80086d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	e004      	b.n	80087b4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80087b4:	f001 fa64 	bl	8009c80 <vPortExitCritical>

    return xReturn;
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000414 	.word	0x20000414
 80087c8:	20000428 	.word	0x20000428

080087cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80087d0:	4b03      	ldr	r3, [pc, #12]	@ (80087e0 <vTaskMissedYield+0x14>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
}
 80087d6:	bf00      	nop
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20000424 	.word	0x20000424

080087e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80087ec:	f000 f852 	bl	8008894 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087f0:	4b06      	ldr	r3, [pc, #24]	@ (800880c <prvIdleTask+0x28>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d9f9      	bls.n	80087ec <prvIdleTask+0x8>
                {
                    taskYIELD();
 80087f8:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <prvIdleTask+0x2c>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008808:	e7f0      	b.n	80087ec <prvIdleTask+0x8>
 800880a:	bf00      	nop
 800880c:	2000033c 	.word	0x2000033c
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	e00c      	b.n	800883a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4a12      	ldr	r2, [pc, #72]	@ (8008874 <prvInitialiseTaskLists+0x60>)
 800882c:	4413      	add	r3, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fae8 	bl	8006e04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b04      	cmp	r3, #4
 800883e:	d9ef      	bls.n	8008820 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008840:	480d      	ldr	r0, [pc, #52]	@ (8008878 <prvInitialiseTaskLists+0x64>)
 8008842:	f7fe fadf 	bl	8006e04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008846:	480d      	ldr	r0, [pc, #52]	@ (800887c <prvInitialiseTaskLists+0x68>)
 8008848:	f7fe fadc 	bl	8006e04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800884c:	480c      	ldr	r0, [pc, #48]	@ (8008880 <prvInitialiseTaskLists+0x6c>)
 800884e:	f7fe fad9 	bl	8006e04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008852:	480c      	ldr	r0, [pc, #48]	@ (8008884 <prvInitialiseTaskLists+0x70>)
 8008854:	f7fe fad6 	bl	8006e04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8008858:	480b      	ldr	r0, [pc, #44]	@ (8008888 <prvInitialiseTaskLists+0x74>)
 800885a:	f7fe fad3 	bl	8006e04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800885e:	4b0b      	ldr	r3, [pc, #44]	@ (800888c <prvInitialiseTaskLists+0x78>)
 8008860:	4a05      	ldr	r2, [pc, #20]	@ (8008878 <prvInitialiseTaskLists+0x64>)
 8008862:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008864:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <prvInitialiseTaskLists+0x7c>)
 8008866:	4a05      	ldr	r2, [pc, #20]	@ (800887c <prvInitialiseTaskLists+0x68>)
 8008868:	601a      	str	r2, [r3, #0]
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	2000033c 	.word	0x2000033c
 8008878:	200003a0 	.word	0x200003a0
 800887c:	200003b4 	.word	0x200003b4
 8008880:	200003d0 	.word	0x200003d0
 8008884:	200003e4 	.word	0x200003e4
 8008888:	200003fc 	.word	0x200003fc
 800888c:	200003c8 	.word	0x200003c8
 8008890:	200003cc 	.word	0x200003cc

08008894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800889a:	e019      	b.n	80088d0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800889c:	f001 f9be 	bl	8009c1c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a0:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <prvCheckTasksWaitingTermination+0x50>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fb33 	bl	8006f18 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80088b2:	4b0d      	ldr	r3, [pc, #52]	@ (80088e8 <prvCheckTasksWaitingTermination+0x54>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a0b      	ldr	r2, [pc, #44]	@ (80088e8 <prvCheckTasksWaitingTermination+0x54>)
 80088ba:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	4a0a      	ldr	r2, [pc, #40]	@ (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088c4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80088c6:	f001 f9db 	bl	8009c80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f810 	bl	80088f0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d0:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e1      	bne.n	800889c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200003e4 	.word	0x200003e4
 80088e8:	20000410 	.word	0x20000410
 80088ec:	200003f8 	.word	0x200003f8

080088f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fb99 	bl	800a034 <vPortFree>
                vPortFree( pxTCB );
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fb96 	bl	800a034 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008914:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <prvResetNextTaskUnblockTime+0x30>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d104      	bne.n	8008928 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800891e:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <prvResetNextTaskUnblockTime+0x34>)
 8008920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008924:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008926:	e005      	b.n	8008934 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008928:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <prvResetNextTaskUnblockTime+0x30>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a04      	ldr	r2, [pc, #16]	@ (8008944 <prvResetNextTaskUnblockTime+0x34>)
 8008932:	6013      	str	r3, [r2, #0]
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	200003c8 	.word	0x200003c8
 8008944:	20000430 	.word	0x20000430

08008948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800894e:	4b0b      	ldr	r3, [pc, #44]	@ (800897c <xTaskGetSchedulerState+0x34>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008956:	2301      	movs	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	e008      	b.n	800896e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800895c:	4b08      	ldr	r3, [pc, #32]	@ (8008980 <xTaskGetSchedulerState+0x38>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008964:	2302      	movs	r3, #2
 8008966:	607b      	str	r3, [r7, #4]
 8008968:	e001      	b.n	800896e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800896e:	687b      	ldr	r3, [r7, #4]
    }
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	2000041c 	.word	0x2000041c
 8008980:	20000438 	.word	0x20000438

08008984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d05e      	beq.n	8008a58 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	4b31      	ldr	r3, [pc, #196]	@ (8008a64 <xTaskPriorityInherit+0xe0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d24e      	bcs.n	8008a46 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db06      	blt.n	80089be <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b0:	4b2c      	ldr	r3, [pc, #176]	@ (8008a64 <xTaskPriorityInherit+0xe0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	f1c3 0205 	rsb	r2, r3, #5
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6959      	ldr	r1, [r3, #20]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4a26      	ldr	r2, [pc, #152]	@ (8008a68 <xTaskPriorityInherit+0xe4>)
 80089d0:	4413      	add	r3, r2
 80089d2:	4299      	cmp	r1, r3
 80089d4:	d12f      	bne.n	8008a36 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3304      	adds	r3, #4
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fa9c 	bl	8006f18 <uxListRemove>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ea:	2201      	movs	r2, #1
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	43da      	mvns	r2, r3
 80089f2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a6c <xTaskPriorityInherit+0xe8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4013      	ands	r3, r2
 80089f8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a6c <xTaskPriorityInherit+0xe8>)
 80089fa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089fc:	4b19      	ldr	r3, [pc, #100]	@ (8008a64 <xTaskPriorityInherit+0xe0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	409a      	lsls	r2, r3
 8008a0e:	4b17      	ldr	r3, [pc, #92]	@ (8008a6c <xTaskPriorityInherit+0xe8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <xTaskPriorityInherit+0xe8>)
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <xTaskPriorityInherit+0xe4>)
 8008a26:	441a      	add	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fe fa15 	bl	8006e5e <vListInsertEnd>
 8008a34:	e004      	b.n	8008a40 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a36:	4b0b      	ldr	r3, [pc, #44]	@ (8008a64 <xTaskPriorityInherit+0xe0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e008      	b.n	8008a58 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a4a:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <xTaskPriorityInherit+0xe0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d201      	bcs.n	8008a58 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008a58:	68fb      	ldr	r3, [r7, #12]
    }
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000338 	.word	0x20000338
 8008a68:	2000033c 	.word	0x2000033c
 8008a6c:	20000418 	.word	0x20000418

08008a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d065      	beq.n	8008b52 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008a86:	4b35      	ldr	r3, [pc, #212]	@ (8008b5c <xTaskPriorityDisinherit+0xec>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d00b      	beq.n	8008aa8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
    }
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60bb      	str	r3, [r7, #8]
    }
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008acc:	1e5a      	subs	r2, r3, #1
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d039      	beq.n	8008b52 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d135      	bne.n	8008b52 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fa14 	bl	8006f18 <uxListRemove>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	2201      	movs	r2, #1
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	43da      	mvns	r2, r3
 8008b02:	4b17      	ldr	r3, [pc, #92]	@ (8008b60 <xTaskPriorityDisinherit+0xf0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4013      	ands	r3, r2
 8008b08:	4a15      	ldr	r2, [pc, #84]	@ (8008b60 <xTaskPriorityDisinherit+0xf0>)
 8008b0a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	f1c3 0205 	rsb	r2, r3, #5
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	2201      	movs	r2, #1
 8008b26:	409a      	lsls	r2, r3
 8008b28:	4b0d      	ldr	r3, [pc, #52]	@ (8008b60 <xTaskPriorityDisinherit+0xf0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b60 <xTaskPriorityDisinherit+0xf0>)
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4a09      	ldr	r2, [pc, #36]	@ (8008b64 <xTaskPriorityDisinherit+0xf4>)
 8008b40:	441a      	add	r2, r3
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f7fe f988 	bl	8006e5e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008b52:	697b      	ldr	r3, [r7, #20]
    }
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000338 	.word	0x20000338
 8008b60:	20000418 	.word	0x20000418
 8008b64:	2000033c 	.word	0x2000033c

08008b68 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b76:	2301      	movs	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d079      	beq.n	8008c74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	60fb      	str	r3, [r7, #12]
    }
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d902      	bls.n	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	e002      	b.n	8008bb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb4:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d059      	beq.n	8008c74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d154      	bne.n	8008c74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8008bca:	4b2c      	ldr	r3, [pc, #176]	@ (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d10b      	bne.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60bb      	str	r3, [r7, #8]
    }
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	db04      	blt.n	8008c0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f1c3 0205 	rsb	r2, r3, #5
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	6959      	ldr	r1, [r3, #20]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4a19      	ldr	r2, [pc, #100]	@ (8008c80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c1a:	4413      	add	r3, r2
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	d129      	bne.n	8008c74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe f977 	bl	8006f18 <uxListRemove>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	2201      	movs	r2, #1
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	43da      	mvns	r2, r3
 8008c3c:	4b11      	ldr	r3, [pc, #68]	@ (8008c84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4013      	ands	r3, r2
 8008c42:	4a10      	ldr	r2, [pc, #64]	@ (8008c84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c44:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	409a      	lsls	r2, r3
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	4a0b      	ldr	r2, [pc, #44]	@ (8008c84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4a06      	ldr	r2, [pc, #24]	@ (8008c80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c66:	441a      	add	r2, r3
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fe f8f5 	bl	8006e5e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008c74:	bf00      	nop
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000338 	.word	0x20000338
 8008c80:	2000033c 	.word	0x2000033c
 8008c84:	20000418 	.word	0x20000418

08008c88 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008c8e:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <uxTaskResetEventItemValue+0x2c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c96:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <uxTaskResetEventItemValue+0x2c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9c:	4b05      	ldr	r3, [pc, #20]	@ (8008cb4 <uxTaskResetEventItemValue+0x2c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f1c2 0205 	rsb	r2, r2, #5
 8008ca4:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8008ca6:	687b      	ldr	r3, [r7, #4]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20000338 	.word	0x20000338

08008cb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8008cc4:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cca:	3201      	adds	r2, #1
 8008ccc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8008cce:	4b03      	ldr	r3, [pc, #12]	@ (8008cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
    }
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000338 	.word	0x20000338

08008ce0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	613b      	str	r3, [r7, #16]
    }
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8008d0c:	f000 ff86 	bl	8009c1c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008d10:	4b31      	ldr	r3, [pc, #196]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	3354      	adds	r3, #84	@ 0x54
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d022      	beq.n	8008d68 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8008d22:	4b2d      	ldr	r3, [pc, #180]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	3214      	adds	r2, #20
 8008d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	43d2      	mvns	r2, r2
 8008d32:	4011      	ands	r1, r2
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	3214      	adds	r2, #20
 8008d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008d3c:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	3354      	adds	r3, #84	@ 0x54
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d50:	2101      	movs	r1, #1
 8008d52:	6a38      	ldr	r0, [r7, #32]
 8008d54:	f000 fa2e 	bl	80091b4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008d58:	4b20      	ldr	r3, [pc, #128]	@ (8008ddc <xTaskGenericNotifyWait+0xfc>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008d68:	f000 ff8a 	bl	8009c80 <vPortExitCritical>

        taskENTER_CRITICAL();
 8008d6c:	f000 ff56 	bl	8009c1c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8008d76:	4b18      	ldr	r3, [pc, #96]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	3214      	adds	r2, #20
 8008d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008d86:	4b14      	ldr	r3, [pc, #80]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3354      	adds	r3, #84	@ 0x54
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d002      	beq.n	8008d9e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e00e      	b.n	8008dbc <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	3214      	adds	r2, #20
 8008da6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	43d2      	mvns	r2, r2
 8008dae:	4011      	ands	r1, r2
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	3214      	adds	r2, #20
 8008db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	@ (8008dd8 <xTaskGenericNotifyWait+0xf8>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3354      	adds	r3, #84	@ 0x54
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008dca:	f000 ff59 	bl	8009c80 <vPortExitCritical>

        return xReturn;
 8008dce:	697b      	ldr	r3, [r7, #20]
    }
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20000338 	.word	0x20000338
 8008ddc:	e000ed04 	.word	0xe000ed04

08008de0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	@ 0x30
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8008dee:	2301      	movs	r3, #1
 8008df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <xTaskGenericNotify+0x30>
        __asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	623b      	str	r3, [r7, #32]
    }
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <xTaskGenericNotify+0x4e>
        __asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	61fb      	str	r3, [r7, #28]
    }
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8008e32:	f000 fef3 	bl	8009c1c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	3214      	adds	r2, #20
 8008e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4413      	add	r3, r2
 8008e50:	3354      	adds	r3, #84	@ 0x54
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3354      	adds	r3, #84	@ 0x54
 8008e60:	2202      	movs	r2, #2
 8008e62:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d83b      	bhi.n	8008ee2 <xTaskGenericNotify+0x102>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <xTaskGenericNotify+0x90>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008f03 	.word	0x08008f03
 8008e74:	08008e85 	.word	0x08008e85
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008eb9 	.word	0x08008eb9
 8008e80:	08008ec7 	.word	0x08008ec7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	3214      	adds	r2, #20
 8008e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	ea42 0103 	orr.w	r1, r2, r3
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	3214      	adds	r2, #20
 8008e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008e9e:	e033      	b.n	8008f08 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	3214      	adds	r2, #20
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	1c59      	adds	r1, r3, #1
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	3214      	adds	r2, #20
 8008eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008eb6:	e027      	b.n	8008f08 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	3214      	adds	r2, #20
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008ec4:	e020      	b.n	8008f08 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d006      	beq.n	8008edc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	3214      	adds	r2, #20
 8008ed4:	6879      	ldr	r1, [r7, #4]
 8008ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008eda:	e015      	b.n	8008f08 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8008ee0:	e012      	b.n	8008f08 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8008f94 <xTaskGenericNotify+0x1b4>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00d      	beq.n	8008f06 <xTaskGenericNotify+0x126>
        __asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	61bb      	str	r3, [r7, #24]
    }
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	e7fd      	b.n	8008efe <xTaskGenericNotify+0x11e>
                    break;
 8008f02:	bf00      	nop
 8008f04:	e000      	b.n	8008f08 <xTaskGenericNotify+0x128>

                    break;
 8008f06:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d13a      	bne.n	8008f86 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd ffff 	bl	8006f18 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1e:	2201      	movs	r2, #1
 8008f20:	409a      	lsls	r2, r3
 8008f22:	4b1d      	ldr	r3, [pc, #116]	@ (8008f98 <xTaskGenericNotify+0x1b8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	4a1b      	ldr	r2, [pc, #108]	@ (8008f98 <xTaskGenericNotify+0x1b8>)
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <xTaskGenericNotify+0x1bc>)
 8008f3a:	441a      	add	r2, r3
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f7fd ff8b 	bl	8006e5e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <xTaskGenericNotify+0x188>
        __asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	617b      	str	r3, [r7, #20]
    }
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <xTaskGenericNotify+0x1c0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d907      	bls.n	8008f86 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <xTaskGenericNotify+0x1c4>)
 8008f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008f86:	f000 fe7b 	bl	8009c80 <vPortExitCritical>

        return xReturn;
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3730      	adds	r7, #48	@ 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000414 	.word	0x20000414
 8008f98:	20000418 	.word	0x20000418
 8008f9c:	2000033c 	.word	0x2000033c
 8008fa0:	20000338 	.word	0x20000338
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b090      	sub	sp, #64	@ 0x40
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ff6:	f000 fef9 	bl	8009dec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8008ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	627a      	str	r2, [r7, #36]	@ 0x24
 8009014:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800901a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	3214      	adds	r2, #20
 8009026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800902a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800902e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	3354      	adds	r3, #84	@ 0x54
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800903c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4413      	add	r3, r2
 8009042:	3354      	adds	r3, #84	@ 0x54
 8009044:	2202      	movs	r2, #2
 8009046:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	2b04      	cmp	r3, #4
 800904c:	d83b      	bhi.n	80090c6 <xTaskGenericNotifyFromISR+0x11e>
 800904e:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <xTaskGenericNotifyFromISR+0xac>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	080090e7 	.word	0x080090e7
 8009058:	08009069 	.word	0x08009069
 800905c:	08009085 	.word	0x08009085
 8009060:	0800909d 	.word	0x0800909d
 8009064:	080090ab 	.word	0x080090ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	3214      	adds	r2, #20
 800906e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	ea42 0103 	orr.w	r1, r2, r3
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	3214      	adds	r2, #20
 800907e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009082:	e033      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	3214      	adds	r2, #20
 800908a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	3214      	adds	r2, #20
 8009096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800909a:	e027      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	3214      	adds	r2, #20
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80090a8:	e020      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80090aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d006      	beq.n	80090c0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80090b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	3214      	adds	r2, #20
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80090be:	e015      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80090c4:	e012      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80090c6:	4b34      	ldr	r3, [pc, #208]	@ (8009198 <xTaskGenericNotifyFromISR+0x1f0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00d      	beq.n	80090ea <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61fb      	str	r3, [r7, #28]
    }
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <xTaskGenericNotifyFromISR+0x144>
                    break;
 80090ea:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80090ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d146      	bne.n	8009182 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80090f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	61bb      	str	r3, [r7, #24]
    }
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	e7fd      	b.n	8009110 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009114:	4b21      	ldr	r3, [pc, #132]	@ (800919c <xTaskGenericNotifyFromISR+0x1f4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11c      	bne.n	8009156 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	3304      	adds	r3, #4
 8009120:	4618      	mov	r0, r3
 8009122:	f7fd fef9 	bl	8006f18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912a:	2201      	movs	r2, #1
 800912c:	409a      	lsls	r2, r3
 800912e:	4b1c      	ldr	r3, [pc, #112]	@ (80091a0 <xTaskGenericNotifyFromISR+0x1f8>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4313      	orrs	r3, r2
 8009134:	4a1a      	ldr	r2, [pc, #104]	@ (80091a0 <xTaskGenericNotifyFromISR+0x1f8>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4a17      	ldr	r2, [pc, #92]	@ (80091a4 <xTaskGenericNotifyFromISR+0x1fc>)
 8009146:	441a      	add	r2, r3
 8009148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fd fe85 	bl	8006e5e <vListInsertEnd>
 8009154:	e005      	b.n	8009162 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	3318      	adds	r3, #24
 800915a:	4619      	mov	r1, r3
 800915c:	4812      	ldr	r0, [pc, #72]	@ (80091a8 <xTaskGenericNotifyFromISR+0x200>)
 800915e:	f7fd fe7e 	bl	8006e5e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009166:	4b11      	ldr	r3, [pc, #68]	@ (80091ac <xTaskGenericNotifyFromISR+0x204>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	429a      	cmp	r2, r3
 800916e:	d908      	bls.n	8009182 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8009170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8009176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009178:	2201      	movs	r2, #1
 800917a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <xTaskGenericNotifyFromISR+0x208>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009184:	617b      	str	r3, [r7, #20]
        __asm volatile
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f383 8811 	msr	BASEPRI, r3
    }
 800918c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800918e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8009190:	4618      	mov	r0, r3
 8009192:	3740      	adds	r7, #64	@ 0x40
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000414 	.word	0x20000414
 800919c:	20000438 	.word	0x20000438
 80091a0:	20000418 	.word	0x20000418
 80091a4:	2000033c 	.word	0x2000033c
 80091a8:	200003d0 	.word	0x200003d0
 80091ac:	20000338 	.word	0x20000338
 80091b0:	20000424 	.word	0x20000424

080091b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80091be:	4b29      	ldr	r3, [pc, #164]	@ (8009264 <prvAddCurrentTaskToDelayedList+0xb0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c4:	4b28      	ldr	r3, [pc, #160]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fd fea4 	bl	8006f18 <uxListRemove>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091d6:	4b24      	ldr	r3, [pc, #144]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091dc:	2201      	movs	r2, #1
 80091de:	fa02 f303 	lsl.w	r3, r2, r3
 80091e2:	43da      	mvns	r2, r3
 80091e4:	4b21      	ldr	r3, [pc, #132]	@ (800926c <prvAddCurrentTaskToDelayedList+0xb8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4013      	ands	r3, r2
 80091ea:	4a20      	ldr	r2, [pc, #128]	@ (800926c <prvAddCurrentTaskToDelayedList+0xb8>)
 80091ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091f4:	d10a      	bne.n	800920c <prvAddCurrentTaskToDelayedList+0x58>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	481a      	ldr	r0, [pc, #104]	@ (8009270 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009206:	f7fd fe2a 	bl	8006e5e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800920a:	e026      	b.n	800925a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009214:	4b14      	ldr	r3, [pc, #80]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	429a      	cmp	r2, r3
 8009222:	d209      	bcs.n	8009238 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009224:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3304      	adds	r3, #4
 800922e:	4619      	mov	r1, r3
 8009230:	4610      	mov	r0, r2
 8009232:	f7fd fe38 	bl	8006ea6 <vListInsert>
}
 8009236:	e010      	b.n	800925a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	4b0a      	ldr	r3, [pc, #40]	@ (8009268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fd fe2e 	bl	8006ea6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800924a:	4b0c      	ldr	r3, [pc, #48]	@ (800927c <prvAddCurrentTaskToDelayedList+0xc8>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	429a      	cmp	r2, r3
 8009252:	d202      	bcs.n	800925a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8009254:	4a09      	ldr	r2, [pc, #36]	@ (800927c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6013      	str	r3, [r2, #0]
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000414 	.word	0x20000414
 8009268:	20000338 	.word	0x20000338
 800926c:	20000418 	.word	0x20000418
 8009270:	200003fc 	.word	0x200003fc
 8009274:	200003cc 	.word	0x200003cc
 8009278:	200003c8 	.word	0x200003c8
 800927c:	20000430 	.word	0x20000430

08009280 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800928a:	f000 fb3f 	bl	800990c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800928e:	4b12      	ldr	r3, [pc, #72]	@ (80092d8 <xTimerCreateTimerTask+0x58>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8009296:	4b11      	ldr	r3, [pc, #68]	@ (80092dc <xTimerCreateTimerTask+0x5c>)
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	2302      	movs	r3, #2
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80092a4:	490e      	ldr	r1, [pc, #56]	@ (80092e0 <xTimerCreateTimerTask+0x60>)
 80092a6:	480f      	ldr	r0, [pc, #60]	@ (80092e4 <xTimerCreateTimerTask+0x64>)
 80092a8:	f7fe fd50 	bl	8007d4c <xTaskCreate>
 80092ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	603b      	str	r3, [r7, #0]
    }
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80092cc:	687b      	ldr	r3, [r7, #4]
    }
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2000046c 	.word	0x2000046c
 80092dc:	20000470 	.word	0x20000470
 80092e0:	0800b540 	.word	0x0800b540
 80092e4:	080094dd 	.word	0x080094dd

080092e8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80092f6:	202c      	movs	r0, #44	@ 0x2c
 80092f8:	f000 fdba 	bl	8009e70 <pvPortMalloc>
 80092fc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00d      	beq.n	8009320 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f805 	bl	800932a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8009320:	697b      	ldr	r3, [r7, #20]
        }
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800932a:	b580      	push	{r7, lr}
 800932c:	b086      	sub	sp, #24
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10b      	bne.n	8009356 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	617b      	str	r3, [r7, #20]
    }
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	e7fd      	b.n	8009352 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01e      	beq.n	800939a <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800935c:	f000 fad6 	bl	800990c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009374:	6a3a      	ldr	r2, [r7, #32]
 8009376:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7fd fd61 	bl	8006e44 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800938e:	f043 0304 	orr.w	r3, r3, #4
 8009392:	b2da      	uxtb	r2, r3
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800939a:	bf00      	nop
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	@ 0x28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10b      	bne.n	80093d4 <xTimerGenericCommand+0x30>
        __asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	623b      	str	r3, [r7, #32]
    }
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80093d4:	4b19      	ldr	r3, [pc, #100]	@ (800943c <xTimerGenericCommand+0x98>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d02a      	beq.n	8009432 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	dc18      	bgt.n	8009420 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093ee:	f7ff faab 	bl	8008948 <xTaskGetSchedulerState>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d109      	bne.n	800940c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093f8:	4b10      	ldr	r3, [pc, #64]	@ (800943c <xTimerGenericCommand+0x98>)
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	f107 0114 	add.w	r1, r7, #20
 8009400:	2300      	movs	r3, #0
 8009402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009404:	f7fd fea2 	bl	800714c <xQueueGenericSend>
 8009408:	6278      	str	r0, [r7, #36]	@ 0x24
 800940a:	e012      	b.n	8009432 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800940c:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <xTimerGenericCommand+0x98>)
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	f107 0114 	add.w	r1, r7, #20
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	f7fd fe98 	bl	800714c <xQueueGenericSend>
 800941c:	6278      	str	r0, [r7, #36]	@ 0x24
 800941e:	e008      	b.n	8009432 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009420:	4b06      	ldr	r3, [pc, #24]	@ (800943c <xTimerGenericCommand+0x98>)
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	f107 0114 	add.w	r1, r7, #20
 8009428:	2300      	movs	r3, #0
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	f7fd ff90 	bl	8007350 <xQueueGenericSendFromISR>
 8009430:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8009434:	4618      	mov	r0, r3
 8009436:	3728      	adds	r7, #40	@ 0x28
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	2000046c 	.word	0x2000046c

08009440 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b23      	ldr	r3, [pc, #140]	@ (80094d8 <prvProcessExpiredTimer+0x98>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7fd fd5d 	bl	8006f18 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d023      	beq.n	80094b4 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	18d1      	adds	r1, r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	6978      	ldr	r0, [r7, #20]
 800947a:	f000 f8d5 	bl	8009628 <prvInsertTimerInActiveList>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d020      	beq.n	80094c6 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009484:	2300      	movs	r3, #0
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7ff ff88 	bl	80093a4 <xTimerGenericCommand>
 8009494:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d114      	bne.n	80094c6 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60fb      	str	r3, [r7, #12]
    }
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
 80094b2:	e7fd      	b.n	80094b0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ba:	f023 0301 	bic.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	4798      	blx	r3
    }
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000464 	.word	0x20000464

080094dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f859 	bl	80095a0 <prvGetNextExpireTime>
 80094ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4619      	mov	r1, r3
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f805 	bl	8009504 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80094fa:	f000 f8d7 	bl	80096ac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094fe:	bf00      	nop
 8009500:	e7f0      	b.n	80094e4 <prvTimerTask+0x8>
	...

08009504 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800950e:	f7fe fdb5 	bl	800807c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f866 	bl	80095e8 <prvSampleTimeNow>
 800951c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d130      	bne.n	8009586 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <prvProcessTimerOrBlockTask+0x3c>
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	429a      	cmp	r2, r3
 8009530:	d806      	bhi.n	8009540 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009532:	f7fe fdb1 	bl	8008098 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff ff81 	bl	8009440 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800953e:	e024      	b.n	800958a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d008      	beq.n	8009558 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009546:	4b13      	ldr	r3, [pc, #76]	@ (8009594 <prvProcessTimerOrBlockTask+0x90>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <prvProcessTimerOrBlockTask+0x50>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <prvProcessTimerOrBlockTask+0x52>
 8009554:	2300      	movs	r3, #0
 8009556:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009558:	4b0f      	ldr	r3, [pc, #60]	@ (8009598 <prvProcessTimerOrBlockTask+0x94>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	4619      	mov	r1, r3
 8009566:	f7fe fbbd 	bl	8007ce4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800956a:	f7fe fd95 	bl	8008098 <xTaskResumeAll>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8009574:	4b09      	ldr	r3, [pc, #36]	@ (800959c <prvProcessTimerOrBlockTask+0x98>)
 8009576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	f3bf 8f6f 	isb	sy
    }
 8009584:	e001      	b.n	800958a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009586:	f7fe fd87 	bl	8008098 <xTaskResumeAll>
    }
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	20000468 	.word	0x20000468
 8009598:	2000046c 	.word	0x2000046c
 800959c:	e000ed04 	.word	0xe000ed04

080095a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095a8:	4b0e      	ldr	r3, [pc, #56]	@ (80095e4 <prvGetNextExpireTime+0x44>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <prvGetNextExpireTime+0x16>
 80095b2:	2201      	movs	r2, #1
 80095b4:	e000      	b.n	80095b8 <prvGetNextExpireTime+0x18>
 80095b6:	2200      	movs	r2, #0
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c4:	4b07      	ldr	r3, [pc, #28]	@ (80095e4 <prvGetNextExpireTime+0x44>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	e001      	b.n	80095d4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80095d4:	68fb      	ldr	r3, [r7, #12]
    }
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000464 	.word	0x20000464

080095e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80095f0:	f7fe fdf0 	bl	80081d4 <xTaskGetTickCount>
 80095f4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80095f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <prvSampleTimeNow+0x3c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d205      	bcs.n	800960c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009600:	f000 f91e 	bl	8009840 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e002      	b.n	8009612 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009612:	4a04      	ldr	r2, [pc, #16]	@ (8009624 <prvSampleTimeNow+0x3c>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009618:	68fb      	ldr	r3, [r7, #12]
    }
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000474 	.word	0x20000474

08009628 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	429a      	cmp	r2, r3
 800964c:	d812      	bhi.n	8009674 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	1ad2      	subs	r2, r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	429a      	cmp	r2, r3
 800965a:	d302      	bcc.n	8009662 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e01b      	b.n	800969a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009662:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <prvInsertTimerInActiveList+0x7c>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3304      	adds	r3, #4
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fd fc1a 	bl	8006ea6 <vListInsert>
 8009672:	e012      	b.n	800969a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d206      	bcs.n	800968a <prvInsertTimerInActiveList+0x62>
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d302      	bcc.n	800968a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009684:	2301      	movs	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e007      	b.n	800969a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800968a:	4b07      	ldr	r3, [pc, #28]	@ (80096a8 <prvInsertTimerInActiveList+0x80>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fd fc06 	bl	8006ea6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800969a:	697b      	ldr	r3, [r7, #20]
    }
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000468 	.word	0x20000468
 80096a8:	20000464 	.word	0x20000464

080096ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08c      	sub	sp, #48	@ 0x30
 80096b0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096b2:	e0b2      	b.n	800981a <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f2c0 80af 	blt.w	800981a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	3304      	adds	r3, #4
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fd fc23 	bl	8006f18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d2:	1d3b      	adds	r3, r7, #4
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff ff87 	bl	80095e8 <prvSampleTimeNow>
 80096da:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b09      	cmp	r3, #9
 80096e0:	f200 8098 	bhi.w	8009814 <prvProcessReceivedCommands+0x168>
 80096e4:	a201      	add	r2, pc, #4	@ (adr r2, 80096ec <prvProcessReceivedCommands+0x40>)
 80096e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ea:	bf00      	nop
 80096ec:	08009715 	.word	0x08009715
 80096f0:	08009715 	.word	0x08009715
 80096f4:	08009715 	.word	0x08009715
 80096f8:	0800978b 	.word	0x0800978b
 80096fc:	0800979f 	.word	0x0800979f
 8009700:	080097eb 	.word	0x080097eb
 8009704:	08009715 	.word	0x08009715
 8009708:	08009715 	.word	0x08009715
 800970c:	0800978b 	.word	0x0800978b
 8009710:	0800979f 	.word	0x0800979f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800971a:	f043 0301 	orr.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	18d1      	adds	r1, r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a3a      	ldr	r2, [r7, #32]
 8009732:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009734:	f7ff ff78 	bl	8009628 <prvInsertTimerInActiveList>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d06c      	beq.n	8009818 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009744:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d061      	beq.n	8009818 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	441a      	add	r2, r3
 800975c:	2300      	movs	r3, #0
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	2100      	movs	r1, #0
 8009764:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009766:	f7ff fe1d 	bl	80093a4 <xTimerGenericCommand>
 800976a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d152      	bne.n	8009818 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	61bb      	str	r3, [r7, #24]
    }
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	e7fd      	b.n	8009786 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	b2da      	uxtb	r2, r3
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800979c:	e03d      	b.n	800981a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097a4:	f043 0301 	orr.w	r3, r3, #1
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10b      	bne.n	80097d6 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	617b      	str	r3, [r7, #20]
    }
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	e7fd      	b.n	80097d2 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	18d1      	adds	r1, r2, r3
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	6a3a      	ldr	r2, [r7, #32]
 80097e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097e4:	f7ff ff20 	bl	8009628 <prvInsertTimerInActiveList>
                        break;
 80097e8:	e017      	b.n	800981a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80097f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097fa:	f000 fc1b 	bl	800a034 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80097fe:	e00c      	b.n	800981a <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009806:	f023 0301 	bic.w	r3, r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8009812:	e002      	b.n	800981a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8009814:	bf00      	nop
 8009816:	e000      	b.n	800981a <prvProcessReceivedCommands+0x16e>
                        break;
 8009818:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800981a:	4b08      	ldr	r3, [pc, #32]	@ (800983c <prvProcessReceivedCommands+0x190>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f107 0108 	add.w	r1, r7, #8
 8009822:	2200      	movs	r2, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd fe41 	bl	80074ac <xQueueReceive>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	f47f af41 	bne.w	80096b4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	3728      	adds	r7, #40	@ 0x28
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	2000046c 	.word	0x2000046c

08009840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009846:	e049      	b.n	80098dc <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009848:	4b2e      	ldr	r3, [pc, #184]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009852:	4b2c      	ldr	r3, [pc, #176]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3304      	adds	r3, #4
 8009860:	4618      	mov	r0, r3
 8009862:	f7fd fb59 	bl	8006f18 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d02f      	beq.n	80098dc <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4413      	add	r3, r2
 8009884:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	429a      	cmp	r2, r3
 800988c:	d90e      	bls.n	80098ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800989a:	4b1a      	ldr	r3, [pc, #104]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fd fafe 	bl	8006ea6 <vListInsert>
 80098aa:	e017      	b.n	80098dc <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098ac:	2300      	movs	r3, #0
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	2100      	movs	r1, #0
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff fd74 	bl	80093a4 <xTimerGenericCommand>
 80098bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10b      	bne.n	80098dc <prvSwitchTimerLists+0x9c>
        __asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	603b      	str	r3, [r7, #0]
    }
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098dc:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1b0      	bne.n	8009848 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80098e6:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <prvSwitchTimerLists+0xc8>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a04      	ldr	r2, [pc, #16]	@ (8009904 <prvSwitchTimerLists+0xc4>)
 80098f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80098f4:	4a04      	ldr	r2, [pc, #16]	@ (8009908 <prvSwitchTimerLists+0xc8>)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	6013      	str	r3, [r2, #0]
    }
 80098fa:	bf00      	nop
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000464 	.word	0x20000464
 8009908:	20000468 	.word	0x20000468

0800990c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8009910:	f000 f984 	bl	8009c1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8009914:	4b12      	ldr	r3, [pc, #72]	@ (8009960 <prvCheckForValidListAndQueue+0x54>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11d      	bne.n	8009958 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800991c:	4811      	ldr	r0, [pc, #68]	@ (8009964 <prvCheckForValidListAndQueue+0x58>)
 800991e:	f7fd fa71 	bl	8006e04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8009922:	4811      	ldr	r0, [pc, #68]	@ (8009968 <prvCheckForValidListAndQueue+0x5c>)
 8009924:	f7fd fa6e 	bl	8006e04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8009928:	4b10      	ldr	r3, [pc, #64]	@ (800996c <prvCheckForValidListAndQueue+0x60>)
 800992a:	4a0e      	ldr	r2, [pc, #56]	@ (8009964 <prvCheckForValidListAndQueue+0x58>)
 800992c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800992e:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <prvCheckForValidListAndQueue+0x64>)
 8009930:	4a0d      	ldr	r2, [pc, #52]	@ (8009968 <prvCheckForValidListAndQueue+0x5c>)
 8009932:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009934:	2200      	movs	r2, #0
 8009936:	210c      	movs	r1, #12
 8009938:	200a      	movs	r0, #10
 800993a:	f7fd fb81 	bl	8007040 <xQueueGenericCreate>
 800993e:	4603      	mov	r3, r0
 8009940:	4a07      	ldr	r2, [pc, #28]	@ (8009960 <prvCheckForValidListAndQueue+0x54>)
 8009942:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8009944:	4b06      	ldr	r3, [pc, #24]	@ (8009960 <prvCheckForValidListAndQueue+0x54>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800994c:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <prvCheckForValidListAndQueue+0x54>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4908      	ldr	r1, [pc, #32]	@ (8009974 <prvCheckForValidListAndQueue+0x68>)
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe f99c 	bl	8007c90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009958:	f000 f992 	bl	8009c80 <vPortExitCritical>
    }
 800995c:	bf00      	nop
 800995e:	bd80      	pop	{r7, pc}
 8009960:	2000046c 	.word	0x2000046c
 8009964:	2000043c 	.word	0x2000043c
 8009968:	20000450 	.word	0x20000450
 800996c:	20000464 	.word	0x20000464
 8009970:	20000468 	.word	0x20000468
 8009974:	0800b548 	.word	0x0800b548

08009978 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10b      	bne.n	80099a2 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	60fb      	str	r3, [r7, #12]
    }
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	e7fd      	b.n	800999e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80099a2:	f000 f93b 	bl	8009c1c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80099ac:	f000 f968 	bl	8009c80 <vPortExitCritical>

        return pvReturn;
 80099b0:	693b      	ldr	r3, [r7, #16]
    }
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3b04      	subs	r3, #4
 80099cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80099d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3b04      	subs	r3, #4
 80099da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f023 0201 	bic.w	r2, r3, #1
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3b04      	subs	r3, #4
 80099ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80099ec:	4a0c      	ldr	r2, [pc, #48]	@ (8009a20 <pxPortInitialiseStack+0x64>)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3b14      	subs	r3, #20
 80099f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3b04      	subs	r3, #4
 8009a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f06f 0202 	mvn.w	r2, #2
 8009a0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3b20      	subs	r3, #32
 8009a10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	08009a25 	.word	0x08009a25

08009a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8009a2e:	4b13      	ldr	r3, [pc, #76]	@ (8009a7c <prvTaskExitError+0x58>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a36:	d00b      	beq.n	8009a50 <prvTaskExitError+0x2c>
        __asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60fb      	str	r3, [r7, #12]
    }
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	e7fd      	b.n	8009a4c <prvTaskExitError+0x28>
        __asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60bb      	str	r3, [r7, #8]
    }
 8009a62:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009a64:	bf00      	nop
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0fc      	beq.n	8009a66 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	20000078 	.word	0x20000078

08009a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009a80:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <pxCurrentTCBConst2>)
 8009a82:	6819      	ldr	r1, [r3, #0]
 8009a84:	6808      	ldr	r0, [r1, #0]
 8009a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8a:	f380 8809 	msr	PSP, r0
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f380 8811 	msr	BASEPRI, r0
 8009a9a:	4770      	bx	lr
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst2>:
 8009aa0:	20000338 	.word	0x20000338
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009aa8:	4808      	ldr	r0, [pc, #32]	@ (8009acc <prvPortStartFirstTask+0x24>)
 8009aaa:	6800      	ldr	r0, [r0, #0]
 8009aac:	6800      	ldr	r0, [r0, #0]
 8009aae:	f380 8808 	msr	MSP, r0
 8009ab2:	f04f 0000 	mov.w	r0, #0
 8009ab6:	f380 8814 	msr	CONTROL, r0
 8009aba:	b662      	cpsie	i
 8009abc:	b661      	cpsie	f
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	df00      	svc	0
 8009ac8:	bf00      	nop
 8009aca:	0000      	.short	0x0000
 8009acc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop

08009ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ada:	4b47      	ldr	r3, [pc, #284]	@ (8009bf8 <xPortStartScheduler+0x124>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a47      	ldr	r2, [pc, #284]	@ (8009bfc <xPortStartScheduler+0x128>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d10b      	bne.n	8009afc <xPortStartScheduler+0x28>
        __asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	613b      	str	r3, [r7, #16]
    }
 8009af6:	bf00      	nop
 8009af8:	bf00      	nop
 8009afa:	e7fd      	b.n	8009af8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009afc:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf8 <xPortStartScheduler+0x124>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a3f      	ldr	r2, [pc, #252]	@ (8009c00 <xPortStartScheduler+0x12c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d10b      	bne.n	8009b1e <xPortStartScheduler+0x4a>
        __asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60fb      	str	r3, [r7, #12]
    }
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b1e:	4b39      	ldr	r3, [pc, #228]	@ (8009c04 <xPortStartScheduler+0x130>)
 8009b20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	22ff      	movs	r2, #255	@ 0xff
 8009b2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	4b31      	ldr	r3, [pc, #196]	@ (8009c08 <xPortStartScheduler+0x134>)
 8009b44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b46:	4b31      	ldr	r3, [pc, #196]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b48:	2207      	movs	r2, #7
 8009b4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b4c:	e009      	b.n	8009b62 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8009b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	4a2d      	ldr	r2, [pc, #180]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b6a:	2b80      	cmp	r3, #128	@ 0x80
 8009b6c:	d0ef      	beq.n	8009b4e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b6e:	4b27      	ldr	r3, [pc, #156]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f1c3 0307 	rsb	r3, r3, #7
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d00b      	beq.n	8009b92 <xPortStartScheduler+0xbe>
        __asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	60bb      	str	r3, [r7, #8]
    }
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b92:	4b1e      	ldr	r3, [pc, #120]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	4a1c      	ldr	r2, [pc, #112]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b9a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ba4:	4a19      	ldr	r2, [pc, #100]	@ (8009c0c <xPortStartScheduler+0x138>)
 8009ba6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009bb0:	4b17      	ldr	r3, [pc, #92]	@ (8009c10 <xPortStartScheduler+0x13c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a16      	ldr	r2, [pc, #88]	@ (8009c10 <xPortStartScheduler+0x13c>)
 8009bb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009bba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009bbc:	4b14      	ldr	r3, [pc, #80]	@ (8009c10 <xPortStartScheduler+0x13c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a13      	ldr	r2, [pc, #76]	@ (8009c10 <xPortStartScheduler+0x13c>)
 8009bc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009bc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009bc8:	f000 f8e0 	bl	8009d8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009bcc:	4b11      	ldr	r3, [pc, #68]	@ (8009c14 <xPortStartScheduler+0x140>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009bd2:	f000 f8ff 	bl	8009dd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bd6:	4b10      	ldr	r3, [pc, #64]	@ (8009c18 <xPortStartScheduler+0x144>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a0f      	ldr	r2, [pc, #60]	@ (8009c18 <xPortStartScheduler+0x144>)
 8009bdc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009be0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009be2:	f7ff ff61 	bl	8009aa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009be6:	f7fe fbbf 	bl	8008368 <vTaskSwitchContext>
    prvTaskExitError();
 8009bea:	f7ff ff1b 	bl	8009a24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	e000ed00 	.word	0xe000ed00
 8009bfc:	410fc271 	.word	0x410fc271
 8009c00:	410fc270 	.word	0x410fc270
 8009c04:	e000e400 	.word	0xe000e400
 8009c08:	20000478 	.word	0x20000478
 8009c0c:	2000047c 	.word	0x2000047c
 8009c10:	e000ed20 	.word	0xe000ed20
 8009c14:	20000078 	.word	0x20000078
 8009c18:	e000ef34 	.word	0xe000ef34

08009c1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
        __asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
    }
 8009c34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <vPortEnterCritical+0x5c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8009c78 <vPortEnterCritical+0x5c>)
 8009c3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009c40:	4b0d      	ldr	r3, [pc, #52]	@ (8009c78 <vPortEnterCritical+0x5c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d110      	bne.n	8009c6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c48:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <vPortEnterCritical+0x60>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00b      	beq.n	8009c6a <vPortEnterCritical+0x4e>
        __asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	603b      	str	r3, [r7, #0]
    }
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	e7fd      	b.n	8009c66 <vPortEnterCritical+0x4a>
    }
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000078 	.word	0x20000078
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009c86:	4b12      	ldr	r3, [pc, #72]	@ (8009cd0 <vPortExitCritical+0x50>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10b      	bne.n	8009ca6 <vPortExitCritical+0x26>
        __asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	607b      	str	r3, [r7, #4]
    }
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	e7fd      	b.n	8009ca2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd0 <vPortExitCritical+0x50>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a08      	ldr	r2, [pc, #32]	@ (8009cd0 <vPortExitCritical+0x50>)
 8009cae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009cb0:	4b07      	ldr	r3, [pc, #28]	@ (8009cd0 <vPortExitCritical+0x50>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d105      	bne.n	8009cc4 <vPortExitCritical+0x44>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f383 8811 	msr	BASEPRI, r3
    }
 8009cc2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	20000078 	.word	0x20000078
	...

08009ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009ce0:	f3ef 8009 	mrs	r0, PSP
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	4b15      	ldr	r3, [pc, #84]	@ (8009d40 <pxCurrentTCBConst>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	f01e 0f10 	tst.w	lr, #16
 8009cf0:	bf08      	it	eq
 8009cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	6010      	str	r0, [r2, #0]
 8009cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d04:	f380 8811 	msr	BASEPRI, r0
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f7fe fb2a 	bl	8008368 <vTaskSwitchContext>
 8009d14:	f04f 0000 	mov.w	r0, #0
 8009d18:	f380 8811 	msr	BASEPRI, r0
 8009d1c:	bc09      	pop	{r0, r3}
 8009d1e:	6819      	ldr	r1, [r3, #0]
 8009d20:	6808      	ldr	r0, [r1, #0]
 8009d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d26:	f01e 0f10 	tst.w	lr, #16
 8009d2a:	bf08      	it	eq
 8009d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d30:	f380 8809 	msr	PSP, r0
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	f3af 8000 	nop.w

08009d40 <pxCurrentTCBConst>:
 8009d40:	20000338 	.word	0x20000338
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop

08009d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
    }
 8009d60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009d62:	f7fe fa47 	bl	80081f4 <xTaskIncrementTick>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d6c:	4b06      	ldr	r3, [pc, #24]	@ (8009d88 <SysTick_Handler+0x40>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	2300      	movs	r3, #0
 8009d76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f383 8811 	msr	BASEPRI, r3
    }
 8009d7e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d90:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc0 <vPortSetupTimerInterrupt+0x34>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d96:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc4 <vPortSetupTimerInterrupt+0x38>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc8 <vPortSetupTimerInterrupt+0x3c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dcc <vPortSetupTimerInterrupt+0x40>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	099b      	lsrs	r3, r3, #6
 8009da8:	4a09      	ldr	r2, [pc, #36]	@ (8009dd0 <vPortSetupTimerInterrupt+0x44>)
 8009daa:	3b01      	subs	r3, #1
 8009dac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dae:	4b04      	ldr	r3, [pc, #16]	@ (8009dc0 <vPortSetupTimerInterrupt+0x34>)
 8009db0:	2207      	movs	r2, #7
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	e000e010 	.word	0xe000e010
 8009dc4:	e000e018 	.word	0xe000e018
 8009dc8:	20000068 	.word	0x20000068
 8009dcc:	10624dd3 	.word	0x10624dd3
 8009dd0:	e000e014 	.word	0xe000e014

08009dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009de4 <vPortEnableVFP+0x10>
 8009dd8:	6801      	ldr	r1, [r0, #0]
 8009dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009dde:	6001      	str	r1, [r0, #0]
 8009de0:	4770      	bx	lr
 8009de2:	0000      	.short	0x0000
 8009de4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop

08009dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009df2:	f3ef 8305 	mrs	r3, IPSR
 8009df6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b0f      	cmp	r3, #15
 8009dfc:	d915      	bls.n	8009e2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dfe:	4a18      	ldr	r2, [pc, #96]	@ (8009e60 <vPortValidateInterruptPriority+0x74>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e08:	4b16      	ldr	r3, [pc, #88]	@ (8009e64 <vPortValidateInterruptPriority+0x78>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	7afa      	ldrb	r2, [r7, #11]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d20b      	bcs.n	8009e2a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	607b      	str	r3, [r7, #4]
    }
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <vPortValidateInterruptPriority+0x7c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009e32:	4b0e      	ldr	r3, [pc, #56]	@ (8009e6c <vPortValidateInterruptPriority+0x80>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d90b      	bls.n	8009e52 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	603b      	str	r3, [r7, #0]
    }
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vPortValidateInterruptPriority+0x62>
    }
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	e000e3f0 	.word	0xe000e3f0
 8009e64:	20000478 	.word	0x20000478
 8009e68:	e000ed0c 	.word	0xe000ed0c
 8009e6c:	2000047c 	.word	0x2000047c

08009e70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08a      	sub	sp, #40	@ 0x28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8009e7c:	f7fe f8fe 	bl	800807c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009e80:	4b66      	ldr	r3, [pc, #408]	@ (800a01c <pvPortMalloc+0x1ac>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009e88:	f000 f938 	bl	800a0fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e8c:	4b64      	ldr	r3, [pc, #400]	@ (800a020 <pvPortMalloc+0x1b0>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4013      	ands	r3, r2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 80a9 	bne.w	8009fec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02e      	beq.n	8009efe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d228      	bcs.n	8009efe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8009eac:	2208      	movs	r2, #8
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d022      	beq.n	8009f04 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f023 0307 	bic.w	r3, r3, #7
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d215      	bcs.n	8009ef8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f023 0307 	bic.w	r3, r3, #7
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <pvPortMalloc+0x94>
        __asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	617b      	str	r3, [r7, #20]
    }
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009efc:	e002      	b.n	8009f04 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	e000      	b.n	8009f06 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f04:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d06f      	beq.n	8009fec <pvPortMalloc+0x17c>
 8009f0c:	4b45      	ldr	r3, [pc, #276]	@ (800a024 <pvPortMalloc+0x1b4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d86a      	bhi.n	8009fec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009f16:	4b44      	ldr	r3, [pc, #272]	@ (800a028 <pvPortMalloc+0x1b8>)
 8009f18:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009f1a:	4b43      	ldr	r3, [pc, #268]	@ (800a028 <pvPortMalloc+0x1b8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f20:	e004      	b.n	8009f2c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d903      	bls.n	8009f3e <pvPortMalloc+0xce>
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f1      	bne.n	8009f22 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009f3e:	4b37      	ldr	r3, [pc, #220]	@ (800a01c <pvPortMalloc+0x1ac>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d051      	beq.n	8009fec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	4413      	add	r3, r2
 8009f50:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	1ad2      	subs	r2, r2, r3
 8009f62:	2308      	movs	r3, #8
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d920      	bls.n	8009fac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4413      	add	r3, r2
 8009f70:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f003 0307 	and.w	r3, r3, #7
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <pvPortMalloc+0x124>
        __asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	613b      	str	r3, [r7, #16]
    }
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fa6:	69b8      	ldr	r0, [r7, #24]
 8009fa8:	f000 f90a 	bl	800a1c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fac:	4b1d      	ldr	r3, [pc, #116]	@ (800a024 <pvPortMalloc+0x1b4>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	4a1b      	ldr	r2, [pc, #108]	@ (800a024 <pvPortMalloc+0x1b4>)
 8009fb8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fba:	4b1a      	ldr	r3, [pc, #104]	@ (800a024 <pvPortMalloc+0x1b4>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800a02c <pvPortMalloc+0x1bc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d203      	bcs.n	8009fce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fc6:	4b17      	ldr	r3, [pc, #92]	@ (800a024 <pvPortMalloc+0x1b4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a18      	ldr	r2, [pc, #96]	@ (800a02c <pvPortMalloc+0x1bc>)
 8009fcc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4b13      	ldr	r3, [pc, #76]	@ (800a020 <pvPortMalloc+0x1b0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009fe2:	4b13      	ldr	r3, [pc, #76]	@ (800a030 <pvPortMalloc+0x1c0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a11      	ldr	r2, [pc, #68]	@ (800a030 <pvPortMalloc+0x1c0>)
 8009fea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009fec:	f7fe f854 	bl	8008098 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <pvPortMalloc+0x1a2>
        __asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	60fb      	str	r3, [r7, #12]
    }
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <pvPortMalloc+0x19e>
    return pvReturn;
 800a012:	69fb      	ldr	r3, [r7, #28]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3728      	adds	r7, #40	@ 0x28
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20019488 	.word	0x20019488
 800a020:	2001949c 	.word	0x2001949c
 800a024:	2001948c 	.word	0x2001948c
 800a028:	20019480 	.word	0x20019480
 800a02c:	20019490 	.word	0x20019490
 800a030:	20019494 	.word	0x20019494

0800a034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d04f      	beq.n	800a0e6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800a046:	2308      	movs	r3, #8
 800a048:	425b      	negs	r3, r3
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	4413      	add	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	4b25      	ldr	r3, [pc, #148]	@ (800a0f0 <vPortFree+0xbc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <vPortFree+0x46>
        __asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60fb      	str	r3, [r7, #12]
    }
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <vPortFree+0x66>
        __asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60bb      	str	r3, [r7, #8]
    }
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	4b14      	ldr	r3, [pc, #80]	@ (800a0f0 <vPortFree+0xbc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01e      	beq.n	800a0e6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d11a      	bne.n	800a0e6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f0 <vPortFree+0xbc>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800a0c0:	f7fd ffdc 	bl	800807c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f4 <vPortFree+0xc0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	4a09      	ldr	r2, [pc, #36]	@ (800a0f4 <vPortFree+0xc0>)
 800a0d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0d2:	6938      	ldr	r0, [r7, #16]
 800a0d4:	f000 f874 	bl	800a1c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800a0d8:	4b07      	ldr	r3, [pc, #28]	@ (800a0f8 <vPortFree+0xc4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	4a06      	ldr	r2, [pc, #24]	@ (800a0f8 <vPortFree+0xc4>)
 800a0e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800a0e2:	f7fd ffd9 	bl	8008098 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800a0e6:	bf00      	nop
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2001949c 	.word	0x2001949c
 800a0f4:	2001948c 	.word	0x2001948c
 800a0f8:	20019498 	.word	0x20019498

0800a0fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a102:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800a106:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800a108:	4b27      	ldr	r3, [pc, #156]	@ (800a1a8 <prvHeapInit+0xac>)
 800a10a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00c      	beq.n	800a130 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3307      	adds	r3, #7
 800a11a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a8 <prvHeapInit+0xac>)
 800a12c:	4413      	add	r3, r2
 800a12e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a134:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ac <prvHeapInit+0xb0>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a13a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1ac <prvHeapInit+0xb0>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	4413      	add	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800a148:	2208      	movs	r2, #8
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0307 	bic.w	r3, r3, #7
 800a156:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4a15      	ldr	r2, [pc, #84]	@ (800a1b0 <prvHeapInit+0xb4>)
 800a15c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a15e:	4b14      	ldr	r3, [pc, #80]	@ (800a1b0 <prvHeapInit+0xb4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800a166:	4b12      	ldr	r3, [pc, #72]	@ (800a1b0 <prvHeapInit+0xb4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a17c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b0 <prvHeapInit+0xb4>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4a0a      	ldr	r2, [pc, #40]	@ (800a1b4 <prvHeapInit+0xb8>)
 800a18a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	4a09      	ldr	r2, [pc, #36]	@ (800a1b8 <prvHeapInit+0xbc>)
 800a192:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a194:	4b09      	ldr	r3, [pc, #36]	@ (800a1bc <prvHeapInit+0xc0>)
 800a196:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a19a:	601a      	str	r2, [r3, #0]
}
 800a19c:	bf00      	nop
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	20000480 	.word	0x20000480
 800a1ac:	20019480 	.word	0x20019480
 800a1b0:	20019488 	.word	0x20019488
 800a1b4:	20019490 	.word	0x20019490
 800a1b8:	2001948c 	.word	0x2001948c
 800a1bc:	2001949c 	.word	0x2001949c

0800a1c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1c8:	4b28      	ldr	r3, [pc, #160]	@ (800a26c <prvInsertBlockIntoFreeList+0xac>)
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	e002      	b.n	800a1d4 <prvInsertBlockIntoFreeList+0x14>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d8f7      	bhi.n	800a1ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d108      	bne.n	800a202 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	441a      	add	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	441a      	add	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d118      	bne.n	800a248 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	4b15      	ldr	r3, [pc, #84]	@ (800a270 <prvInsertBlockIntoFreeList+0xb0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d00d      	beq.n	800a23e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	441a      	add	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	e008      	b.n	800a250 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a23e:	4b0c      	ldr	r3, [pc, #48]	@ (800a270 <prvInsertBlockIntoFreeList+0xb0>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	e003      	b.n	800a250 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	429a      	cmp	r2, r3
 800a256:	d002      	beq.n	800a25e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20019480 	.word	0x20019480
 800a270:	20019488 	.word	0x20019488

0800a274 <siprintf>:
 800a274:	b40e      	push	{r1, r2, r3}
 800a276:	b500      	push	{lr}
 800a278:	b09c      	sub	sp, #112	@ 0x70
 800a27a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a27c:	9002      	str	r0, [sp, #8]
 800a27e:	9006      	str	r0, [sp, #24]
 800a280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a284:	4809      	ldr	r0, [pc, #36]	@ (800a2ac <siprintf+0x38>)
 800a286:	9107      	str	r1, [sp, #28]
 800a288:	9104      	str	r1, [sp, #16]
 800a28a:	4909      	ldr	r1, [pc, #36]	@ (800a2b0 <siprintf+0x3c>)
 800a28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a290:	9105      	str	r1, [sp, #20]
 800a292:	6800      	ldr	r0, [r0, #0]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	a902      	add	r1, sp, #8
 800a298:	f000 f9a2 	bl	800a5e0 <_svfiprintf_r>
 800a29c:	9b02      	ldr	r3, [sp, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	b01c      	add	sp, #112	@ 0x70
 800a2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a8:	b003      	add	sp, #12
 800a2aa:	4770      	bx	lr
 800a2ac:	2000007c 	.word	0x2000007c
 800a2b0:	ffff0208 	.word	0xffff0208

0800a2b4 <memset>:
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <memset+0xa>
 800a2bc:	4770      	bx	lr
 800a2be:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c2:	e7f9      	b.n	800a2b8 <memset+0x4>

0800a2c4 <__errno>:
 800a2c4:	4b01      	ldr	r3, [pc, #4]	@ (800a2cc <__errno+0x8>)
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	2000007c 	.word	0x2000007c

0800a2d0 <__libc_init_array>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a308 <__libc_init_array+0x38>)
 800a2d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a30c <__libc_init_array+0x3c>)
 800a2d6:	1b64      	subs	r4, r4, r5
 800a2d8:	10a4      	asrs	r4, r4, #2
 800a2da:	2600      	movs	r6, #0
 800a2dc:	42a6      	cmp	r6, r4
 800a2de:	d109      	bne.n	800a2f4 <__libc_init_array+0x24>
 800a2e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a310 <__libc_init_array+0x40>)
 800a2e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a314 <__libc_init_array+0x44>)
 800a2e4:	f000 fc66 	bl	800abb4 <_init>
 800a2e8:	1b64      	subs	r4, r4, r5
 800a2ea:	10a4      	asrs	r4, r4, #2
 800a2ec:	2600      	movs	r6, #0
 800a2ee:	42a6      	cmp	r6, r4
 800a2f0:	d105      	bne.n	800a2fe <__libc_init_array+0x2e>
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f8:	4798      	blx	r3
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	e7ee      	b.n	800a2dc <__libc_init_array+0xc>
 800a2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a302:	4798      	blx	r3
 800a304:	3601      	adds	r6, #1
 800a306:	e7f2      	b.n	800a2ee <__libc_init_array+0x1e>
 800a308:	0800b6a4 	.word	0x0800b6a4
 800a30c:	0800b6a4 	.word	0x0800b6a4
 800a310:	0800b6a4 	.word	0x0800b6a4
 800a314:	0800b6a8 	.word	0x0800b6a8

0800a318 <__retarget_lock_acquire_recursive>:
 800a318:	4770      	bx	lr

0800a31a <__retarget_lock_release_recursive>:
 800a31a:	4770      	bx	lr

0800a31c <memcpy>:
 800a31c:	440a      	add	r2, r1
 800a31e:	4291      	cmp	r1, r2
 800a320:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a324:	d100      	bne.n	800a328 <memcpy+0xc>
 800a326:	4770      	bx	lr
 800a328:	b510      	push	{r4, lr}
 800a32a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a32e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a332:	4291      	cmp	r1, r2
 800a334:	d1f9      	bne.n	800a32a <memcpy+0xe>
 800a336:	bd10      	pop	{r4, pc}

0800a338 <_free_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4605      	mov	r5, r0
 800a33c:	2900      	cmp	r1, #0
 800a33e:	d041      	beq.n	800a3c4 <_free_r+0x8c>
 800a340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a344:	1f0c      	subs	r4, r1, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfb8      	it	lt
 800a34a:	18e4      	addlt	r4, r4, r3
 800a34c:	f000 f8e0 	bl	800a510 <__malloc_lock>
 800a350:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c8 <_free_r+0x90>)
 800a352:	6813      	ldr	r3, [r2, #0]
 800a354:	b933      	cbnz	r3, 800a364 <_free_r+0x2c>
 800a356:	6063      	str	r3, [r4, #4]
 800a358:	6014      	str	r4, [r2, #0]
 800a35a:	4628      	mov	r0, r5
 800a35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a360:	f000 b8dc 	b.w	800a51c <__malloc_unlock>
 800a364:	42a3      	cmp	r3, r4
 800a366:	d908      	bls.n	800a37a <_free_r+0x42>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	1821      	adds	r1, r4, r0
 800a36c:	428b      	cmp	r3, r1
 800a36e:	bf01      	itttt	eq
 800a370:	6819      	ldreq	r1, [r3, #0]
 800a372:	685b      	ldreq	r3, [r3, #4]
 800a374:	1809      	addeq	r1, r1, r0
 800a376:	6021      	streq	r1, [r4, #0]
 800a378:	e7ed      	b.n	800a356 <_free_r+0x1e>
 800a37a:	461a      	mov	r2, r3
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	b10b      	cbz	r3, 800a384 <_free_r+0x4c>
 800a380:	42a3      	cmp	r3, r4
 800a382:	d9fa      	bls.n	800a37a <_free_r+0x42>
 800a384:	6811      	ldr	r1, [r2, #0]
 800a386:	1850      	adds	r0, r2, r1
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d10b      	bne.n	800a3a4 <_free_r+0x6c>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	4401      	add	r1, r0
 800a390:	1850      	adds	r0, r2, r1
 800a392:	4283      	cmp	r3, r0
 800a394:	6011      	str	r1, [r2, #0]
 800a396:	d1e0      	bne.n	800a35a <_free_r+0x22>
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	6053      	str	r3, [r2, #4]
 800a39e:	4408      	add	r0, r1
 800a3a0:	6010      	str	r0, [r2, #0]
 800a3a2:	e7da      	b.n	800a35a <_free_r+0x22>
 800a3a4:	d902      	bls.n	800a3ac <_free_r+0x74>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	e7d6      	b.n	800a35a <_free_r+0x22>
 800a3ac:	6820      	ldr	r0, [r4, #0]
 800a3ae:	1821      	adds	r1, r4, r0
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	bf04      	itt	eq
 800a3b4:	6819      	ldreq	r1, [r3, #0]
 800a3b6:	685b      	ldreq	r3, [r3, #4]
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	bf04      	itt	eq
 800a3bc:	1809      	addeq	r1, r1, r0
 800a3be:	6021      	streq	r1, [r4, #0]
 800a3c0:	6054      	str	r4, [r2, #4]
 800a3c2:	e7ca      	b.n	800a35a <_free_r+0x22>
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200195e4 	.word	0x200195e4

0800a3cc <sbrk_aligned>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a40c <sbrk_aligned+0x40>)
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	6831      	ldr	r1, [r6, #0]
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	b911      	cbnz	r1, 800a3de <sbrk_aligned+0x12>
 800a3d8:	f000 fba6 	bl	800ab28 <_sbrk_r>
 800a3dc:	6030      	str	r0, [r6, #0]
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 fba1 	bl	800ab28 <_sbrk_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	d103      	bne.n	800a3f2 <sbrk_aligned+0x26>
 800a3ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	1cc4      	adds	r4, r0, #3
 800a3f4:	f024 0403 	bic.w	r4, r4, #3
 800a3f8:	42a0      	cmp	r0, r4
 800a3fa:	d0f8      	beq.n	800a3ee <sbrk_aligned+0x22>
 800a3fc:	1a21      	subs	r1, r4, r0
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 fb92 	bl	800ab28 <_sbrk_r>
 800a404:	3001      	adds	r0, #1
 800a406:	d1f2      	bne.n	800a3ee <sbrk_aligned+0x22>
 800a408:	e7ef      	b.n	800a3ea <sbrk_aligned+0x1e>
 800a40a:	bf00      	nop
 800a40c:	200195e0 	.word	0x200195e0

0800a410 <_malloc_r>:
 800a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a414:	1ccd      	adds	r5, r1, #3
 800a416:	f025 0503 	bic.w	r5, r5, #3
 800a41a:	3508      	adds	r5, #8
 800a41c:	2d0c      	cmp	r5, #12
 800a41e:	bf38      	it	cc
 800a420:	250c      	movcc	r5, #12
 800a422:	2d00      	cmp	r5, #0
 800a424:	4606      	mov	r6, r0
 800a426:	db01      	blt.n	800a42c <_malloc_r+0x1c>
 800a428:	42a9      	cmp	r1, r5
 800a42a:	d904      	bls.n	800a436 <_malloc_r+0x26>
 800a42c:	230c      	movs	r3, #12
 800a42e:	6033      	str	r3, [r6, #0]
 800a430:	2000      	movs	r0, #0
 800a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a50c <_malloc_r+0xfc>
 800a43a:	f000 f869 	bl	800a510 <__malloc_lock>
 800a43e:	f8d8 3000 	ldr.w	r3, [r8]
 800a442:	461c      	mov	r4, r3
 800a444:	bb44      	cbnz	r4, 800a498 <_malloc_r+0x88>
 800a446:	4629      	mov	r1, r5
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff ffbf 	bl	800a3cc <sbrk_aligned>
 800a44e:	1c43      	adds	r3, r0, #1
 800a450:	4604      	mov	r4, r0
 800a452:	d158      	bne.n	800a506 <_malloc_r+0xf6>
 800a454:	f8d8 4000 	ldr.w	r4, [r8]
 800a458:	4627      	mov	r7, r4
 800a45a:	2f00      	cmp	r7, #0
 800a45c:	d143      	bne.n	800a4e6 <_malloc_r+0xd6>
 800a45e:	2c00      	cmp	r4, #0
 800a460:	d04b      	beq.n	800a4fa <_malloc_r+0xea>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	4639      	mov	r1, r7
 800a466:	4630      	mov	r0, r6
 800a468:	eb04 0903 	add.w	r9, r4, r3
 800a46c:	f000 fb5c 	bl	800ab28 <_sbrk_r>
 800a470:	4581      	cmp	r9, r0
 800a472:	d142      	bne.n	800a4fa <_malloc_r+0xea>
 800a474:	6821      	ldr	r1, [r4, #0]
 800a476:	1a6d      	subs	r5, r5, r1
 800a478:	4629      	mov	r1, r5
 800a47a:	4630      	mov	r0, r6
 800a47c:	f7ff ffa6 	bl	800a3cc <sbrk_aligned>
 800a480:	3001      	adds	r0, #1
 800a482:	d03a      	beq.n	800a4fa <_malloc_r+0xea>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	442b      	add	r3, r5
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	f8d8 3000 	ldr.w	r3, [r8]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	bb62      	cbnz	r2, 800a4ec <_malloc_r+0xdc>
 800a492:	f8c8 7000 	str.w	r7, [r8]
 800a496:	e00f      	b.n	800a4b8 <_malloc_r+0xa8>
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	1b52      	subs	r2, r2, r5
 800a49c:	d420      	bmi.n	800a4e0 <_malloc_r+0xd0>
 800a49e:	2a0b      	cmp	r2, #11
 800a4a0:	d917      	bls.n	800a4d2 <_malloc_r+0xc2>
 800a4a2:	1961      	adds	r1, r4, r5
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	6025      	str	r5, [r4, #0]
 800a4a8:	bf18      	it	ne
 800a4aa:	6059      	strne	r1, [r3, #4]
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	bf08      	it	eq
 800a4b0:	f8c8 1000 	streq.w	r1, [r8]
 800a4b4:	5162      	str	r2, [r4, r5]
 800a4b6:	604b      	str	r3, [r1, #4]
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f000 f82f 	bl	800a51c <__malloc_unlock>
 800a4be:	f104 000b 	add.w	r0, r4, #11
 800a4c2:	1d23      	adds	r3, r4, #4
 800a4c4:	f020 0007 	bic.w	r0, r0, #7
 800a4c8:	1ac2      	subs	r2, r0, r3
 800a4ca:	bf1c      	itt	ne
 800a4cc:	1a1b      	subne	r3, r3, r0
 800a4ce:	50a3      	strne	r3, [r4, r2]
 800a4d0:	e7af      	b.n	800a432 <_malloc_r+0x22>
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	bf0c      	ite	eq
 800a4d8:	f8c8 2000 	streq.w	r2, [r8]
 800a4dc:	605a      	strne	r2, [r3, #4]
 800a4de:	e7eb      	b.n	800a4b8 <_malloc_r+0xa8>
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	6864      	ldr	r4, [r4, #4]
 800a4e4:	e7ae      	b.n	800a444 <_malloc_r+0x34>
 800a4e6:	463c      	mov	r4, r7
 800a4e8:	687f      	ldr	r7, [r7, #4]
 800a4ea:	e7b6      	b.n	800a45a <_malloc_r+0x4a>
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d1fb      	bne.n	800a4ec <_malloc_r+0xdc>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6053      	str	r3, [r2, #4]
 800a4f8:	e7de      	b.n	800a4b8 <_malloc_r+0xa8>
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	6033      	str	r3, [r6, #0]
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 f80c 	bl	800a51c <__malloc_unlock>
 800a504:	e794      	b.n	800a430 <_malloc_r+0x20>
 800a506:	6005      	str	r5, [r0, #0]
 800a508:	e7d6      	b.n	800a4b8 <_malloc_r+0xa8>
 800a50a:	bf00      	nop
 800a50c:	200195e4 	.word	0x200195e4

0800a510 <__malloc_lock>:
 800a510:	4801      	ldr	r0, [pc, #4]	@ (800a518 <__malloc_lock+0x8>)
 800a512:	f7ff bf01 	b.w	800a318 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	200195dc 	.word	0x200195dc

0800a51c <__malloc_unlock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	@ (800a524 <__malloc_unlock+0x8>)
 800a51e:	f7ff befc 	b.w	800a31a <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	200195dc 	.word	0x200195dc

0800a528 <__ssputs_r>:
 800a528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52c:	688e      	ldr	r6, [r1, #8]
 800a52e:	461f      	mov	r7, r3
 800a530:	42be      	cmp	r6, r7
 800a532:	680b      	ldr	r3, [r1, #0]
 800a534:	4682      	mov	sl, r0
 800a536:	460c      	mov	r4, r1
 800a538:	4690      	mov	r8, r2
 800a53a:	d82d      	bhi.n	800a598 <__ssputs_r+0x70>
 800a53c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a540:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a544:	d026      	beq.n	800a594 <__ssputs_r+0x6c>
 800a546:	6965      	ldr	r5, [r4, #20]
 800a548:	6909      	ldr	r1, [r1, #16]
 800a54a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a54e:	eba3 0901 	sub.w	r9, r3, r1
 800a552:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a556:	1c7b      	adds	r3, r7, #1
 800a558:	444b      	add	r3, r9
 800a55a:	106d      	asrs	r5, r5, #1
 800a55c:	429d      	cmp	r5, r3
 800a55e:	bf38      	it	cc
 800a560:	461d      	movcc	r5, r3
 800a562:	0553      	lsls	r3, r2, #21
 800a564:	d527      	bpl.n	800a5b6 <__ssputs_r+0x8e>
 800a566:	4629      	mov	r1, r5
 800a568:	f7ff ff52 	bl	800a410 <_malloc_r>
 800a56c:	4606      	mov	r6, r0
 800a56e:	b360      	cbz	r0, 800a5ca <__ssputs_r+0xa2>
 800a570:	6921      	ldr	r1, [r4, #16]
 800a572:	464a      	mov	r2, r9
 800a574:	f7ff fed2 	bl	800a31c <memcpy>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a57e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	6126      	str	r6, [r4, #16]
 800a586:	6165      	str	r5, [r4, #20]
 800a588:	444e      	add	r6, r9
 800a58a:	eba5 0509 	sub.w	r5, r5, r9
 800a58e:	6026      	str	r6, [r4, #0]
 800a590:	60a5      	str	r5, [r4, #8]
 800a592:	463e      	mov	r6, r7
 800a594:	42be      	cmp	r6, r7
 800a596:	d900      	bls.n	800a59a <__ssputs_r+0x72>
 800a598:	463e      	mov	r6, r7
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	4632      	mov	r2, r6
 800a59e:	4641      	mov	r1, r8
 800a5a0:	f000 faa8 	bl	800aaf4 <memmove>
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	1b9b      	subs	r3, r3, r6
 800a5a8:	60a3      	str	r3, [r4, #8]
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	4433      	add	r3, r6
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	f000 fac6 	bl	800ab48 <_realloc_r>
 800a5bc:	4606      	mov	r6, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d1e0      	bne.n	800a584 <__ssputs_r+0x5c>
 800a5c2:	6921      	ldr	r1, [r4, #16]
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	f7ff feb7 	bl	800a338 <_free_r>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	f8ca 3000 	str.w	r3, [sl]
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5dc:	e7e9      	b.n	800a5b2 <__ssputs_r+0x8a>
	...

0800a5e0 <_svfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	4698      	mov	r8, r3
 800a5e6:	898b      	ldrh	r3, [r1, #12]
 800a5e8:	061b      	lsls	r3, r3, #24
 800a5ea:	b09d      	sub	sp, #116	@ 0x74
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	460d      	mov	r5, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	d510      	bpl.n	800a616 <_svfiprintf_r+0x36>
 800a5f4:	690b      	ldr	r3, [r1, #16]
 800a5f6:	b973      	cbnz	r3, 800a616 <_svfiprintf_r+0x36>
 800a5f8:	2140      	movs	r1, #64	@ 0x40
 800a5fa:	f7ff ff09 	bl	800a410 <_malloc_r>
 800a5fe:	6028      	str	r0, [r5, #0]
 800a600:	6128      	str	r0, [r5, #16]
 800a602:	b930      	cbnz	r0, 800a612 <_svfiprintf_r+0x32>
 800a604:	230c      	movs	r3, #12
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a60c:	b01d      	add	sp, #116	@ 0x74
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	2340      	movs	r3, #64	@ 0x40
 800a614:	616b      	str	r3, [r5, #20]
 800a616:	2300      	movs	r3, #0
 800a618:	9309      	str	r3, [sp, #36]	@ 0x24
 800a61a:	2320      	movs	r3, #32
 800a61c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a620:	f8cd 800c 	str.w	r8, [sp, #12]
 800a624:	2330      	movs	r3, #48	@ 0x30
 800a626:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7c4 <_svfiprintf_r+0x1e4>
 800a62a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a62e:	f04f 0901 	mov.w	r9, #1
 800a632:	4623      	mov	r3, r4
 800a634:	469a      	mov	sl, r3
 800a636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a63a:	b10a      	cbz	r2, 800a640 <_svfiprintf_r+0x60>
 800a63c:	2a25      	cmp	r2, #37	@ 0x25
 800a63e:	d1f9      	bne.n	800a634 <_svfiprintf_r+0x54>
 800a640:	ebba 0b04 	subs.w	fp, sl, r4
 800a644:	d00b      	beq.n	800a65e <_svfiprintf_r+0x7e>
 800a646:	465b      	mov	r3, fp
 800a648:	4622      	mov	r2, r4
 800a64a:	4629      	mov	r1, r5
 800a64c:	4638      	mov	r0, r7
 800a64e:	f7ff ff6b 	bl	800a528 <__ssputs_r>
 800a652:	3001      	adds	r0, #1
 800a654:	f000 80a7 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a65a:	445a      	add	r2, fp
 800a65c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a65e:	f89a 3000 	ldrb.w	r3, [sl]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 809f 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a668:	2300      	movs	r3, #0
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a66e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a672:	f10a 0a01 	add.w	sl, sl, #1
 800a676:	9304      	str	r3, [sp, #16]
 800a678:	9307      	str	r3, [sp, #28]
 800a67a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a67e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a680:	4654      	mov	r4, sl
 800a682:	2205      	movs	r2, #5
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	484e      	ldr	r0, [pc, #312]	@ (800a7c4 <_svfiprintf_r+0x1e4>)
 800a68a:	f7f5 fdb9 	bl	8000200 <memchr>
 800a68e:	9a04      	ldr	r2, [sp, #16]
 800a690:	b9d8      	cbnz	r0, 800a6ca <_svfiprintf_r+0xea>
 800a692:	06d0      	lsls	r0, r2, #27
 800a694:	bf44      	itt	mi
 800a696:	2320      	movmi	r3, #32
 800a698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a69c:	0711      	lsls	r1, r2, #28
 800a69e:	bf44      	itt	mi
 800a6a0:	232b      	movmi	r3, #43	@ 0x2b
 800a6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ac:	d015      	beq.n	800a6da <_svfiprintf_r+0xfa>
 800a6ae:	9a07      	ldr	r2, [sp, #28]
 800a6b0:	4654      	mov	r4, sl
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	f04f 0c0a 	mov.w	ip, #10
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6be:	3b30      	subs	r3, #48	@ 0x30
 800a6c0:	2b09      	cmp	r3, #9
 800a6c2:	d94b      	bls.n	800a75c <_svfiprintf_r+0x17c>
 800a6c4:	b1b0      	cbz	r0, 800a6f4 <_svfiprintf_r+0x114>
 800a6c6:	9207      	str	r2, [sp, #28]
 800a6c8:	e014      	b.n	800a6f4 <_svfiprintf_r+0x114>
 800a6ca:	eba0 0308 	sub.w	r3, r0, r8
 800a6ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	9304      	str	r3, [sp, #16]
 800a6d6:	46a2      	mov	sl, r4
 800a6d8:	e7d2      	b.n	800a680 <_svfiprintf_r+0xa0>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	1d19      	adds	r1, r3, #4
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	9103      	str	r1, [sp, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfbb      	ittet	lt
 800a6e6:	425b      	neglt	r3, r3
 800a6e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a6ec:	9307      	strge	r3, [sp, #28]
 800a6ee:	9307      	strlt	r3, [sp, #28]
 800a6f0:	bfb8      	it	lt
 800a6f2:	9204      	strlt	r2, [sp, #16]
 800a6f4:	7823      	ldrb	r3, [r4, #0]
 800a6f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6f8:	d10a      	bne.n	800a710 <_svfiprintf_r+0x130>
 800a6fa:	7863      	ldrb	r3, [r4, #1]
 800a6fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6fe:	d132      	bne.n	800a766 <_svfiprintf_r+0x186>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d1a      	adds	r2, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9203      	str	r2, [sp, #12]
 800a708:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a70c:	3402      	adds	r4, #2
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7d4 <_svfiprintf_r+0x1f4>
 800a714:	7821      	ldrb	r1, [r4, #0]
 800a716:	2203      	movs	r2, #3
 800a718:	4650      	mov	r0, sl
 800a71a:	f7f5 fd71 	bl	8000200 <memchr>
 800a71e:	b138      	cbz	r0, 800a730 <_svfiprintf_r+0x150>
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	eba0 000a 	sub.w	r0, r0, sl
 800a726:	2240      	movs	r2, #64	@ 0x40
 800a728:	4082      	lsls	r2, r0
 800a72a:	4313      	orrs	r3, r2
 800a72c:	3401      	adds	r4, #1
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a734:	4824      	ldr	r0, [pc, #144]	@ (800a7c8 <_svfiprintf_r+0x1e8>)
 800a736:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a73a:	2206      	movs	r2, #6
 800a73c:	f7f5 fd60 	bl	8000200 <memchr>
 800a740:	2800      	cmp	r0, #0
 800a742:	d036      	beq.n	800a7b2 <_svfiprintf_r+0x1d2>
 800a744:	4b21      	ldr	r3, [pc, #132]	@ (800a7cc <_svfiprintf_r+0x1ec>)
 800a746:	bb1b      	cbnz	r3, 800a790 <_svfiprintf_r+0x1b0>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	3307      	adds	r3, #7
 800a74c:	f023 0307 	bic.w	r3, r3, #7
 800a750:	3308      	adds	r3, #8
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a756:	4433      	add	r3, r6
 800a758:	9309      	str	r3, [sp, #36]	@ 0x24
 800a75a:	e76a      	b.n	800a632 <_svfiprintf_r+0x52>
 800a75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a760:	460c      	mov	r4, r1
 800a762:	2001      	movs	r0, #1
 800a764:	e7a8      	b.n	800a6b8 <_svfiprintf_r+0xd8>
 800a766:	2300      	movs	r3, #0
 800a768:	3401      	adds	r4, #1
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	4619      	mov	r1, r3
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4620      	mov	r0, r4
 800a774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a778:	3a30      	subs	r2, #48	@ 0x30
 800a77a:	2a09      	cmp	r2, #9
 800a77c:	d903      	bls.n	800a786 <_svfiprintf_r+0x1a6>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0c6      	beq.n	800a710 <_svfiprintf_r+0x130>
 800a782:	9105      	str	r1, [sp, #20]
 800a784:	e7c4      	b.n	800a710 <_svfiprintf_r+0x130>
 800a786:	fb0c 2101 	mla	r1, ip, r1, r2
 800a78a:	4604      	mov	r4, r0
 800a78c:	2301      	movs	r3, #1
 800a78e:	e7f0      	b.n	800a772 <_svfiprintf_r+0x192>
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	462a      	mov	r2, r5
 800a796:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d0 <_svfiprintf_r+0x1f0>)
 800a798:	a904      	add	r1, sp, #16
 800a79a:	4638      	mov	r0, r7
 800a79c:	f3af 8000 	nop.w
 800a7a0:	1c42      	adds	r2, r0, #1
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	d1d6      	bne.n	800a754 <_svfiprintf_r+0x174>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	065b      	lsls	r3, r3, #25
 800a7aa:	f53f af2d 	bmi.w	800a608 <_svfiprintf_r+0x28>
 800a7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7b0:	e72c      	b.n	800a60c <_svfiprintf_r+0x2c>
 800a7b2:	ab03      	add	r3, sp, #12
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4b05      	ldr	r3, [pc, #20]	@ (800a7d0 <_svfiprintf_r+0x1f0>)
 800a7ba:	a904      	add	r1, sp, #16
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f000 f879 	bl	800a8b4 <_printf_i>
 800a7c2:	e7ed      	b.n	800a7a0 <_svfiprintf_r+0x1c0>
 800a7c4:	0800b669 	.word	0x0800b669
 800a7c8:	0800b673 	.word	0x0800b673
 800a7cc:	00000000 	.word	0x00000000
 800a7d0:	0800a529 	.word	0x0800a529
 800a7d4:	0800b66f 	.word	0x0800b66f

0800a7d8 <_printf_common>:
 800a7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	4616      	mov	r6, r2
 800a7de:	4698      	mov	r8, r3
 800a7e0:	688a      	ldr	r2, [r1, #8]
 800a7e2:	690b      	ldr	r3, [r1, #16]
 800a7e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	bfb8      	it	lt
 800a7ec:	4613      	movlt	r3, r2
 800a7ee:	6033      	str	r3, [r6, #0]
 800a7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	b10a      	cbz	r2, 800a7fe <_printf_common+0x26>
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	6033      	str	r3, [r6, #0]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	0699      	lsls	r1, r3, #26
 800a802:	bf42      	ittt	mi
 800a804:	6833      	ldrmi	r3, [r6, #0]
 800a806:	3302      	addmi	r3, #2
 800a808:	6033      	strmi	r3, [r6, #0]
 800a80a:	6825      	ldr	r5, [r4, #0]
 800a80c:	f015 0506 	ands.w	r5, r5, #6
 800a810:	d106      	bne.n	800a820 <_printf_common+0x48>
 800a812:	f104 0a19 	add.w	sl, r4, #25
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	6832      	ldr	r2, [r6, #0]
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dc26      	bgt.n	800a86e <_printf_common+0x96>
 800a820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	3b00      	subs	r3, #0
 800a828:	bf18      	it	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	0692      	lsls	r2, r2, #26
 800a82e:	d42b      	bmi.n	800a888 <_printf_common+0xb0>
 800a830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a834:	4641      	mov	r1, r8
 800a836:	4638      	mov	r0, r7
 800a838:	47c8      	blx	r9
 800a83a:	3001      	adds	r0, #1
 800a83c:	d01e      	beq.n	800a87c <_printf_common+0xa4>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	f003 0306 	and.w	r3, r3, #6
 800a846:	2b04      	cmp	r3, #4
 800a848:	bf02      	ittt	eq
 800a84a:	68e5      	ldreq	r5, [r4, #12]
 800a84c:	6833      	ldreq	r3, [r6, #0]
 800a84e:	1aed      	subeq	r5, r5, r3
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	bf0c      	ite	eq
 800a854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a858:	2500      	movne	r5, #0
 800a85a:	4293      	cmp	r3, r2
 800a85c:	bfc4      	itt	gt
 800a85e:	1a9b      	subgt	r3, r3, r2
 800a860:	18ed      	addgt	r5, r5, r3
 800a862:	2600      	movs	r6, #0
 800a864:	341a      	adds	r4, #26
 800a866:	42b5      	cmp	r5, r6
 800a868:	d11a      	bne.n	800a8a0 <_printf_common+0xc8>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e008      	b.n	800a880 <_printf_common+0xa8>
 800a86e:	2301      	movs	r3, #1
 800a870:	4652      	mov	r2, sl
 800a872:	4641      	mov	r1, r8
 800a874:	4638      	mov	r0, r7
 800a876:	47c8      	blx	r9
 800a878:	3001      	adds	r0, #1
 800a87a:	d103      	bne.n	800a884 <_printf_common+0xac>
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	3501      	adds	r5, #1
 800a886:	e7c6      	b.n	800a816 <_printf_common+0x3e>
 800a888:	18e1      	adds	r1, r4, r3
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	2030      	movs	r0, #48	@ 0x30
 800a88e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a892:	4422      	add	r2, r4
 800a894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a89c:	3302      	adds	r3, #2
 800a89e:	e7c7      	b.n	800a830 <_printf_common+0x58>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c8      	blx	r9
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d0e6      	beq.n	800a87c <_printf_common+0xa4>
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	e7d9      	b.n	800a866 <_printf_common+0x8e>
	...

0800a8b4 <_printf_i>:
 800a8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8bc:	2f78      	cmp	r7, #120	@ 0x78
 800a8be:	4691      	mov	r9, r2
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	469a      	mov	sl, r3
 800a8c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8ca:	d807      	bhi.n	800a8dc <_printf_i+0x28>
 800a8cc:	2f62      	cmp	r7, #98	@ 0x62
 800a8ce:	d80a      	bhi.n	800a8e6 <_printf_i+0x32>
 800a8d0:	2f00      	cmp	r7, #0
 800a8d2:	f000 80d2 	beq.w	800aa7a <_printf_i+0x1c6>
 800a8d6:	2f58      	cmp	r7, #88	@ 0x58
 800a8d8:	f000 80b9 	beq.w	800aa4e <_printf_i+0x19a>
 800a8dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8e4:	e03a      	b.n	800a95c <_printf_i+0xa8>
 800a8e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8ea:	2b15      	cmp	r3, #21
 800a8ec:	d8f6      	bhi.n	800a8dc <_printf_i+0x28>
 800a8ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a8f4 <_printf_i+0x40>)
 800a8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a8dd 	.word	0x0800a8dd
 800a900:	0800a8dd 	.word	0x0800a8dd
 800a904:	0800a8dd 	.word	0x0800a8dd
 800a908:	0800a8dd 	.word	0x0800a8dd
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8dd 	.word	0x0800a8dd
 800a914:	0800a8dd 	.word	0x0800a8dd
 800a918:	0800a8dd 	.word	0x0800a8dd
 800a91c:	0800a8dd 	.word	0x0800a8dd
 800a920:	0800aa61 	.word	0x0800aa61
 800a924:	0800a98b 	.word	0x0800a98b
 800a928:	0800aa1b 	.word	0x0800aa1b
 800a92c:	0800a8dd 	.word	0x0800a8dd
 800a930:	0800a8dd 	.word	0x0800a8dd
 800a934:	0800aa83 	.word	0x0800aa83
 800a938:	0800a8dd 	.word	0x0800a8dd
 800a93c:	0800a98b 	.word	0x0800a98b
 800a940:	0800a8dd 	.word	0x0800a8dd
 800a944:	0800a8dd 	.word	0x0800a8dd
 800a948:	0800aa23 	.word	0x0800aa23
 800a94c:	6833      	ldr	r3, [r6, #0]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6032      	str	r2, [r6, #0]
 800a954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a95c:	2301      	movs	r3, #1
 800a95e:	e09d      	b.n	800aa9c <_printf_i+0x1e8>
 800a960:	6833      	ldr	r3, [r6, #0]
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	1d19      	adds	r1, r3, #4
 800a966:	6031      	str	r1, [r6, #0]
 800a968:	0606      	lsls	r6, r0, #24
 800a96a:	d501      	bpl.n	800a970 <_printf_i+0xbc>
 800a96c:	681d      	ldr	r5, [r3, #0]
 800a96e:	e003      	b.n	800a978 <_printf_i+0xc4>
 800a970:	0645      	lsls	r5, r0, #25
 800a972:	d5fb      	bpl.n	800a96c <_printf_i+0xb8>
 800a974:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a978:	2d00      	cmp	r5, #0
 800a97a:	da03      	bge.n	800a984 <_printf_i+0xd0>
 800a97c:	232d      	movs	r3, #45	@ 0x2d
 800a97e:	426d      	negs	r5, r5
 800a980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a984:	4859      	ldr	r0, [pc, #356]	@ (800aaec <_printf_i+0x238>)
 800a986:	230a      	movs	r3, #10
 800a988:	e011      	b.n	800a9ae <_printf_i+0xfa>
 800a98a:	6821      	ldr	r1, [r4, #0]
 800a98c:	6833      	ldr	r3, [r6, #0]
 800a98e:	0608      	lsls	r0, r1, #24
 800a990:	f853 5b04 	ldr.w	r5, [r3], #4
 800a994:	d402      	bmi.n	800a99c <_printf_i+0xe8>
 800a996:	0649      	lsls	r1, r1, #25
 800a998:	bf48      	it	mi
 800a99a:	b2ad      	uxthmi	r5, r5
 800a99c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a99e:	4853      	ldr	r0, [pc, #332]	@ (800aaec <_printf_i+0x238>)
 800a9a0:	6033      	str	r3, [r6, #0]
 800a9a2:	bf14      	ite	ne
 800a9a4:	230a      	movne	r3, #10
 800a9a6:	2308      	moveq	r3, #8
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ae:	6866      	ldr	r6, [r4, #4]
 800a9b0:	60a6      	str	r6, [r4, #8]
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	bfa2      	ittt	ge
 800a9b6:	6821      	ldrge	r1, [r4, #0]
 800a9b8:	f021 0104 	bicge.w	r1, r1, #4
 800a9bc:	6021      	strge	r1, [r4, #0]
 800a9be:	b90d      	cbnz	r5, 800a9c4 <_printf_i+0x110>
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	d04b      	beq.n	800aa5c <_printf_i+0x1a8>
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a9ce:	5dc7      	ldrb	r7, [r0, r7]
 800a9d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9d4:	462f      	mov	r7, r5
 800a9d6:	42bb      	cmp	r3, r7
 800a9d8:	460d      	mov	r5, r1
 800a9da:	d9f4      	bls.n	800a9c6 <_printf_i+0x112>
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d10b      	bne.n	800a9f8 <_printf_i+0x144>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	07df      	lsls	r7, r3, #31
 800a9e4:	d508      	bpl.n	800a9f8 <_printf_i+0x144>
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	6861      	ldr	r1, [r4, #4]
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	bfde      	ittt	le
 800a9ee:	2330      	movle	r3, #48	@ 0x30
 800a9f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a9f8:	1b92      	subs	r2, r2, r6
 800a9fa:	6122      	str	r2, [r4, #16]
 800a9fc:	f8cd a000 	str.w	sl, [sp]
 800aa00:	464b      	mov	r3, r9
 800aa02:	aa03      	add	r2, sp, #12
 800aa04:	4621      	mov	r1, r4
 800aa06:	4640      	mov	r0, r8
 800aa08:	f7ff fee6 	bl	800a7d8 <_printf_common>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d14a      	bne.n	800aaa6 <_printf_i+0x1f2>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa14:	b004      	add	sp, #16
 800aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f043 0320 	orr.w	r3, r3, #32
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	4833      	ldr	r0, [pc, #204]	@ (800aaf0 <_printf_i+0x23c>)
 800aa24:	2778      	movs	r7, #120	@ 0x78
 800aa26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	6831      	ldr	r1, [r6, #0]
 800aa2e:	061f      	lsls	r7, r3, #24
 800aa30:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa34:	d402      	bmi.n	800aa3c <_printf_i+0x188>
 800aa36:	065f      	lsls	r7, r3, #25
 800aa38:	bf48      	it	mi
 800aa3a:	b2ad      	uxthmi	r5, r5
 800aa3c:	6031      	str	r1, [r6, #0]
 800aa3e:	07d9      	lsls	r1, r3, #31
 800aa40:	bf44      	itt	mi
 800aa42:	f043 0320 	orrmi.w	r3, r3, #32
 800aa46:	6023      	strmi	r3, [r4, #0]
 800aa48:	b11d      	cbz	r5, 800aa52 <_printf_i+0x19e>
 800aa4a:	2310      	movs	r3, #16
 800aa4c:	e7ac      	b.n	800a9a8 <_printf_i+0xf4>
 800aa4e:	4827      	ldr	r0, [pc, #156]	@ (800aaec <_printf_i+0x238>)
 800aa50:	e7e9      	b.n	800aa26 <_printf_i+0x172>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	f023 0320 	bic.w	r3, r3, #32
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	e7f6      	b.n	800aa4a <_printf_i+0x196>
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	e7bd      	b.n	800a9dc <_printf_i+0x128>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	6825      	ldr	r5, [r4, #0]
 800aa64:	6961      	ldr	r1, [r4, #20]
 800aa66:	1d18      	adds	r0, r3, #4
 800aa68:	6030      	str	r0, [r6, #0]
 800aa6a:	062e      	lsls	r6, r5, #24
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	d501      	bpl.n	800aa74 <_printf_i+0x1c0>
 800aa70:	6019      	str	r1, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <_printf_i+0x1c6>
 800aa74:	0668      	lsls	r0, r5, #25
 800aa76:	d5fb      	bpl.n	800aa70 <_printf_i+0x1bc>
 800aa78:	8019      	strh	r1, [r3, #0]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	4616      	mov	r6, r2
 800aa80:	e7bc      	b.n	800a9fc <_printf_i+0x148>
 800aa82:	6833      	ldr	r3, [r6, #0]
 800aa84:	1d1a      	adds	r2, r3, #4
 800aa86:	6032      	str	r2, [r6, #0]
 800aa88:	681e      	ldr	r6, [r3, #0]
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f7f5 fbb6 	bl	8000200 <memchr>
 800aa94:	b108      	cbz	r0, 800aa9a <_printf_i+0x1e6>
 800aa96:	1b80      	subs	r0, r0, r6
 800aa98:	6060      	str	r0, [r4, #4]
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaa4:	e7aa      	b.n	800a9fc <_printf_i+0x148>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4640      	mov	r0, r8
 800aaae:	47d0      	blx	sl
 800aab0:	3001      	adds	r0, #1
 800aab2:	d0ad      	beq.n	800aa10 <_printf_i+0x15c>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	079b      	lsls	r3, r3, #30
 800aab8:	d413      	bmi.n	800aae2 <_printf_i+0x22e>
 800aaba:	68e0      	ldr	r0, [r4, #12]
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	4298      	cmp	r0, r3
 800aac0:	bfb8      	it	lt
 800aac2:	4618      	movlt	r0, r3
 800aac4:	e7a6      	b.n	800aa14 <_printf_i+0x160>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4632      	mov	r2, r6
 800aaca:	4649      	mov	r1, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	47d0      	blx	sl
 800aad0:	3001      	adds	r0, #1
 800aad2:	d09d      	beq.n	800aa10 <_printf_i+0x15c>
 800aad4:	3501      	adds	r5, #1
 800aad6:	68e3      	ldr	r3, [r4, #12]
 800aad8:	9903      	ldr	r1, [sp, #12]
 800aada:	1a5b      	subs	r3, r3, r1
 800aadc:	42ab      	cmp	r3, r5
 800aade:	dcf2      	bgt.n	800aac6 <_printf_i+0x212>
 800aae0:	e7eb      	b.n	800aaba <_printf_i+0x206>
 800aae2:	2500      	movs	r5, #0
 800aae4:	f104 0619 	add.w	r6, r4, #25
 800aae8:	e7f5      	b.n	800aad6 <_printf_i+0x222>
 800aaea:	bf00      	nop
 800aaec:	0800b67a 	.word	0x0800b67a
 800aaf0:	0800b68b 	.word	0x0800b68b

0800aaf4 <memmove>:
 800aaf4:	4288      	cmp	r0, r1
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	eb01 0402 	add.w	r4, r1, r2
 800aafc:	d902      	bls.n	800ab04 <memmove+0x10>
 800aafe:	4284      	cmp	r4, r0
 800ab00:	4623      	mov	r3, r4
 800ab02:	d807      	bhi.n	800ab14 <memmove+0x20>
 800ab04:	1e43      	subs	r3, r0, #1
 800ab06:	42a1      	cmp	r1, r4
 800ab08:	d008      	beq.n	800ab1c <memmove+0x28>
 800ab0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab12:	e7f8      	b.n	800ab06 <memmove+0x12>
 800ab14:	4402      	add	r2, r0
 800ab16:	4601      	mov	r1, r0
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	d100      	bne.n	800ab1e <memmove+0x2a>
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab26:	e7f7      	b.n	800ab18 <memmove+0x24>

0800ab28 <_sbrk_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d06      	ldr	r5, [pc, #24]	@ (800ab44 <_sbrk_r+0x1c>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	f7f8 fa50 	bl	8002fd8 <_sbrk>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_sbrk_r+0x1a>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_sbrk_r+0x1a>
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	200195d8 	.word	0x200195d8

0800ab48 <_realloc_r>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	4615      	mov	r5, r2
 800ab50:	460c      	mov	r4, r1
 800ab52:	b921      	cbnz	r1, 800ab5e <_realloc_r+0x16>
 800ab54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab58:	4611      	mov	r1, r2
 800ab5a:	f7ff bc59 	b.w	800a410 <_malloc_r>
 800ab5e:	b92a      	cbnz	r2, 800ab6c <_realloc_r+0x24>
 800ab60:	f7ff fbea 	bl	800a338 <_free_r>
 800ab64:	2400      	movs	r4, #0
 800ab66:	4620      	mov	r0, r4
 800ab68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6c:	f000 f81a 	bl	800aba4 <_malloc_usable_size_r>
 800ab70:	4285      	cmp	r5, r0
 800ab72:	4606      	mov	r6, r0
 800ab74:	d802      	bhi.n	800ab7c <_realloc_r+0x34>
 800ab76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab7a:	d8f4      	bhi.n	800ab66 <_realloc_r+0x1e>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4640      	mov	r0, r8
 800ab80:	f7ff fc46 	bl	800a410 <_malloc_r>
 800ab84:	4607      	mov	r7, r0
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d0ec      	beq.n	800ab64 <_realloc_r+0x1c>
 800ab8a:	42b5      	cmp	r5, r6
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4621      	mov	r1, r4
 800ab90:	bf28      	it	cs
 800ab92:	4632      	movcs	r2, r6
 800ab94:	f7ff fbc2 	bl	800a31c <memcpy>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f7ff fbcc 	bl	800a338 <_free_r>
 800aba0:	463c      	mov	r4, r7
 800aba2:	e7e0      	b.n	800ab66 <_realloc_r+0x1e>

0800aba4 <_malloc_usable_size_r>:
 800aba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba8:	1f18      	subs	r0, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bfbc      	itt	lt
 800abae:	580b      	ldrlt	r3, [r1, r0]
 800abb0:	18c0      	addlt	r0, r0, r3
 800abb2:	4770      	bx	lr

0800abb4 <_init>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	bf00      	nop
 800abb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abba:	bc08      	pop	{r3}
 800abbc:	469e      	mov	lr, r3
 800abbe:	4770      	bx	lr

0800abc0 <_fini>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr
