
/*=====================================================================================*\
| Author:   Christopher Coyne                                          June 24th, 2024  |
| --------------------------------------------------------------------------------------|
| Date:     June 24th, 2024                                                             |
| --------------------------------------------------------------------------------------|
| MODULE:     [ AccManager ]                                                            |
| FILE:       AccManager.c                                                              |
| --------------------------------------------------------------------------------------|
| DESCRIPTION:                                                                          |
|    The `AccManager` module is responsible for handling user input and all effects     |
|    pertaining to the on-board accelerometer.                                          |
\*=====================================================================================*/

/****************************************************
 *  Include files                                   *
 ****************************************************/

#include "AccManager.h"
#include "Config_AccManager.h"
#include "main.h"
#include <string.h>

/****************************************************
 *  Function prototypes                             *
 ****************************************************/

/****************************************************
 *  Messages                                        *
 ****************************************************/

const char *msg_inv_acc = "\n***** Invalid LED effect option ******\n";
const char *msg_acc_menu = "\n======================================\n"
				  		     "|         Accelerometer Menu         |\n"
						     "======================================\n\n"
							 " Read ---> Take accelerometer reading\n"
							 " Main ---> Return to main menu\n\n"
							 " Enter your selection here: ";

/****************************************************
 *  Variables                                       *
 ****************************************************/

/****************************************************
 *  Public functions                                *
 ****************************************************/

void acc_task(void* param)
{
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
		msg = (message_t*)msg_addr;

		// Process command
		if(msg->len <= 4) {
			if(!strcmp((char*)msg->payload, "Read")) {
				// Take an accelerometer reading
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
				// Update the system state
				curr_sys_state = sMainMenu;

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
			xTaskNotify(handle_acc_task, 0, eNoAction);
	}
}

void accelerometer_init(void)
{
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
	HAL_I2C_Mem_Write(&hi2c1, ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, I2C_MEMADD_SIZE_8BIT, &configData, 1, HAL_MAX_DELAY);
}

void accelerometer_read(int16_t *x, int16_t *y, int16_t *z)
{

}
