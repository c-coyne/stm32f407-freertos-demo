
/*=====================================================================================*\
| Author:   Christopher Coyne                                          June 24th, 2024  |
| --------------------------------------------------------------------------------------|
| Date:     June 24th, 2024                                                             |
| --------------------------------------------------------------------------------------|
| MODULE:     [ AccManager ]                                                            |
| FILE:       AccManager.c                                                              |
| --------------------------------------------------------------------------------------|
| DESCRIPTION:                                                                          |
|    The `AccManager` module is responsible for handling user input and all effects     |
|    pertaining to the on-board accelerometer.                                          |
\*=====================================================================================*/

/****************************************************
 *  Include files                                   *
 ****************************************************/

#include "AccManager.h"
#include "Config_AccManager.h"
#include "main.h"
#include <string.h>
#include <stdio.h>

/****************************************************
 *  Function prototypes                             *
 ****************************************************/

void show_acc_data(int16_t *acc_data, char *acc_flag);
void accelerometer_read(int16_t *acc_data, char *acc_flag);

/****************************************************
 *  Messages                                        *
 ****************************************************/

const char *msg_inv_acc = "\n***** Invalid accelerometer option ******\n";
const char *msg_acc_menu = "\n======================================\n"
				  		     "|         Accelerometer Menu         |\n"
						     "======================================\n\n"
							 " X    ---> Accelerometer X-axis reading\n"
							 " Y    ---> Accelerometer Y-axis reading\n"
							 " Z    ---> Accelerometer Z-axis reading\n"
							 " All  ---> Read all axes\n"
							 " Main ---> Return to main menu\n\n"
							 " Enter your selection here: ";

/****************************************************
 *  Variables                                       *
 ****************************************************/

/****************************************************
 *  Public functions                                *
 ****************************************************/

void acc_task(void* param)
{
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
		msg = (message_t*)msg_addr;

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
			acc_flag[i] = 0;
		}

		// Process command
		if(msg->len <= 4) {
			if(!strcmp((char*)msg->payload, "All")) {
				// Take an accelerometer reading
				accelerometer_read(acc_data, acc_flag);
				show_acc_data(acc_data, acc_flag);
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
				// Update the system state
				curr_sys_state = sMainMenu;

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
			xTaskNotify(handle_acc_task, 0, eNoAction);
	}
}

void accelerometer_init(void)
{
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
}

void accelerometer_read(int16_t *acc_data, char *acc_flag)
{
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);

	// Convert the data
//	*x = (int16_t)(accelData[1] << 8 | accelData[0]);
//	*y = (int16_t)(accelData[3] << 8 | accelData[2]);
//	*z = (int16_t)(accelData[5] << 8 | accelData[4]);

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z

	// Set the new data flags
	for(int i=0; i<3; i++) {
		acc_flag[i] = 1;
	}
}

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
	static char showacc[80];
	static char* acc = showacc;

	// Variables to simulate floating point numbers
	float x_f = (float)acc_data[0] * (2000.0 / 32768.0); // mg
	uint8_t x_i = x_f / 1000;
	uint8_t x_d = x_f - x_i;
	float y_f = (float)acc_data[1] * (2000.0 / 32768.0);
	uint8_t y_i;
	uint8_t y_d;
	float z_f = (float)acc_data[2] * (2000.0 / 32768.0);
	uint8_t z_i;
	uint8_t z_d;

	// Display the data that's available
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
		sprintf((char*)showacc, "\nAcceleration readings: X = %d g, Y = %d g, Z = %d g\r\n", acc_data[0], acc_data[1], acc_data[2]);
		xQueueSend(q_print, &acc, portMAX_DELAY);
	}
	else if (acc_flag[0] == 1) {
		sprintf((char*)showacc, "\nAcceleration reading: X = %d g\r\n", acc_data[0]);
	}
	else if (acc_flag[1] == 1) {
		sprintf((char*)showacc, "\nAcceleration reading: Y = %d g\r\n", acc_data[1]);
	}
	else if (acc_flag[2] == 1) {
		sprintf((char*)showacc, "\nAcceleration reading: Z = %d g\r\n", acc_data[2]);
	}
}
