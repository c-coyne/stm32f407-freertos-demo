
/*=====================================================================================*\
| Author:   Christopher Coyne                                          June 20th, 2024  |
| --------------------------------------------------------------------------------------|
| Date:     June 20th, 2024                                                             |
| --------------------------------------------------------------------------------------|
| MODULE:     [ RtcManager ]                                                            |
| FILE:       RtcManager.c                                                              |
| --------------------------------------------------------------------------------------|
| DESCRIPTION:                                                                          |
|    The `RtcManager` module is responsible for handling user input and configuration   |
|    of the real time clock (RTC).                                                      |
\*=====================================================================================*/

/****************************************************
 *  Include files                                   *
 ****************************************************/

#include "FreeRTOS.h"
#include "main.h"
#include "task.h"
#include "queue.h"
#include "RtcManager.h"
#include "Config_RtcManager.h"
#include "UartManager.h"
#include <string.h>

/****************************************************
 *  Function prototypes                             *
 ****************************************************/

uint8_t getnumber(uint8_t *p, int len);
int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date);

/****************************************************
 *  Messages                                        *
 ****************************************************/

const char *msg_inv_rtc = "\n***** Invalid RTC option ******\n";
const char *msg_conf = "RTC configuration successful\n";

const char *msg_rtc_hh = "Enter hour (1-12):";
const char *msg_rtc_mm = "Enter minutes (0-59):";
const char *msg_rtc_ss = "Enter seconds (0-59):";

const char *msg_rtc_dd = "Enter date (1-31):";
const char *msg_rtc_mo = "Enter month (1-12):";
const char *msg_rtc_yr = "Enter year (0-99)";
const char *msg_rtc_dow = "Enter day of the week (1:Sun-7:Mon):";

const char *msg_rtc_menu = "\n======================================\n"
				  		     "|               RTC Menu             |\n"
						     "======================================\n\n"
							 " Date ---> Configure date\n"
							 " Time ---> Configure time\n"
							 " Main ---> Return to main menu\n\n"
							 " Enter your selection here: ";

/****************************************************
 *  Variables                                       *
 ****************************************************/

static int curr_rtc_state = HH_CONFIG;
RTC_TimeTypeDef time;
RTC_DateTypeDef date;

/****************************************************
 *  Public functions                                *
 ****************************************************/

void rtc_task(void *param)
{
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

		// Display RTC menu for the user
		xQueueSend(q_print, &msg_rtc_menu, portMAX_DELAY);
		// show_time_date();
		// xQueueSend(q_print, "second half of the RTC menu", portMAX_DELAY);

		while(curr_sys_state != sMainMenu) {
			// Wait for the user to select their desired LED effect
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
			msg = (message_t*)msg_addr;

			switch(curr_sys_state) {
				case sRtcMenu:
					// Process command, update date / time accordingly
					if(msg->len <= 4) {
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
							curr_sys_state = sRtcDateConfig;
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
						}
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
							curr_sys_state = sRtcTimeConfig;
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
						}
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
							// Update the system state
							curr_sys_state = sMainMenu;
						}
						else {												// Invalid response
							// Update the system state
							curr_sys_state = sMainMenu;
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
						}
					}
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
				case sRtcDateConfig:
					break;
				case sRtcTimeConfig:
					switch(curr_rtc_state) {
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
							time.Hours = hour;
							curr_rtc_state = MM_CONFIG;
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
							break;
						case MM_CONFIG:
							uint8_t min = getnumber(cmd->payload, portMAX_DELAY);
							time.Minutes = min;
							curr_rtc_state = SS_CONFIG;
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
							break;
						case SS_CONFIG:
							uint8_t sec = getnumber(cmd->payload, portMAX_DELAY);
							time.Seconds = sec;
							if(!validate_rtc_information(&time, NULL)) {
								rtc_configure_time(&time);
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
								show_time_date();
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
							}
							// Update system state
							curr_sys_state = sMainMenu;
							curr_rtc_state = 0;
							break;
					}
					break;
				default:
					curr_sys_state = sMainMenu;
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					break;
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
	}
}

/****************************************************
 *  Private functions                               *
 ****************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
}

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
	if(time) {
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
			return 1;
	}
	if(date) {
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
			return 1;
	}

	return 0;
}

void rtc_configure_time(RTC_TimeTypeDef *date)
{
	time->TimeFormat = RTC_HOURFORMAT12_AM;
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	time->StoreOperation = RTC_STOREOPERATION_RESET;

	HAL_RTC_SetTimer(&hrtc, time, RTC_FORMAT_BIN);
}
