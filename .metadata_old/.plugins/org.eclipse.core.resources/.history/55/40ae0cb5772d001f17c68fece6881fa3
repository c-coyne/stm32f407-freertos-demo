
/*=====================================================================================*\
| Author:   Christopher Coyne                                          June 18th, 2024  |
| --------------------------------------------------------------------------------------|
| Date:     June 18th, 2024                                                             |
| --------------------------------------------------------------------------------------|
| MODULE:     [ UartManager ]                                                           |
| --------------------------------------------------------------------------------------|
| DESCRIPTION:                                                                          |
|    The `UartManager` task is responsible for handling all UART transmission and       |
|    reception operations. This task manages communication between the microcontroller  |
|    and external devices via the UART interface.                                       |
| --------------------------------------------------------------------------------------|
\*=====================================================================================*/

/****************************************************
 *  Include files                                   *
 ****************************************************/

#include "UartManager.h"
#include "Config_UartManager.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "main.h"
#include <string.h>
#include <stdint.h>

/****************************************************
 *  Function prototypes                             *
 ****************************************************/

void process_message(message_t *msg);
void extract_command(message_t *msg);

/****************************************************
 *  Functions                                       *
 ****************************************************/

void message_handler_task(void *param)
{
	BaseType_t ret;
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

		if(pdTRUE == ret) {
			// Process the message stored in the input data queue
			process_message(&msg);
		}

	}
}

void print_task(void *param)
{
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
	}
}
